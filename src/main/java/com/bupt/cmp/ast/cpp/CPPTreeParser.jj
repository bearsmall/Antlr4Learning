/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. CPPTreeParser.jj */
/*@egen*/options
{
  //\u59dd\u3089\ufffd\u5910\u300d\u704f\u55d5\u552c\u942e\u4f77\u8151\u9428\u5248\u675e\ue0ff\u7b9f\u7ed7\ufe41\u6d46\u93b9\u3221\u579a\u7035\u7470\u7c32\u9428\u5248nicode\u701b\u6943\ue0c1\u951b\u5c7c\u8d1f\u6d5c\u55db\u4f29\u934f\u5d85\u56ad\u95bf\u6b19\u7d1d\u934f\u581d\u59de\u6d93\u5a43\ue11d\u95ab\u5910\u300d\u951b\u5c7e\u68e9\u935a\u5ea1\u5f72\u6d60\u30e5\u5e53\u93ba\u591b\u7d1d\u9a9e\u8235\u657c\u9422\u3129\ue569\u6fb6\u52ed\u608a\u9428\u52ec\u67df\u5bee\u5fd3\u7584\u941c\ufffd
  JAVA_UNICODE_ESCAPE = true;
  //\u59dd\u3089\ufffd\u5910\u300d\u934f\u4f7d\ue18f\u6d60\uff47\u721c\u6d93\ue15f\u6e41\u6d93\ue15f\u6783\u951b\u5c7d\ue6e7\u93cb\u6ddbAVA_UNICODE_ESCAPE\u7481\u53e5\u8d1ffalse\u951b\u5c7d\u57af\u6434\u65c7\ue1da\u9354\u72b1\u7b02\u7487\u30e9\ufffd\u5910\u300d
  //UNICODE_INPUT = true;
  //\u59dd\u3089\ufffd\u5910\u300d\u6d63\u57ae\u5f72\u6d60\ue674ew\u9351\u8f70\u6362\u93b0\u5fd3\ue63f\u6d93\u72ffarser\u7035\u7845\u8584
  STATIC = false;
  //\u6d93\u5d86\u59e4\u935b\u5a47\u654a\u7487\ue224\u7d1d\u9359\ue219\u4e92\u93bb\u6130\u73ee\u93c1\u5822\u5dfc
  ERROR_REPORTING = false;
  //\u9477\ue044\u757e\u6d94\u590a\u4f10\u9358\u509c\u88ab
  //TOKEN_FACTORY = "TokenFactory";
  //\u7f02\u64b3\u74e8token\u951b\u5c7d\u5f72\u6d60\u30e6\u5f41\u6942\u6a3b\u6665\u941c\u56f7\u7d1d\u6d63\u55d7\u6d1c\u59dd\u3084\u7b09\u95ab\u509a\u608e\u6d5c\u3084\u7c30\u5bee\u5fce\u5a07\u9422\ufffd
  CACHE_TOKENS = true;
                  
                      
  JDK_VERSION = "1.5";
                               
                         
  //\u934f\u4f7d\ue18f\u9422\u71b8\u579atoken\u9428\u52ee\u59ad\u9410\u572d\u88ab
  //MULTI = true;
  //NODE_DEFAULT_VOID = true;
}

PARSER_BEGIN(CPPTreeParser)
package examiner.ast.cpp;
import java.io.*;
import java.util.*;
import examiner.common.*;
import examiner.pre.TreeProcess;
import examiner.ast.Node;
import examiner.ast.SimpleNode;
import examiner.codefile.DefaultCodeFile;

public final class CPPTreeParser/*@bgen(jjtree)*/implements CPPTreeParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTCPPTreeParserState jjtree = new JJTCPPTreeParserState();

/*@egen*/
  /**
	 * \u6769\u612f\ue511\u7459\uff46\u703d\u9363\ufffd
	 * 
	 * @param cf
	 * @return
	 */
  static String linshitest;
  public static boolean GetCPPGrammarTree(DefaultCodeFile cf) throws ParseException
  {
    if (cf.getText() == "")
    {
      return false;
    }
    // \u7459\uff46\u703d
    linshitest=cf.getName();
    CPPTreeParser parser;
    parser = new CPPTreeParser(new StringReader(cf.getText()));
    SimpleNode root = parser.translation_unit();
    //\u704f\u55da\ue1e2\u5a09\u66df\u7232\u675e\ue101\u5d32\u6d93\u70d8\u669f\u7f01\u52f6\u7d1d\u6dc7\u6fc6\u74e8\u9366\u255ff\u6d93\ufffd
    new TreeProcess().convertTreeToArrays(root, cf);
    return true;
  }

  /**
	 * A symbol table manager object. Currently only types are recorded for
	 * doing semantic predicates for parsing.
	 */
  public static SymtabManager sym;

  /*
	 * Methods used in semantics predicates.
	 */
  /**
	 * Reads a fully qualified name (since it is used during lookahead, we
	 * cannot use token. We have to explicitly use getToken).
	 */
  public String GetFullyScopedName() /* throws ParseException */
  {
    Token t = getToken(1);
    if (t.kind != ID && t.kind != SCOPE) return null;
    StringBuffer s = new StringBuffer();
    int i;
    if (t.kind != SCOPE)
    {
      s.append(t.image);
      t = getToken(2);
      i = 3;
    }
    else i = 2;
    while (t.kind == SCOPE)
    {
      s.append(t.image);
      s.append((t = getToken(i++)).image);
      t = getToken(i++);
    }
    return s.toString();
  }

  /**
	 * This method first tries to read a sequence of tokens of the form ("::")?
	 * <ID> ("::" <ID>)* and if it succeeds then asks the symbol table manager
	 * if this is the name of a constructor.
	 */
  public boolean IsCtor() /* throws ParseException */
  {
    return sym.IsCtor(GetFullyScopedName());
  }
}

PARSER_END(CPPTreeParser)
TOKEN :/*for #ifdef...else...endif*/
{
  < __TRY : "__try">
| < __ASM : "__asm">
| < __EXCEPT : "__except">
| < __FINALLY : "__finally">
| < __LEAVE : "__leave">
}
SKIP :
{
  " "
| "\t"
| "\r\n"
| "\n"
| "//" : IN_LINE_COMMENT
| "#ifdef" : IN_LINE_COMMENT
| "/*" : IN_COMMENT
| "#else" : ELSE_STATEMENT
| "#" : PREPROCESSOR_OUTPUT
}


< IN_LINE_COMMENT >
SKIP :
{
  "\n" : DEFAULT
}

< IN_LINE_COMMENT >
MORE :
{
  < ~[ ] >
}

< IN_COMMENT >
SKIP :
{
  "*/" : DEFAULT
}

< IN_COMMENT >
MORE :
{
  < ~[ ] >
}
< ELSE_STATEMENT>
SKIP :
{
  "#endif" : DEFAULT
}
< ELSE_STATEMENT>
MORE :
{
  < ~[ ] >
}
< PREPROCESSOR_OUTPUT >
SKIP :
{
  "\n" : DEFAULT
}

< PREPROCESSOR_OUTPUT >
MORE :
{
  "\\\n"
| "\\\r\n"
| < ~[ ] >
}

TOKEN :
{
  < LCURLYBRACE : "{" >
| < RCURLYBRACE : "}" >
| < LSQUAREBRACKET : "[" >
| < RSQUAREBRACKET : "]" >
| < LPARENTHESIS : "(" >
| < RPARENTHESIS : ")" >
| < SCOPE :
    (
      "::~"
    | "::"
    ) >
| < COLON : ":" >
| < SEMICOLON : ";" >
| < COMMA : "," >
| < QUESTIONMARK : "?" >
| < ELLIPSIS : "..." >
| < ASSIGNEQUAL : "=" >
| < TIMESEQUAL : "*=" >
| < DIVIDEEQUAL : "/=" >
| < MODEQUAL : "%=" >
| < PLUSEQUAL : "+=" >
| < MINUSEQUAL : "-=" >
| < SHIFTLEFTEQUAL : "<<=" >
| < SHIFTRIGHTEQUAL : ">>=" >
| < BITWISEANDEQUAL : "&=" >
| < BITWISEXOREQUAL : "^=" >
| < BITWISEOREQUAL : "|=" >
| < OR_OP : "||" >
| < AND_OP : "&&" >
| < BITWISEOR : "|" >
| < BITWISEXOR : "^" >
| < AMPERSAND : "&" >
| < EQUAL : "==" >
| < NOTEQUAL : "!=" >
| < LESSTHAN : "<" >
| < GREATERTHAN : ">" >
| < LESSTHANOREQUALTO : "<=" >
| < GREATERTHANOREQUALTO : ">=" >
| < SHIFTLEFT : "<<" >
| < SHIFTRIGHT : ">>" >
| < PLUS : "+" >
| < MINUS : "-" >
| < STAR : "*" >
| < DIVIDE : "/" >
| < MOD : "%" >
| < PLUSPLUS : "++" >
| < MINUSMINUS : "--" >
| < TILDE : "~" >
| < NOT_OP : "!" >
| < DOT : "." >
| < POINTERTO : "->" >
| < DOTSTAR : ".*" >
| < ARROWSTAR : "->*" >
| < AND : "and" >
| < AND_EQ : "and_eq" >
| < ASM : "asm" >
| < AUTO : "auto" >
| < BITAND : "bitand" >
| < BITOR : "bitor" >
| < BOOL : "bool" >
| < BREAK : "break" >
| < CASE : "case" >
| < CATCH : "catch" >
| < CHAR : "char" >
| < CLASS : "class" >
| < COMPL : "compl" >
| < CONST : "const" >
| < CONST_CAST : "const_cast" >
| < CONTINUE : "continue" >
| < _DEFAULT : "default" >
| < DELETE : "delete" >
| < DO : "do" >
| < DOUBLE : "double" >
| < DYNAMIC_CAST : "dynamic_cast" >
| < ELSE : "else" >
| < ENUM : "enum" >
| < EXPLICIT : "explicit" >
| < EXPORT : "export" >
| < EXTERN : "extern" >
| < FALSE : "false" >
| < FLOAT : "float" >
| < FOR : "for" >
| < FRIEND : "friend" >
| < GOTO : "goto" >
| < IF : "if" >
| < INLINE : "inline" >
| < INT : "int" >
| < LONG : "long" >
| < mutable : "mutable" >
| < NAMESPACE : "namespace" >
| < NEW : "new" >
| < NOT : "not" >
| < NOT_EQ : "not_eq" >
| < OPERATOR : "operator" >
| < OR : "or " >
| < OR_EQ : "or_eq " >
| < PRIVATE : "private" >
| < PROTECTED : "protected" >
| < PUBLIC : "public" >
| < REGISTER : "register" >
| < REINTERPRET : "reinterpret_cast" >
| < RETURN : "return" >
| < SHORT : "short" >
| < SIGNED : "signed" >
| < SIZEOF : "sizeof" >
| < _STATIC : "static" >
| < STATIC_CAST : "static_cast" >
| < STRUCT : "struct" >
| < SWITCH : "switch" >
| < TEMPLATE : "template" >
| < THIS : "this" >
| < THROW : "throw" >
| < TRUE : "true " >
| < TRY : "try"|"TRY" >
| < TYPEDEF : "typedef" >
| < TYPEID : "typeid" >
| < TYPENAME : "typename" >
| < UNION : "union" >
| < UNSIGNED : "unsigned" >
| < USING : "using" >
| < VIRTUAL : "virtual" >
| < VOID : "void" >
| < VOLATILE : "volatile" >
| < WCHAR_T : "wchar_t" >
| < DWORD : "DWORD" >
| < WORD : "WORD" >
| < BYTE : "BYTE" >
| < WHILE : "while" >
| < XOR : "xor" >
| < XOR_EQ : "xor_eq " >
| < STD : "std">
}
//add std to deal with std::vector...
TOKEN [ IGNORE_CASE ] :
{
  < OCTALINT : "0" ([ "0"-"7" ])* >
| < OCTALLONG : < OCTALINT > "l" >
| < UNSIGNED_OCTALINT : < OCTALINT > "u" >
| < UNSIGNED_OCTALLONG :
    < OCTALINT >
    (
      "ul"
    | "lu"
    ) >
| < DECIMALINT : [ "1"-"9" ] ([ "0"-"9" ])* >
| < DECIMALLONG : < DECIMALINT > [ "u", "l" ] >
| < UNSIGNED_DECIMALINT : < DECIMALINT > "u" >
| < UNSIGNED_DECIMALLONG :
    < DECIMALINT >
    (
      "ul"
    | "lu"
    ) >
| < HEXADECIMALINT : "0x" ([ "0"-"9", "a"-"f" ])+ >
| < HEXADECIMALLONG : < HEXADECIMALINT > ([ "u", "l" ])? >
| < UNSIGNED_HEXADECIMALINT : < HEXADECIMALINT > "u" >
| < UNSIGNED_HEXADECIMALLONG :
    < HEXADECIMALINT >
    (
      "ul"
    | "lu"
    ) >
| < FLOATONE :
    (
      ([ "0"-"9" ])+ "." ([ "0"-"9" ])*
    | ([ "0"-"9" ])* "." ([ "0"-"9" ])+
    )
    (
      "e" ([ "-", "+" ])? ([ "0"-"9" ])+
    )?
    ([ "f", "l" ])? >
| < FLOATTWO : ([ "0"-"9" ])+ "e" ([ "-", "+" ])? ([ "0"-"9" ])+ ([ "f", "l" ])? >
}

TOKEN :
{
  < CHARACTER :
    ("L")? "'"
    (
      (~[ "'", "\\", "\n", "\r" ])
    |
      (
        "\\"
        (
          [ "n", "t", "v", "b", "r", "f", "a", "\\", "?", "'", "\"" ]
        | "0" ([ "0"-"7" ])*
        | [ "1"-"9" ] ([ "0"-"9" ])*
        |
          (
            "0x"
          | "0X"
          )
          ([ "0"-"9", "a"-"f", "A"-"F" ])+
        )
      )
    )*
    "'" >
| < STRING :
    ("L")? "\""
    (
      (~[ "\"", "\\", "\n", "\r" ])
    |
      (
        "\\"
        (
          [ "n", "t", "v", "b", "r", "f", "a", "\\", "?", "'", "\"", "\n" ]
        | "0" ([ "0"-"7" ])*
        | [ "1"-"9" ] ([ "0"-"9" ])*
        |
          (
            "0x"
          | "0X"
          )
          ([ "0"-"9", "a"-"f", "A"-"F" ])+
        )
      )
    )*
    "\"" >
}

TOKEN :
{
  < ID : [ "a"-"z", "A"-"Z", "_" ] ([ "a"-"z", "A"-"Z", "0"-"9", "_" ])* >
}

SimpleNode translation_unit()       :
{/*@bgen(jjtree) Root */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) Root */
  try {
/*@egen*/
  {
    sym.OpenScope(null, false);
  }
  (
    LOOKAHEAD(2)
    external_declaration()
  )*
  endfun()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    sym.CloseScope();
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}
void endfun()      :
{
}
{
  < EOF >
}
void external_declaration()                       :
{/*@bgen(jjtree) external_declaration */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEXTERNAL_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  boolean isTypedef = false;
  System.out.println("external_declaration()");
}
{/*@bgen(jjtree) external_declaration */
  try {
/*@egen*/
  LOOKAHEAD({ getToken(1).kind == __TRY || getToken(1).kind == __ASM || getToken(1).kind == __FINALLY })
  (
    < __TRY >
  | 
    < __ASM >
  | 
    < __FINALLY >
  )
  compound_statement()
| < __EXCEPT >
  (
    {
      while (getToken(1).kind != LCURLYBRACE)
      {
        jj_consume_token(getToken(1).kind);
      }
    }
    compound_statement()
  )
| < __LEAVE > ";"
| 
  LOOKAHEAD(("typedef"
| template_head())? class_head() "{")
  {
    System.out.println("external_declaration() -- > template_head+declaration");
  }
  (
    {
      System.out.println("external_declaration() -- > template_head()");
    }
    template_head()
  )?
  declaration()
| LOOKAHEAD("enum" (t = < ID >)? "{")
  enum_specifier()
  (
    init_declarator_list(false)
  )?
  ";"
| LOOKAHEAD((template_head())? dtor_ctor_decl_spec() dtor_declarator() "{")
  {
    System.out.println("=dtor_definition()=");
  }
  dtor_definition()
| LOOKAHEAD(dtor_ctor_decl_spec() ctor_declarator_lookahead())
  {
    System.out.println("=dtor_ctor_decl_spec()=");
  }
  ctor_definition()
| LOOKAHEAD((declaration_specifiers())? function_declarator_lookahead())
  {
    System.out.println("=function_definition()=");
  }
  function_definition()
| LOOKAHEAD((scope_override())? "operator")
  {
    System.out.println("=conversion_function_decl_or_def()=");
  }
  conversion_function_decl_or_def()
| template_head()
  (
    LOOKAHEAD(dtor_ctor_decl_spec() ctor_declarator_lookahead())
    ctor_definition()
  | LOOKAHEAD((declaration_specifiers())? function_declarator_lookahead())
    function_definition()
  | isTypedef = declaration_specifiers()
    (
      init_declarator_list(isTypedef)
    )?
    ";"
  )
|
  {
    System.out.println("=declaration()=");
  }
  declaration()
| ";"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    System.out.println("The Very Beginning consume ;;;;;;;;;;;;;;;;");
  }
| < USING > < NAMESPACE > < ID > ";"
| LOOKAHEAD(3,((< STD >)< SCOPE >< ID >))
{
  System.out.println("external_declaration() to std::id");
}
Scope_declaration()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}
//deal with std::vector and etc...
void function_definition()                      :
{/*@bgen(jjtree) function_definition */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTFUNCTION_DEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Scope sc = null;
  boolean isTypedef;
  System.out.println("function_definition():"+getToken(1).image+getToken(2).image+getToken(3).image);
}
{/*@bgen(jjtree) function_definition */
  try {
/*@egen*/
  LOOKAHEAD(3)
  {
    System.out.println("function_definition():"+"case 1");
  }
  isTypedef = declaration_specifiers()
  sc = function_declarator(isTypedef)
  func_decl_def(sc)
|
  {
    System.out.println("function_definition():"+"case 2");
  }
  sc = function_declarator(false)
  func_decl_def(sc)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void func_decl_def(Scope sc)                :
{/*@bgen(jjtree) func_decl_def */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTFUNC_DECL_DEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  boolean closeReqd = false;
  System.out.println("Welcome to func_decl_def");
}
{/*@bgen(jjtree) func_decl_def */
  try {
/*@egen*/
  {
    if (closeReqd = (sc != null && sc != sym.GetCurScope()))
    {
      System.out.println("Open a new Scope in func_decl_def");
      sym.OpenScope(sc);
    }
  }
  (
    {
      System.out.println("func_decl_def -- > compound_statement");
    }
    compound_statement() // { balabala }
    {
      System.out.println("func_decl_def -- > compound_statement end");
    }
  | 
    (
    ";"
    )?
    {
      System.out.println("Welcome to func_decl_def, here consume a ; or nothing");
    }
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    if (closeReqd)
    {
      System.out.println("Close a new Scope in func_decl_def");
      sym.CloseScope();
    }
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void linkage_specification()                        :
{/*@bgen(jjtree) linkage_specification */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTLINKAGE_SPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) linkage_specification */
  try {
/*@egen*/
  "extern" < STRING >
  (
    "{"
    (
      external_declaration()
    )*
    "}"
    (
      LOOKAHEAD(";")
      ";"
    )?
  | declaration()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}
//protea changed in 1023
void declarationforif()                   :
{/*@bgen(jjtree) declarationforif */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDECLARATIONFORIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  boolean isTypedef = false;
}
{/*@bgen(jjtree) declarationforif */
  try {
/*@egen*/
  LOOKAHEAD(3)
  isTypedef = declaration_specifiers()
  (
    {
      System.out.println("======Next step is init_declarator_list()=====");
    }
    init_declarator_list(isTypedef)
  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    System.out.println("declaration() : consume a ;");
  }
| 
  LOOKAHEAD(3)
  extern_linkage_specification()
|
  {
    System.out.println("=====Next step is linkage_specification()()=====");
  }
  linkage_specification()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}
void declaration()              :
{/*@bgen(jjtree) declaration */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  boolean isTypedef = false;
}
{/*@bgen(jjtree) declaration */
  try {
/*@egen*/
  LOOKAHEAD(3)
  isTypedef = declaration_specifiers()
  (
    {
      System.out.println("======Next step is init_declarator_list()=====");
    }
    init_declarator_list(isTypedef)
  )?
  ";"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    System.out.println("declaration() : consume a ;");
  }
| 
  LOOKAHEAD(3)
  extern_linkage_specification()
|
  {
    System.out.println("=====Next step is linkage_specification()()=====");
  }
  linkage_specification()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}
// to deal with extern "C" function_declaration function_definition or ";"
void extern_linkage_specification()                             :
{/*@bgen(jjtree) extern_linkage_specification */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEXTERN_LINKAGE_SPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) extern_linkage_specification */
  try {
/*@egen*/
  "extern" < STRING >
  (
    extern_builtin_type_specifier()
  | < ID >
  )+
  "("
  {
    while (getToken(1).kind != RPARENTHESIS)
    {
      jj_consume_token(getToken(1).kind);
    }
    System.out.println("the end before \")\"");
  }
  ")"
  //LOOKAHEAD((declaration_specifiers())? function_declarator_lookahead())
  (
    ";"
  | 
    function_definition()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}
/**
 * Very temporary. Just returns true if it sees a typedef. Finally, we will
 * need a structure that stores all the attributes.
 */
boolean type_modifiers()                 :
{/*@bgen(jjtree) type_modifiers */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTYPE_MODIFIERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  boolean isTypedef = false;
}
{/*@bgen(jjtree) type_modifiers */
  try {
/*@egen*/
  (
    isTypedef = storage_class_specifier()
  | type_qualifier()
  | "inline"
  | "virtual"
  | "friend"
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    return isTypedef;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

/**
 * Very temporary. Just returns true if it sees a typedef. Finally, we will
 * need a structure that stores all the attributes.
 * protea changed in 1018
 */
boolean declaration_specifiers()                         :
{/*@bgen(jjtree) declaration_specifiers */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDECLARATION_SPECIFIERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Token t;
  boolean isTypedef = false, tmp;
  System.out.println("declaration_specifiers:"+getToken(1).image + getToken(2).image + getToken(3).image);
}
{/*@bgen(jjtree) declaration_specifiers */
  try {
/*@egen*/
  ( 
    LOOKAHEAD({ getToken(1).kind == STD })
    (
      {
        System.out.println("there is a kind type named std::<ID>:" + getToken(1).image + getToken(2).image + getToken(3).image);
      }
      < STD > < SCOPE > < ID > ("<" template_argument_list() ">")*
      (
        "*"
      | "&"
      )*
    )
  | 
    (
      LOOKAHEAD(type_modifiers())
      tmp = type_modifiers()
      {
        System.out.println("===declaration_specifiers --> type_modifiers===");
        isTypedef |= tmp;
      }
    )+
    [
      LOOKAHEAD(2)
      (
        LOOKAHEAD(extern_builtin_type_specifier())
        {
          System.out.println("===In extern_builtin_type_specifier() 1_1===");
        }
        extern_builtin_type_specifier()
        (
          LOOKAHEAD(2)
          (
            LOOKAHEAD(extern_builtin_type_specifier())
            {
              System.out.println("===In extern_builtin_type_specifier() 1_2===");
            }
            extern_builtin_type_specifier()
          | LOOKAHEAD(type_modifiers())
            tmp = type_modifiers()
          )
          {
            System.out.println("===extern_builtin_type_specifier --> type_modifiers 1===");
            isTypedef |= tmp;
          }
        )*
      |
        (
          class_specifier()
          {
            System.out.println("===declaration_specifiers --> class_specifier()===");
          }
        | enum_specifier()
          {
            System.out.println("===declaration_specifiers --> enum_specifier()===");
          }
        | qualified_type()
          {
            System.out.println("===declaration_specifiers --> qualified_type()===");
          }
        )
        (
          LOOKAHEAD(2)
          tmp = type_modifiers()
          {
            System.out.println("===last type_modifiers for choose 1===");
            isTypedef |= tmp;
          }
        )*
      )
    ]
  | LOOKAHEAD(extern_builtin_type_specifier())
    {
      System.out.println("===In extern_builtin_type_specifier() 2_1===");
    }
    extern_builtin_type_specifier()
    (
      LOOKAHEAD(2)
      (
        LOOKAHEAD(extern_builtin_type_specifier())
        {
          System.out.println("===In extern_builtin_type_specifier() 2_2===");
        }
        extern_builtin_type_specifier()
      | tmp = type_modifiers()
        {
          System.out.println("===last type_modifiers for choose 2===");
          isTypedef |= tmp;
        }
      )
    )*
  |
    (
      {
        System.out.println("===declaration_specifiers --> class_specifier()===");
      }
      class_specifier()
    | enum_specifier()
      {
        System.out.println("===declaration_specifiers --> enum_specifier()===");
      }
    | qualified_type()
      {
        System.out.println("===declaration_specifiers --> qualified_type()===");
      }
    )
    (
      LOOKAHEAD(2)
      tmp = type_modifiers()
      {
        System.out.println("===last type_modifiers for choose 3===");
        isTypedef |= tmp;
      }
    )*
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    return isTypedef;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

/*
void type_specifier() :
{}
{
    simple_type_specifier()
   |
    class_specifier()
   |
    enum_specifier()
}
*/
void simple_type_specifier()                        :
{/*@bgen(jjtree) simple_type_specifier */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSIMPLE_TYPE_SPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) simple_type_specifier */
  try {
/*@egen*/
  (
    extern_builtin_type_specifier()
  | qualified_type()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

//protea changed in 1017
void scope_override_lookahead()                           :
{/*@bgen(jjtree) scope_override_lookahead */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSCOPE_OVERRIDE_LOOKAHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) scope_override_lookahead */
  try {
/*@egen*/
  < SCOPE >
| < ID >
  (
    "<" template_argument_list() ">"
  )?
  < SCOPE >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

//protea changed in 1017 scope
String scope_override()                 :
{/*@bgen(jjtree) scope_override */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSCOPE_OVERRIDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  String name = "";
  Token t;
  System.out.println("scope_override():"+getToken(1).image+"||"+getToken(2).image+"||"+getToken(3).image);
}
{/*@bgen(jjtree) scope_override */
  try {
/*@egen*/
  (
    (< SCOPE >)
    {
      name += "::";
    }
    (
      LOOKAHEAD(2)
      t = < ID >
      {
        System.out.println("::< ID >=" + t.image);
      }
      (
        {
          System.out.println("1-"+tokenImage [ getToken(1).kind ] + tokenImage [ getToken(2).kind ] + tokenImage [ getToken(3).kind ] + "11< template_argument_list() >");
        }
        "<" template_argument_list() ">"
      )?
      < SCOPE >

    )*
  |
    (
      LOOKAHEAD(2)
      t = < ID >
      {
        System.out.println("::< ID > ="+t.image);
      }
      (
        {
          System.out.println("2-"+tokenImage [ getToken(1).kind ] + tokenImage [ getToken(2).kind ] + tokenImage [ getToken(3).kind ] + "12< template_argument_list() >");
        }
        "<" template_argument_list() ">"
      )?
      {
        System.out.println("here is ::<ID><template_argument_list()>::");
      }
      < SCOPE >
    )+
    {
      System.out.println("In Scope_Override,we get a name:"+name);
    }
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    return name;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}


//protea changed in 1023 deal with std::vector and etc
void Scope_declaration()                   :
{/*@bgen(jjtree) Scope_declaration */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSCOPE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  String name="";
  Token t;
  int consume;
}
{/*@bgen(jjtree) Scope_declaration */
  try {
/*@egen*/
  (
    <STD>
  )
  < SCOPE > < ID >
  (
    anytoken()
  )*
  < SEMICOLON >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}
String qualified_id()               :
{/*@bgen(jjtree) qualified_id */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTQUALIFIED_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  String name = "";
  Token t;
  System.out.println("qualified_id()");
}
{/*@bgen(jjtree) qualified_id */
  try {
/*@egen*/
  [
    LOOKAHEAD(scope_override_lookahead())
    {
      System.out.println("qualified_id() -- > ===scope_override===");
    }
    name = scope_override()
  ]
  (
    t = < ID > [ "<" template_argument_list() ">" ]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
      System.out.println("===use template_argument_list()===" + name + t.image);
      return name + t.image;
    }
  | "operator" optor()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
      System.out.println("===use optor===");
      return "operator";
    }
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void ptr_to_member()                :
{/*@bgen(jjtree) ptr_to_member */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTPTR_TO_MEMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ptr_to_member */
  try {
/*@egen*/
  scope_override() "*"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void qualified_type()                 :
{/*@bgen(jjtree) qualified_type */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTQUALIFIED_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  System.out.println("qualified_type() can go to qualified_id()");
}
{/*@bgen(jjtree) qualified_type */
  try {
/*@egen*/
  {
    System.out.println("qualified_type() -- > IsFullyScopedTypeName()");
  }
  LOOKAHEAD({ sym.IsFullyScopedTypeName(GetFullyScopedName()) })  
  qualified_id()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void type_qualifier()                 :
{/*@bgen(jjtree) type_qualifier */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTYPE_QUALIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) type_qualifier */
  try {
/*@egen*/
  "const"
| "volatile"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

/**
 * Very temporary. Just returns true if it sees a typedef. Finally, we will
 * need a structure that stores all the attributes.
 */
boolean storage_class_specifier()                          :
{/*@bgen(jjtree) storage_class_specifier */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSTORAGE_CLASS_SPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) storage_class_specifier */
  try {
/*@egen*/
  (
    "auto"
  | "register"
  | "static"
  | "extern"
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    return false;
  }
| "typedef"/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    return true;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void builtin_type_specifier()                         :
{/*@bgen(jjtree) builtin_type_specifier */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTBUILTIN_TYPE_SPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) builtin_type_specifier */
  try {
/*@egen*/
  "void"
| "bool"
| "char"
| "short"
| "int"
| "long"
| "float"
| "double"
| "signed"
| "unsigned"
| "wchar_t"
| "DWORD"
| "WORD"
| "BYTE"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

//protea changed in 1018
// normal type|<ID> type|(<ID>) <ID>/normal type type| (<ID>):: type| typedef <ID> type
// and int* <ID> type
void extern_builtin_type_specifier()                                :
{/*@bgen(jjtree) extern_builtin_type_specifier */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEXTERN_BUILTIN_TYPE_SPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  System.out.println("extern_builtin_type_specifier():"+ tokenImage [ getToken(1).kind ]+ "-"+ tokenImage [ getToken(2).kind ]+ "-"+ tokenImage [ getToken(3).kind ]);
}
{/*@bgen(jjtree) extern_builtin_type_specifier */
  try {
/*@egen*/
  (
    LOOKAHEAD({ getToken(0).kind == TYPEDEF && getToken(1).kind == ID })
    < ID >
  | LOOKAHEAD({ getToken(1).kind == ID && getToken(2).kind == RPARENTHESIS &&
  (
    getToken(3).kind == ID
    || getToken(3).kind == SCOPE
    || getToken(3).kind == THIS
    || getToken(3).kind == NEW
    || getToken(3).kind == OCTALINT
    || getToken(3).kind == OCTALLONG
    || getToken(3).kind == UNSIGNED_OCTALINT
    || getToken(3).kind == UNSIGNED_OCTALLONG
    || getToken(3).kind == DECIMALINT
    || getToken(3).kind == DECIMALLONG
    || getToken(3).kind == UNSIGNED_DECIMALINT
    || getToken(3).kind == UNSIGNED_DECIMALLONG
    || getToken(3).kind == HEXADECIMALINT
    || getToken(3).kind == HEXADECIMALLONG
    || getToken(3).kind == UNSIGNED_HEXADECIMALINT
    || getToken(3).kind == UNSIGNED_HEXADECIMALLONG
    || getToken(3).kind == FLOATONE
    || getToken(3).kind == FLOATTWO
    || getToken(3).kind == CHARACTER
    || getToken(3).kind == STRING) })
    < ID >
  | 
    LOOKAHEAD({ getToken(1).kind == ID &&
    (
      getToken(2).kind == STAR
      || getToken(2).kind == AMPERSAND
      || getToken(2).kind == ID
      || getToken(2).kind == VOID
      || getToken(2).kind == BOOL
      || getToken(2).kind == CHAR
      || getToken(2).kind == SHORT
      || getToken(2).kind == INT
      || getToken(2).kind == LONG
      || getToken(2).kind == FLOAT
      || getToken(2).kind == DOUBLE
      || getToken(2).kind == SIGNED
      || getToken(2).kind == UNSIGNED
      || getToken(2).kind == WCHAR_T
      || getToken(2).kind == DWORD
      || getToken(2).kind == WORD
      || getToken(2).kind == BYTE
      || getToken(2).kind == CONST
      || getToken(2).kind == VOLATILE
      || getToken(2).kind == INLINE
      || getToken(2).kind == VIRTUAL
      || getToken(2).kind == FRIEND
      || getToken(2).kind == AUTO
      || getToken(2).kind == REGISTER
      || getToken(2).kind == _STATIC
      || getToken(2).kind == EXTERN) })
    < ID >
  | "void"
  | "bool"
  | "char"
  | "short"
  | "int"
  | "long"
  | "float"
  | "double"
  | "signed"
  | "unsigned"
  | "wchar_t"
  | "DWORD"
  | "WORD"
  | "BYTE"
  )
  (
    LOOKAHEAD(< STAR > extern_builtin_type_specifier())
    < STAR >
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void init_declarator_list(boolean isTypedef)                       :
{/*@bgen(jjtree) init_declarator_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTINIT_DECLARATOR_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  System.out.println("init_declarator_list() -- > init_declarator { , init_declarator}");
}
{/*@bgen(jjtree) init_declarator_list */
  try {
/*@egen*/
  init_declarator(isTypedef)
  (
    "," init_declarator(isTypedef)
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void init_declarator(boolean isTypedef)                  :
{/*@bgen(jjtree) init_declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTINIT_DECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  String name;
}
{/*@bgen(jjtree) init_declarator */
  try {
/*@egen*/
  name = declarator()
  {
    System.out.println("init_declarator:" + name);
    if (isTypedef) sym.PutTypeName(name);
  }
  (
    {
      System.out.println("init_declarator -- > = initializer()");
    }
    "=" initializer()   
  |
    {
      System.out.println("init_declarator -- >( expression_list() )");
    }
    "(" expression_list() ")"
  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void class_head()             :
{/*@bgen(jjtree) class_head */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCLASS_HEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) class_head */
  try {
/*@egen*/
  (
    "struct"
  | "union"
  | "class"
  )
  (
    < ID >
    (
      base_clause(null)
    )?
  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void class_specifier()                  :
{/*@bgen(jjtree) class_specifier */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCLASS_SPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  ClassScope sc = null;
  Token t;
  System.out.println("class_specifier()");
}
{/*@bgen(jjtree) class_specifier */
  try {
/*@egen*/
  (
    "struct"
  | "union"
  | "class"
  )
  (
    "{"
    {
      System.out.println("try class_specifier() openScope");
      sym.OpenScope(null, false);
    }
    (
      {
        System.out.println("class_specifier() -- > member_declaration() number 1");
      }
      member_declaration()
    )*
    "}"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
      sym.CloseScope();
    }
  | LOOKAHEAD(2)
    t = < ID >
    {
      System.out.println("try class_specifier() openScope after a <ID>");
      sc = (ClassScope) sym.OpenScope(t.image, true);
    }
    (
      base_clause(sc)
    )?
    "{"
    (
      {
        System.out.println("number2 member_declaration() in class_specifier()");
         }
      
      member_declaration()
    )*
    "}"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
      sym.CloseScope();
    }
  | t = < ID >
    (
      LOOKAHEAD(2)
      "<" template_argument_list() ">"
    )?/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
      sym.PutTypeName(t.image);
    }
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void base_clause(ClassScope scope)              :
{/*@bgen(jjtree) base_clause */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTBASE_CLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) base_clause */
  try {
/*@egen*/
  ":" base_specifier(scope)
  (
    "," base_specifier(scope)
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void base_specifier(ClassScope scope)                 :
{/*@bgen(jjtree) base_specifier */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTBASE_SPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) base_specifier */
  try {
/*@egen*/
  (
    "virtual"
    (
      access_specifier()
    )?
  | access_specifier() ("virtual")?
  )?
  (
    LOOKAHEAD(scope_override_lookahead())
    scope_override()
  )?
  t = < ID >
  (
    "<" template_argument_list() ">"
  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    scope.AddSuper(sym.GetScope(t.image));
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void access_specifier()                   :
{/*@bgen(jjtree) access_specifier */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTACCESS_SPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) access_specifier */
  try {
/*@egen*/
  "public"
| "protected"
| "private"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void member_declaration()                     :
{/*@bgen(jjtree) member_declaration */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTMEMBER_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  boolean isTypedef = false;
}
{/*@bgen(jjtree) member_declaration */
  try {
/*@egen*/
  LOOKAHEAD(("typedef")? class_head() "{")
  declaration()
| LOOKAHEAD("enum" (< ID >)? "{")
  enum_specifier()
  (
    member_declarator_list(false)
  )?
  ";"
| LOOKAHEAD("operator")
  conversion_function_decl_or_def()
| LOOKAHEAD(dtor_ctor_decl_spec() dtor_declarator() "{")
  dtor_definition()
| LOOKAHEAD(("inline"
| "virtual")* "~")
  dtor_ctor_decl_spec() simple_dtor_declarator() ";"
| LOOKAHEAD(dtor_ctor_decl_spec() ctor_declarator_lookahead())
  ctor_definition()
| LOOKAHEAD(dtor_ctor_decl_spec() ctor_declarator_lookahead() ";")
  (
    dtor_ctor_decl_spec() ctor_declarator() ";"
  )
| LOOKAHEAD((declaration_specifiers())? function_declarator_lookahead())
{
  System.out.println("member_declaration() -- > function_definition()");
}
  function_definition()
| LOOKAHEAD(declaration_specifiers())
{
  System.out.println("member_declaration() -- > declaration_specifiers()");
}
  isTypedef = declaration_specifiers()
  (
    member_declarator_list(isTypedef)
  )?
  ";"
| LOOKAHEAD(< ID >)
{
  System.out.println("member_declaration() -- > function_declarator");
}
  function_declarator(false) ";"
| LOOKAHEAD(3)
{
  System.out.println("member_declaration() -- > qualified_id() ;");
}
  qualified_id() ";"
| access_specifier() ":"
| ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void member_declarator_list(boolean isTypedef)                         :
{/*@bgen(jjtree) member_declarator_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTMEMBER_DECLARATOR_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) member_declarator_list */
  try {
/*@egen*/
  member_declarator(isTypedef) ("=" < OCTALINT >)?
  (
    "," member_declarator(isTypedef) ("=" < OCTALINT >)?
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void member_declarator(boolean isTypedef)                    :
{/*@bgen(jjtree) member_declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTMEMBER_DECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  String name;
}
{/*@bgen(jjtree) member_declarator */
  try {
/*@egen*/
  name = declarator()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    if (isTypedef) sym.PutTypeName(name);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}
//changed in 1027
void conversion_function_decl_or_def()                                  :
{/*@bgen(jjtree) conversion_function_decl_or_def */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCONVERSION_FUNCTION_DECL_OR_DEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Scope sc = null;
  String name = null;
}
{/*@bgen(jjtree) conversion_function_decl_or_def */
  try {
/*@egen*/
  [
    LOOKAHEAD(scope_override_lookahead())
    name = scope_override()
  ]
  "operator" declaration_specifiers()
  (
    "*"
  | "&"
  )?
  "("
  (
    parameter_list()
  )?
  extern_parameter_list()
  (
    LOOKAHEAD(2)
    type_qualifier()
  )?
  (
    exception_spec()
  )?
  func_decl_def(null)/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/ // Temporary (fix the null)
}

void enum_specifier()                 :
{/*@bgen(jjtree) enum_specifier */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTENUM_SPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) enum_specifier */
  try {
/*@egen*/
  "enum"
  (
    "{" enumerator_list() "}"
  | t = < ID >
    (
      LOOKAHEAD(2)
      "{" enumerator_list() "}"
    )?/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
      sym.PutTypeName(t.image);
    }
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void enumerator_list()                  :
{/*@bgen(jjtree) enumerator_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTENUMERATOR_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) enumerator_list */
  try {
/*@egen*/
  enumerator()
  (
    "," enumerator()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void enumerator()             :
{/*@bgen(jjtree) enumerator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTENUMERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) enumerator */
  try {
/*@egen*/
  < ID >
  (
    "=" constant_expression()
  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void ptr_operator()               :
{/*@bgen(jjtree) ptr_operator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTPTR_OPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ptr_operator */
  try {
/*@egen*/
  "&" cv_qualifier_seq()
| "*" cv_qualifier_seq()
| ptr_to_member() cv_qualifier_seq()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void cv_qualifier_seq()                   :
{/*@bgen(jjtree) cv_qualifier_seq */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCV_QUALIFIER_SEQ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) cv_qualifier_seq */
  try {
/*@egen*/
  [
    LOOKAHEAD(2)
    (
      "const"
      [
        LOOKAHEAD(2)
        "volatile"
      ]
    | "volatile"
      [
        LOOKAHEAD(2)
        "const"
      ]
    )
  ]/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}
//changed in 1027
String declarator()             :
{/*@bgen(jjtree) declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  String name;
}
{/*@bgen(jjtree) declarator */
  try {
/*@egen*/
  (
    LOOKAHEAD((< ID >)* ptr_operator())
    (< ID >)* ptr_operator() name = declarator()
  | name = direct_declarator()
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    return name;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}
//changed in 1027
String direct_declarator()                    :
{/*@bgen(jjtree) direct_declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDIRECT_DECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  String name;
  Token t;
}
{/*@bgen(jjtree) direct_declarator */
  try {
/*@egen*/
  LOOKAHEAD(2)
  "~" t = < ID >
  (
    LOOKAHEAD(2)
    declarator_suffixes()
  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    return "~" + t.image;
  }
|
{
  System.out.println("direct_declarator(): (declarator())");
} 
"(" name = declarator() ")"
  (
    LOOKAHEAD(2)
    declarator_suffixes()
  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    return name;
  }
| name = qualified_id()
  (
    LOOKAHEAD(2)
    declarator_suffixes()
  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    return name;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void declarator_suffixes()                      :
{/*@bgen(jjtree) declarator_suffixes */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDECLARATOR_SUFFIXES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) declarator_suffixes */
  try {
/*@egen*/
  (
    "["
    (
      constant_expression()
    )?
    "]"
  )+
| "("
  (
    parameter_list()
  )?
  extern_parameter_list()
  (
    LOOKAHEAD(2)
    type_qualifier()
  )?
  (
    exception_spec()
  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

/**
 * Used only for lookahead.
 */
void function_declarator_lookahead()                                :
{/*@bgen(jjtree) function_declarator_lookahead */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTFUNCTION_DECLARATOR_LOOKAHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) function_declarator_lookahead */
  try {
/*@egen*/
  (
    LOOKAHEAD(2)
    ptr_operator()
  )*
  qualified_id() "("/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

Scope function_declarator(boolean isTypedef)                      :
{/*@bgen(jjtree) function_declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTFUNCTION_DECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Scope sc = null;
}
{/*@bgen(jjtree) function_declarator */
  try {
/*@egen*/
  (
    LOOKAHEAD(ptr_operator())
    {
      System.out.println("ptr_operator() is true.");
    }
    ptr_operator() sc = function_declarator(isTypedef)
  |
    {
      System.out.println("ptr_operator() is false.");
    }
    sc = function_direct_declarator(isTypedef)
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    return sc;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

Scope function_direct_declarator(boolean isTypedef)                             :
{/*@bgen(jjtree) function_direct_declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTFUNCTION_DIRECT_DECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  String name;
  Scope sc = null;
  boolean closeReqd = false;
  System.out.println("function_direct_declarator() -- > qualified_id()");
  System.out.println("------------------------function_direct_declarator() "+ getToken(1).image+ "||"+ getToken(2).image+ "||"+ getToken(3).image);
}
{/*@bgen(jjtree) function_direct_declarator */
  try {
/*@egen*/
  name = qualified_id()
  {
    System.out.println("function_direct_declarator():name = qualified_id()= " + name + "==");
    System.out.println("****************function_direct_declarator() -- > GetScopeOfFullyScopeName");
    sc = sym.GetScopeOfFullyScopedName(name);
    if (closeReqd = (sc != null && sc != sym.GetCurScope()))
    {
      System.out.println("function_direct_declarator():closeReqd = (sc != null && sc != sym.GetCurScope())");
      sym.OpenScope(sc);
    }
  }
  "("
  {
    System.out.println("function_direct_declarator() in ( ? ):" + getToken(1).image + getToken(2).image + getToken(3).image);
  }
  (
    {
      System.out.println("function_direct_declarator() -- > parameter_list()");
    }
    parameter_list()
  )?
  extern_parameter_list()
  (
    LOOKAHEAD(2)
    type_qualifier()
  )?
  (
    exception_spec()
  )?
  (
    LOOKAHEAD("=")
    "=" < OCTALINT >
  )?
  (
    function_init()
  )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    if (closeReqd) sym.CloseScope();
    if (isTypedef) sym.PutTypeName(name);
    return sc;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}
void function_declarator2(boolean isTypedef)                       :
{/*@bgen(jjtree) function_declarator2 */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTFUNCTION_DECLARATOR2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) function_declarator2 */
  try {
/*@egen*/
  (
    LOOKAHEAD(ptr_operator())
    {
      System.out.println("ptr_operator() is true.");
    }
    ptr_operator()
    function_declarator2(isTypedef)
  |
    {
      System.out.println("ptr_operator() is false.");
    }
    function_direct_declarator2(isTypedef)
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void function_direct_declarator2(boolean isTypedef)                              :
{/*@bgen(jjtree) function_direct_declarator2 */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTFUNCTION_DIRECT_DECLARATOR2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  String name;
  boolean closeReqd = false;
  System.out.println("function_direct_declarator2() -- > qualified_id()");
  System.out.println("------------------------function_direct_declarator2() "+ getToken(1).image+ "||"+ getToken(2).image+ "||"+ getToken(3).image);
}
{/*@bgen(jjtree) function_direct_declarator2 */
  try {
/*@egen*/
  name = qualified_id()
  "("
  {
    System.out.println("function_direct_declarator() in ( ? ):" + getToken(1).image + getToken(2).image + getToken(3).image);
  }
  (
    {
      System.out.println("function_direct_declarator() -- > parameter_list()");
    }
    parameter_list()
  )?
  extern_parameter_list()
  (
    LOOKAHEAD(2)
    type_qualifier()
  )?
  (
    exception_spec()
  )?
  (
    LOOKAHEAD("=")
    "=" < OCTALINT >
  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}
//deal with-------------- unknow things )
void extern_parameter_list()                       :
{/*@bgen(jjtree) extern_parameter_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEXTERN_PARAMETER_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  System.out.println("extern_parameter_list().................");
  int kindd;
}
{/*@bgen(jjtree) extern_parameter_list */
  try {
/*@egen*/
  {
    while (getToken(1).kind != RPARENTHESIS)
    {
      kindd = getToken(1).kind;
      jj_consume_token(kindd);
    }
  }
  ")"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}
void function_init()               :
{/*@bgen(jjtree) function_init */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTFUNCTION_INIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  boolean isTypedef = false;
  Scope sc = null;
  System.out.println("void function_init() #function_init:");
}
{/*@bgen(jjtree) function_init */
  try {
/*@egen*/
  ":"
  (
    isTypedef = declaration_specifiers()
    (
      LOOKAHEAD(ptr_operator())
      {
        System.out.println("function_init():ptr_operator() is true.");
      }
      ptr_operator() 
      function_declarator2(isTypedef)
    |
      {
        System.out.println("function_init():ptr_operator() is false.");
      }
      function_direct_declarator2(isTypedef)
    )
  |
  (
      LOOKAHEAD(ptr_operator())
      {
        System.out.println("function_init():ptr_operator() is true2.");
      }
      ptr_operator() 
      function_declarator2(false)
    |
      {
        System.out.println("function_init():ptr_operator() is false2.");
      }
      function_direct_declarator2(false)
    )
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/

}
void anytoken()      :
{
}
{
  (
   <LCURLYBRACE> | <RCURLYBRACE> | <LSQUAREBRACKET> |<RSQUAREBRACKET> |<LPARENTHESIS> |<RPARENTHESIS> |<SCOPE> |<COLON>|<COMMA> |<QUESTIONMARK> |<ELLIPSIS> |<ASSIGNEQUAL> |<TIMESEQUAL> |<DIVIDEEQUAL> |<MODEQUAL> |<PLUSEQUAL> |<MINUSEQUAL> |<SHIFTLEFTEQUAL> |<SHIFTRIGHTEQUAL> |<BITWISEANDEQUAL> |<BITWISEXOREQUAL> |<BITWISEOREQUAL> |<OR_OP> |<AND_OP> |<BITWISEOR> |<BITWISEXOR> |<AMPERSAND> |<EQUAL> |<NOTEQUAL> |<LESSTHAN> |<GREATERTHAN> |<LESSTHANOREQUALTO> |<GREATERTHANOREQUALTO> |<SHIFTLEFT> |<SHIFTRIGHT> |<PLUS> |<MINUS> |<STAR> |<DIVIDE> |<MOD> |<PLUSPLUS> |<MINUSMINUS> |<TILDE> |<NOT_OP> |<DOT> |<POINTERTO> |<DOTSTAR> |<ARROWSTAR> |<AND> |<AND_EQ> |<ASM> |<AUTO> |<BITAND> |<BITOR> |<BOOL> |<BREAK> |<CASE> |<CATCH> |<CHAR> |<CLASS> |<COMPL> |<CONST> |<CONST_CAST> |<CONTINUE> |<_DEFAULT> |<DELETE> |<DO> |<DOUBLE> |<DYNAMIC_CAST> |<ELSE> |<ENUM> |<EXPLICIT> |<EXPORT> |<EXTERN> |<FALSE> |<FLOAT> |<FOR> |<FRIEND> |<GOTO> |<IF> |<INLINE> |<INT> |<LONG> |<mutable> |<NAMESPACE> |<NEW> |<NOT> |<NOT_EQ> |<OPERATOR> |<OR> |<OR_EQ> |<PRIVATE> |<PROTECTED> |<PUBLIC> |<REGISTER> |<REINTERPRET> |<RETURN> |<SHORT> |<SIGNED> |<SIZEOF> |<_STATIC> |<STATIC_CAST> |<STRUCT> |<SWITCH> |<TEMPLATE> |<THIS> |<THROW> |<TRUE> |<TRY> |<TYPEDEF> |<TYPEID> |<TYPENAME> |<UNION> |<UNSIGNED> |<USING> |<VIRTUAL> |<VOID> |<VOLATILE> |<WCHAR_T> |<DWORD> |<WORD> |<BYTE> |<WHILE> |<XOR> |<XOR_EQ> |<OCTALINT> |<OCTALLONG> |<UNSIGNED_OCTALINT> |<UNSIGNED_OCTALLONG> |<DECIMALINT> |<DECIMALLONG> |<UNSIGNED_DECIMALINT> |<UNSIGNED_DECIMALLONG> |<HEXADECIMALINT> |<HEXADECIMALLONG> |<UNSIGNED_HEXADECIMALINT> |<UNSIGNED_HEXADECIMALLONG> |<FLOATONE> |<FLOATTWO> |<CHARACTER> |<STRING> |<ID>
  )
}
void dtor_ctor_decl_spec()                      :
{/*@bgen(jjtree) dtor_ctor_decl_spec */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDTOR_CTOR_DECL_SPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) dtor_ctor_decl_spec */
  try {
/*@egen*/
  [
    "virtual" [ "inline" ]
  | "inline" [ "virtual" ]
  ]/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void dtor_definition()                  :
{/*@bgen(jjtree) dtor_definition */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDTOR_DEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) dtor_definition */
  try {
/*@egen*/
  (
    template_head()
  )?
  dtor_ctor_decl_spec() dtor_declarator() compound_statement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void ctor_definition()                  :
{/*@bgen(jjtree) ctor_definition */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCTOR_DEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Scope sc = null;
  boolean closeReqd = false;
}
{/*@bgen(jjtree) ctor_definition */
  try {
/*@egen*/
  dtor_ctor_decl_spec() sc = ctor_declarator()
  {
    if (closeReqd = (sc != null && sc != sym.GetCurScope())) sym.OpenScope(sc);
  }
  (
    exception_spec()
  )?
  (
    ";"
  | [ ctor_initializer() ] compound_statement()
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    if (closeReqd) sym.CloseScope();
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void ctor_declarator_lookahead()                            :
{/*@bgen(jjtree) ctor_declarator_lookahead */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCTOR_DECLARATOR_LOOKAHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ctor_declarator_lookahead */
  try {
/*@egen*/
  LOOKAHEAD({ IsCtor() })
  qualified_id() "("/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

Scope ctor_declarator() :
{/*@bgen(jjtree) ctor_declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCTOR_DECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  String name;
  Scope sc = null;
  boolean closeReqd = false;
}
{/*@bgen(jjtree) ctor_declarator */
  try {
/*@egen*/
  LOOKAHEAD({ IsCtor() })
  name = qualified_id()
  {
    System.out.println("****************ctor_declarator() -- > GetScopeOfFullyScopeName");
    sc = sym.GetScopeOfFullyScopedName(name);
    if (closeReqd = (sc != null && sc != sym.GetCurScope())) sym.OpenScope(sc);
  }
  "("
  [
    LOOKAHEAD(2)
    parameter_list()
  ]
  extern_parameter_list()
  [
    LOOKAHEAD(2)
    exception_spec()
  ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    if (closeReqd) sym.CloseScope();
    return sc;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void ctor_initializer()                   :
{/*@bgen(jjtree) ctor_initializer */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCTOR_INITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ctor_initializer */
  try {
/*@egen*/
  ":" superclass_init()
  (
    "," superclass_init()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void superclass_init()                  :
{/*@bgen(jjtree) superclass_init */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSUPERCLASS_INIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) superclass_init */
  try {
/*@egen*/
  qualified_id()
  "("
  (
    expression_list()
  )?
  ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void dtor_declarator()                  :
{/*@bgen(jjtree) dtor_declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDTOR_DECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) dtor_declarator */
  try {
/*@egen*/
  (
    LOOKAHEAD(scope_override_lookahead())
    scope_override()
  )?
  simple_dtor_declarator()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void simple_dtor_declarator()                         :
{/*@bgen(jjtree) simple_dtor_declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSIMPLE_DTOR_DECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) simple_dtor_declarator */
  try {
/*@egen*/
  "~" LOOKAHEAD({ IsCtor() })
  < ID > "("
  (
    parameter_list()
  )?
  extern_parameter_list()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void parameter_list()                 :
{/*@bgen(jjtree) parameter_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTPARAMETER_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) parameter_list */
  try {
/*@egen*/
  parameter_declaration_list()
  [
    LOOKAHEAD(2)
    [ "," ] "..."
  ]
| "..."/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void parameter_declaration_list()                             :
{/*@bgen(jjtree) parameter_declaration_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTPARAMETER_DECLARATION_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) parameter_declaration_list */
  try {
/*@egen*/
  parameter_declaration()
  (
    LOOKAHEAD(2)
    "," parameter_declaration()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void parameter_declaration()                        :
{/*@bgen(jjtree) parameter_declaration */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTPARAMETER_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  System.out.println("from parameter_list -- > decalration_specifiers()");
  }
{/*@bgen(jjtree) parameter_declaration */
  try {
/*@egen*/
  declaration_specifiers()
  (
    LOOKAHEAD(declarator())
    declarator()
  | abstract_declarator()
  )
  (
    "=" assignment_expression()
  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void initializer()              :
{/*@bgen(jjtree) initializer */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
}
{/*@bgen(jjtree) initializer */
  try {
/*@egen*/
  LOOKAHEAD(3)
  {
    System.out.println("initializer() -- > { initializer(),initializer(),...}");
  }
  "{" initializer()
  (
    {
      System.out.println("--------------------------In circle intializer()");
      }
    ","
    [initializer()]
  )*
  "}"
| assignment_expression()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    System.out.println("initializer() -- > assignment_expression()");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void type_name()            :
{/*@bgen(jjtree) type_name */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTYPE_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) type_name */
  try {
/*@egen*/
  {
    System.out.println("type_name() -- > declaration_specifiers()");
  }
  declaration_specifiers() abstract_declarator()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void abstract_declarator()                      :
{/*@bgen(jjtree) abstract_declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTABSTRACT_DECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) abstract_declarator */
  try {
/*@egen*/
  [
    LOOKAHEAD(2)
    (
      "(" abstract_declarator() ")"
      (
        abstract_declarator_suffix()
      )+
    |
      (
        "["
        (
          constant_expression()
        )?
        "]"
      )+
    | ptr_operator() abstract_declarator()
    )
  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void abstract_declarator_suffix()                             :
{/*@bgen(jjtree) abstract_declarator_suffix */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTABSTRACT_DECLARATOR_SUFFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) abstract_declarator_suffix */
  try {
/*@egen*/
  "["
  (
    constant_expression()
  )?
  "]"
| "("
  (
    parameter_list()
  )?
  extern_parameter_list()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void template_head()                :
{/*@bgen(jjtree) template_head */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTEMPLATE_HEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) template_head */
  try {
/*@egen*/
  "template" "<" template_parameter_list() ">"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void template_parameter_list()                          :
{/*@bgen(jjtree) template_parameter_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTEMPLATE_PARAMETER_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) template_parameter_list */
  try {
/*@egen*/
  template_parameter()
  (
    "," template_parameter()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void template_parameter()                     :
{/*@bgen(jjtree) template_parameter */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTEMPLATE_PARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) template_parameter */
  try {
/*@egen*/
  LOOKAHEAD(3)
  "class" t = < ID >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    sym.PutTypeName(t.image);
  }
| parameter_declaration()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void template_id()              :
{/*@bgen(jjtree) template_id */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTEMPLATE_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) template_id */
  try {
/*@egen*/
  < ID > "<" template_argument_list() ">"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void template_argument_list()                         :
{/*@bgen(jjtree) template_argument_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTEMPLATE_ARGUMENT_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) template_argument_list */
  try {
/*@egen*/
  template_argument()
  (
    "," template_argument()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void template_argument()                    :
{/*@bgen(jjtree) template_argument */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTEMPLATE_ARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) template_argument */
  try {
/*@egen*/
  LOOKAHEAD(3)
  type_name()
| shift_expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void statement_list()                 :
{/*@bgen(jjtree) statement_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSTATEMENT_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  System.out.println("in statement_list -- > statement()");
}
{/*@bgen(jjtree) statement_list */
  try {
/*@egen*/
  (
    LOOKAHEAD(statement())
    statement()
  )+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}
//changed in 1028 for std::
void statement()            :
{/*@bgen(jjtree) statement */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  System.out.println("statement()"+getToken(1).image+getToken(2).image+getToken(3).image);
  }
{/*@bgen(jjtree) statement */
  try {
/*@egen*/
  LOOKAHEAD(2)
  (
    < ID > ":"
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    System.out.println("for goto!! in statement()");
  }
| 
  LOOKAHEAD({ getToken(1).kind == __TRY || getToken(1).kind == __ASM || getToken(1).kind == __FINALLY })
  (
    < __TRY >
  | 
    < __ASM >
  | 
    < __FINALLY >
  )
  compound_statement()
| < __EXCEPT >
  (
    (
      "(" expression_list() ")"
    )?
    compound_statement()
  )
| < __LEAVE > ";"
| 
  LOOKAHEAD( (< STD >)< SCOPE >< ID >)
  {
    System.out.println("from statement() to Scope_declaration()");
  }
  Scope_declaration()
| 
  LOOKAHEAD(declaration())
  {
    System.out.println("statement()  -- >  declaration()");
  }
  declaration()
| LOOKAHEAD((< SCOPE >)? expression())
  {
    System.out.println("statement() -- > expression();");
  }
  (< SCOPE >)? expression() ";"
| {
    System.out.println("statement() -- > { compound_statement() }");
  }
  compound_statement()
  
| {
    System.out.println("statement() -- > if (selection_statement()) {...}");
  }
  selection_statement()
  
| {
    System.out.println("statement() -- > jump_statement()(like goto or break)");
  }
  jump_statement()
  
| {
    System.out.println("statement() -- > ;");
  }
  ";"
  
| try_block()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    {
      System.out.println("statement() -- > try_block()");
    }
  }
| throw_statement()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    System.out.println("statement() -- > throw_statement()");
  }
| LOOKAHEAD(2)
  labeled_statement()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    System.out.println("statement() -- > labeled_statement() like <ID>:");
  }
| iteration_statement()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    System.out.println("statement() -- > iteration_statement()");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void labeled_statement()                    :
{/*@bgen(jjtree) labeled_statement */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTLABELED_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) labeled_statement */
  try {
/*@egen*/
  < ID > ":" statement()
| "case" constant_expression() ":" statement()
| "default" ":" statement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void compound_statement()                     :
{/*@bgen(jjtree) compound_statement */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCOMPOUND_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  System.out.println("=====compound_statement=====");
}
{/*@bgen(jjtree) compound_statement */
  try {
/*@egen*/
  "{"
  {
    System.out.println("open a scope in compound_statement");
    sym.OpenScope(null, false);
  }
  (
    {
      System.out.println("compound_statement -- > statement_list");
    }
    statement_list()
  )?
  {
    System.out.println("close a scope in compound_statement");
    sym.CloseScope();
  }
  "}"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void selection_statement()                      :
{/*@bgen(jjtree) selection_statement */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSELECTION_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) selection_statement */
  try {
/*@egen*/
  "if" "("
  (LOOKAHEAD(4)
  	expression()|declarationforif()
  )
  ")" statement()
  (
    LOOKAHEAD(2)
    "else" statement()
  )?
| "switch" "(" expression() ")" statement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void iteration_statement()                      :
{/*@bgen(jjtree) iteration_statement */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTITERATION_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) iteration_statement */
  try {
/*@egen*/
  "while" "(" expression() ")" statement()
| "do" statement() "while" "(" expression() ")" ";"
| "for" "("
  (
    LOOKAHEAD(3)
    declaration()
  | expression() ";"
  | ";"
  )
  (
    expression()
  )?
  ";"
  (
    expression()
  )?
  ")" statement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void jump_statement()                 :
{/*@bgen(jjtree) jump_statement */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTJUMP_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) jump_statement */
  try {
/*@egen*/
  "goto" < ID > ";"
| "continue" ";"
| "break" ";"
| "return"
  (
    expression()
  )?
  ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void try_block()            :
{/*@bgen(jjtree) try_block */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTRY_BLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) try_block */
  try {
/*@egen*/
  < TRY > compound_statement()
  (
    handler()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void handler()          :
{/*@bgen(jjtree) handler */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTHANDLER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) handler */
  try {
/*@egen*/
  < CATCH > "(" exception_declaration() ")" compound_statement()
| "finally" compound_statement()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void exception_declaration()                        :
{/*@bgen(jjtree) exception_declaration */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEXCEPTION_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) exception_declaration */
  try {
/*@egen*/
  parameter_declaration_list()
| "..."/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void throw_statement()                  :
{/*@bgen(jjtree) throw_statement */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTHROW_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) throw_statement */
  try {
/*@egen*/
  "throw"
  (
    assignment_expression()
  )?
  ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void expression() :
{/*@bgen(jjtree) expression */
   CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEXPRESSION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
   System.out.println("expression() ----------------------------");
 }
{/*@bgen(jjtree) expression */
  try {
/*@egen*/
  assignment_expression()
  (
    LOOKAHEAD(2)
    "," assignment_expression()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void assignment_expression() :
{/*@bgen(jjtree) assignment_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTASSIGNMENT_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  System.out.println("assignment_expression()-- > conditional_expression()[=assignment_expression()]");
}
{/*@bgen(jjtree) assignment_expression */
  try {
/*@egen*/
  conditional_expression()
  (
    (
      "="
    | "*="
    | "/="
    | "%="
    | "+="
    | "-="
    | "<<="
    | ">>="
    | "&="
    | "^="
    | "|="
    )/*@bgen(jjtree) #assignment_expression( 2) */
    {
      CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTASSIGNMENT_EXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    assignment_expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/                          
)?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void conditional_expression() :
{/*@bgen(jjtree) conditional_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCONDITIONAL_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  System.out.println("conditional_expression()-- > logical_or_expression()[?xx:xx]");
}
{/*@bgen(jjtree) conditional_expression */
  try {
/*@egen*/
  logical_or_expression()
  (
    "?" conditional_expression() ":"/*@bgen(jjtree) #conditional_expression( 3) */
                                     {
                                       CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTCONDITIONAL_EXPRESSION);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                       jjtn001.jjtSetFirstToken(getToken(1));
                                     }
                                     try {
/*@egen*/ conditional_expression()/*@bgen(jjtree)*/
                                     } catch (Throwable jjte001) {
                                       if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte001;
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         throw (ParseException)jjte001;
                                       }
                                       throw (Error)jjte001;
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  3);
                                         jjtn001.jjtSetLastToken(getToken(0));
                                       }
                                     }
/*@egen*/                           
)?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void constant_expression() :
{/*@bgen(jjtree) constant_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCONSTANT_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) constant_expression */
  try {
/*@egen*/
  conditional_expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void logical_or_expression() :
{/*@bgen(jjtree) logical_or_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTLOGICAL_OR_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  System.out.println("logical_or_expression() -- > logical_and_expression() { || logical_and_expression()}");
}
{/*@bgen(jjtree) logical_or_expression */
  try {
/*@egen*/
  logical_and_expression()
  (
    "||"/*@bgen(jjtree) #logical_or_expression( 2) */
         {
           CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTLOGICAL_OR_EXPRESSION);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/ logical_and_expression()/*@bgen(jjtree)*/
         } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             throw (RuntimeException)jjte001;
           }
           if (jjte001 instanceof ParseException) {
             throw (ParseException)jjte001;
           }
           throw (Error)jjte001;
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
             jjtn001.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                          
)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void logical_and_expression() :
{/*@bgen(jjtree) logical_and_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTLOGICAL_AND_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  System.out.println("logical_and_expression() -- > inclusive_or_expression(){ && inclusive_or_expression()}");
}
{/*@bgen(jjtree) logical_and_expression */
  try {
/*@egen*/
  inclusive_or_expression()
  (
    "&&"/*@bgen(jjtree) #logical_and_expression( 2) */
         {
           CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTLOGICAL_AND_EXPRESSION);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
         }
         try {
/*@egen*/ inclusive_or_expression()/*@bgen(jjtree)*/
         } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             throw (RuntimeException)jjte001;
           }
           if (jjte001 instanceof ParseException) {
             throw (ParseException)jjte001;
           }
           throw (Error)jjte001;
         } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
             jjtn001.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/                           
)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void inclusive_or_expression() :
{/*@bgen(jjtree) inclusive_or_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTINCLUSIVE_OR_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  System.out.println("inclusive_or_expression()-- > exclusive_or_expression() { | exclusive_or_expression()}");
}
{/*@bgen(jjtree) inclusive_or_expression */
  try {
/*@egen*/
  exclusive_or_expression()
  (
    "|"/*@bgen(jjtree) #inclusive_or_expression( 2) */
        {
          CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTINCLUSIVE_OR_EXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/ exclusive_or_expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/                            
)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void exclusive_or_expression() :
{/*@bgen(jjtree) exclusive_or_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEXCLUSIVE_OR_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  System.out.println("exclusive_or_expression()-- >and_expression() { ^and_expression()}");
}
{/*@bgen(jjtree) exclusive_or_expression */
  try {
/*@egen*/
  and_expression()
  (
    "^"/*@bgen(jjtree) #exclusive_or_expression( 2) */
        {
          CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTEXCLUSIVE_OR_EXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/ and_expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/                            
)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void and_expression() :
{/*@bgen(jjtree) and_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTAND_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  System.out.println("and_expression() -- > equality_expression(){ & equality_expression()}");
}
{/*@bgen(jjtree) and_expression */
  try {
/*@egen*/
  equality_expression()
  (
    LOOKAHEAD(2)
    "&"/*@bgen(jjtree) #and_expression( 2) */
        {
          CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTAND_EXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/ equality_expression()/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/                   
)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void equality_expression() :
{/*@bgen(jjtree) equality_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEQUALITY_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  System.out.println("equality_expression() -- > relational_expression(){ !=/== relational_expression()}");
}
{/*@bgen(jjtree) equality_expression */
  try {
/*@egen*/
  relational_expression()
  (
    (
      "!="
    | "=="
    )/*@bgen(jjtree) #equality_expression( 2) */
    {
      CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTEQUALITY_EXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    relational_expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/                        
)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void relational_expression() :
{/*@bgen(jjtree) relational_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTRELATIONAL_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  System.out.println("relational_expression() -- > shift_expression(){ >/<.. shift_expression()}");
}
{/*@bgen(jjtree) relational_expression */
  try {
/*@egen*/
  shift_expression()
  (
    LOOKAHEAD(2)
    (
      "<"
    | ">"
    | "<="
    | ">="
    )/*@bgen(jjtree) #relational_expression( 2) */
    {
      CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTRELATIONAL_EXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    shift_expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/                          
)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void shift_expression() :
{/*@bgen(jjtree) shift_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSHIFT_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  System.out.println("shift_expression() -- > additive_expression() { >>/<< additive_expression()}");
}
{/*@bgen(jjtree) shift_expression */
  try {
/*@egen*/
  additive_expression()
  (
    (
      "<<"
    | ">>"
    )/*@bgen(jjtree) #shift_expression( 2) */
    {
      CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTSHIFT_EXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    additive_expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/                     
)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void additive_expression() :
{/*@bgen(jjtree) additive_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTADDITIVE_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  System.out.println("additive_expression() -- > multiplicative_expression() { +/- multiplicative_expression()}");
}
{/*@bgen(jjtree) additive_expression */
  try {
/*@egen*/
  multiplicative_expression()
  (
    LOOKAHEAD(2)
    (
      "+"
    | "-"
    )/*@bgen(jjtree) #additive_expression( 2) */
    {
      CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTADDITIVE_EXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    multiplicative_expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/                        
)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void multiplicative_expression() :
{/*@bgen(jjtree) multiplicative_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTMULTIPLICATIVE_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  System.out.println("multiplicative_expression() -- >pm_expression() { /_*_% pm_expression()}");
}
{/*@bgen(jjtree) multiplicative_expression */
  try {
/*@egen*/
  pm_expression()
  (
    LOOKAHEAD(2)
    (
      "*"
    | "/"
    | "%"
    )/*@bgen(jjtree) #multiplicative_expression( 2) */
    {
      CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTMULTIPLICATIVE_EXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    pm_expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/                              
)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void pm_expression() :
{/*@bgen(jjtree) pm_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTPM_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  System.out.println("pm_expression() -- > cast_expression() { ./-> cast_expression() }");
}
{/*@bgen(jjtree) pm_expression */
  try {
/*@egen*/
  cast_expression()
  (
    (
      ".*"
    | "->*"
    )/*@bgen(jjtree) pm_expression */
    {
      CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTPM_EXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    cast_expression()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/               )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void cast_expression() :
{/*@bgen(jjtree) cast_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCAST_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
//System.out.println("?!cast_expression()?!");
}
{/*@bgen(jjtree) cast_expression */
  try {
/*@egen*/
  LOOKAHEAD("(" type_name() ")")
  {
    System.out.println("cast_expression() -- > (type_name) cast_expression()");
  }
  "(" type_name() ")"/*@bgen(jjtree) #cast_expression( 2) */
                      {
                        CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTCAST_EXPRESSION);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                        jjtn001.jjtSetFirstToken(getToken(1));
                      }
                      try {
/*@egen*/ cast_expression()/*@bgen(jjtree)*/
                      } catch (Throwable jjte001) {
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          throw (RuntimeException)jjte001;
                        }
                        if (jjte001 instanceof ParseException) {
                          throw (ParseException)jjte001;
                        }
                        throw (Error)jjte001;
                      } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                          jjtn001.jjtSetLastToken(getToken(0));
                        }
                      }
/*@egen*/                    
|
{
  System.out.println("cast_expression() -- > unary_expression()");
}
unary_expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void IncOrDecOperator()                   : //++\u93b4\ufffd--\u6769\u612e\u757b\u7ed7\ufffd(\u9353\ufffd)
{/*@bgen(jjtree) IncOrDecOperator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTINCORDECOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) IncOrDecOperator */
  try {
/*@egen*/
  (
    "++"
  | "--"
  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void SizeOfOperator()                 : //sizeof\u6769\u612e\u757b\u7ed7\ufffd
{/*@bgen(jjtree) SizeOfOperator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSIZEOFOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SizeOfOperator */
  try {
/*@egen*/
  < SIZEOF >
  (
    LOOKAHEAD("(" type_name())
    "("
    (
      type_name()
    )
    ")"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
    }
/*@egen*/
    {
      System.out.println("SizeOfOperator() -- > ( type_name() )");
    }
  | unary_expression()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void unary_expression() :
{/*@bgen(jjtree) unary_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTUNARY_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) unary_expression */
  try {
/*@egen*/
  IncOrDecOperator()/*@bgen(jjtree) #unary_expression( 2) */
                     {
                       CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTUNARY_EXPRESSION);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                       jjtn001.jjtSetFirstToken(getToken(1));
                     }
                     try {
/*@egen*/ unary_expression()/*@bgen(jjtree)*/
                     } catch (Throwable jjte001) {
                       if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         throw (RuntimeException)jjte001;
                       }
                       if (jjte001 instanceof ParseException) {
                         throw (ParseException)jjte001;
                       }
                       throw (Error)jjte001;
                     } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  2);
                         jjtn001.jjtSetLastToken(getToken(0));
                       }
                     }
/*@egen*/                     /*@bgen(jjtree)*/
{
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
  jjtn000.jjtSetLastToken(getToken(0));
}
/*@egen*/
{
  System.out.println("++/-- prefix!");
}

| LOOKAHEAD(3)
{
  System.out.println("unary_expression() -- > unary_operator() cast_expression()");
}
unary_operator()/*@bgen(jjtree) #unary_expression( 2) */
                 {
                   CPPSimpleNode jjtn002 = new CPPSimpleNode(JJTUNARY_EXPRESSION);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                   jjtn002.jjtSetFirstToken(getToken(1));
                 }
                 try {
/*@egen*/ cast_expression()/*@bgen(jjtree)*/
                 } catch (Throwable jjte002) {
                   if (jjtc002) {
                     jjtree.clearNodeScope(jjtn002);
                     jjtc002 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte002 instanceof RuntimeException) {
                     throw (RuntimeException)jjte002;
                   }
                   if (jjte002 instanceof ParseException) {
                     throw (ParseException)jjte002;
                   }
                   throw (Error)jjte002;
                 } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002,  2);
                     jjtn002.jjtSetLastToken(getToken(0));
                   }
                 }
/*@egen*/                     

|
{
  System.out.println("unary_expression() -- > SizeOfOperator()");
}/*@bgen(jjtree) #unary_expression( 1) */
{
  CPPSimpleNode jjtn003 = new CPPSimpleNode(JJTUNARY_EXPRESSION);
  boolean jjtc003 = true;
  jjtree.openNodeScope(jjtn003);
  jjtn003.jjtSetFirstToken(getToken(1));
}
try {
/*@egen*/
SizeOfOperator()/*@bgen(jjtree)*/
} catch (Throwable jjte003) {
  if (jjtc003) {
    jjtree.clearNodeScope(jjtn003);
    jjtc003 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte003 instanceof RuntimeException) {
    throw (RuntimeException)jjte003;
  }
  if (jjte003 instanceof ParseException) {
    throw (ParseException)jjte003;
  }
  throw (Error)jjte003;
} finally {
  if (jjtc003) {
    jjtree.closeNodeScope(jjtn003,  1);
    jjtn003.jjtSetLastToken(getToken(0));
  }
}
/*@egen*/                     
|
{
  System.out.println("unary_expression() -- > postfix_expression()");
}
postfix_expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}
//changed in 1028 for new ...
void new_expression()                 :
{/*@bgen(jjtree) new_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTNEW_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) new_expression */
  try {
/*@egen*/
  (
    LOOKAHEAD(< SCOPE >)
    < SCOPE >
  )?
  "new"
  (
    LOOKAHEAD(< ID > ((< SCOPE >)?< ID >)* (< LESSTHAN >|< LPARENTHESIS >)?)
    < ID >
    {
      while(getToken(1).kind != SEMICOLON) {
        jj_consume_token(getToken(1).kind);
      }
       }
    
  | 
    LOOKAHEAD("(" type_name() ")")
    "(" type_name() ")"
  |
    (
      LOOKAHEAD("(" expression_list())
      {
        System.out.println("new_expression()-- >(expression_list())");
      }
      "(" expression_list() ")"
    )?
    (
      LOOKAHEAD("(" type_name() ")")
      "(" type_name() ")"
    | LOOKAHEAD(declaration_specifiers())
      new_type_id()
    )
  )
  (
    LOOKAHEAD(new_initializer())
    new_initializer()
  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void new_type_id()              :
{/*@bgen(jjtree) new_type_id */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTNEW_TYPE_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) new_type_id */
  try {
/*@egen*/
  declaration_specifiers()
  (
    LOOKAHEAD(new_declarator())
    new_declarator()
  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void new_declarator()                 :
{/*@bgen(jjtree) new_declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTNEW_DECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) new_declarator */
  try {
/*@egen*/
  direct_new_declarator()
| ptr_operator() cv_qualifier_seq()
  [
    LOOKAHEAD(2)
    new_declarator()
  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void direct_new_declarator()                        :
{/*@bgen(jjtree) direct_new_declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDIRECT_NEW_DECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) direct_new_declarator */
  try {
/*@egen*/
  (
    LOOKAHEAD(2)
    "[" expression() "]"
  )+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void new_initializer()                  :
{/*@bgen(jjtree) new_initializer */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTNEW_INITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  System.out.println("new_initializer() -- > ([expression_list()])");
}
{/*@bgen(jjtree) new_initializer */
  try {
/*@egen*/
  "("
  (
    expression_list()
  )?
  ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void delete_expression()                    :
{/*@bgen(jjtree) delete_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDELETE_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) delete_expression */
  try {
/*@egen*/
  ("::")? "delete" ("[" "]")? cast_expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void unary_operator()                 :
{/*@bgen(jjtree) unary_operator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTUNARY_OPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) unary_operator */
  try {
/*@egen*/
  "&"
| "*"
| "+"
| "-"
| "~"
| "!"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

//protea: just don't know why postfix_expression(2) can make such a big difference
//changed in 1020
void postfix_expression() :
{/*@bgen(jjtree) postfix_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTPOSTFIX_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  System.out.println("postfix_expression() -- > primary_expression()");
}
{/*@bgen(jjtree) postfix_expression */
  try {
/*@egen*/
  LOOKAHEAD(3)
  primary_expression()
  (
    LOOKAHEAD(2)
    (
      "[" expression()/*@bgen(jjtree) #postfix_expression( 2) */
                       {
                         CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTPOSTFIX_EXPRESSION);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                         jjtn001.jjtSetFirstToken(getToken(1));
                       }
                       try {
/*@egen*/ "]"/*@bgen(jjtree)*/
                       } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  2);
                           jjtn001.jjtSetLastToken(getToken(0));
                         }
                       }
/*@egen*/                       
    {
      System.out.println("postfix_expression() -- > [expression()]");
    }
  | "("
    {
      System.out.println("postfix_expression() -- > (expression_list()?)");
    }
    (
      {
        System.out.println("postfix_expression() -- > expression_list()");
      }
      expression_list()
    )?/*@bgen(jjtree) #postfix_expression( 1) */
    {
      CPPSimpleNode jjtn002 = new CPPSimpleNode(JJTPOSTFIX_EXPRESSION);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtn002.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    ")"/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  1);
        jjtn002.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/                       
| "."/*@bgen(jjtree) #postfix_expression( 2) */
      {
        CPPSimpleNode jjtn003 = new CPPSimpleNode(JJTPOSTFIX_EXPRESSION);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        jjtn003.jjtSetFirstToken(getToken(1));
      }
      try {
/*@egen*/ id_expression()/*@bgen(jjtree)*/
      } catch (Throwable jjte003) {
        if (jjtc003) {
          jjtree.clearNodeScope(jjtn003);
          jjtc003 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte003 instanceof RuntimeException) {
          throw (RuntimeException)jjte003;
        }
        if (jjte003 instanceof ParseException) {
          throw (ParseException)jjte003;
        }
        throw (Error)jjte003;
      } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003,  2);
          jjtn003.jjtSetLastToken(getToken(0));
        }
      }
/*@egen*/                       
{
  System.out.println("postfix_expression() -- > . + id_expression()");
}

| "->"/*@bgen(jjtree) #postfix_expression( 2) */
       {
         CPPSimpleNode jjtn004 = new CPPSimpleNode(JJTPOSTFIX_EXPRESSION);
         boolean jjtc004 = true;
         jjtree.openNodeScope(jjtn004);
         jjtn004.jjtSetFirstToken(getToken(1));
       }
       try {
/*@egen*/ id_expression()/*@bgen(jjtree)*/
       } catch (Throwable jjte004) {
         if (jjtc004) {
           jjtree.clearNodeScope(jjtn004);
           jjtc004 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte004 instanceof RuntimeException) {
           throw (RuntimeException)jjte004;
         }
         if (jjte004 instanceof ParseException) {
           throw (ParseException)jjte004;
         }
         throw (Error)jjte004;
       } finally {
         if (jjtc004) {
           jjtree.closeNodeScope(jjtn004,  2);
           jjtn004.jjtSetLastToken(getToken(0));
         }
       }
/*@egen*/                       
{
  System.out.println("postfix_expression() -- > -> + id_expression()");
}

|/*@bgen(jjtree) #postfix_expression( 2) */
  {
    CPPSimpleNode jjtn005 = new CPPSimpleNode(JJTPOSTFIX_EXPRESSION);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
    jjtn005.jjtSetFirstToken(getToken(1));
  }
  try {
/*@egen*/ IncOrDecOperator()/*@bgen(jjtree)*/
  } catch (Throwable jjte005) {
    if (jjtc005) {
      jjtree.clearNodeScope(jjtn005);
      jjtc005 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte005 instanceof RuntimeException) {
      throw (RuntimeException)jjte005;
    }
    if (jjte005 instanceof ParseException) {
      throw (ParseException)jjte005;
    }
    throw (Error)jjte005;
  } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005,  2);
      jjtn005.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/                       
{
  System.out.println("postfix_expression() -- > -> ++/--");
}

)
)*
|
{
  System.out.println("postfix_expression() -- > simple_type_specifier()");
}

simple_type_specifier() "("
(
  {
    System.out.println("postfix_expression() -- > simple_type_specifier() + expression_list()");
  }
  expression_list()
)?
")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void id_expression()                :
{/*@bgen(jjtree) id_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTID_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  String name="";
  Token t;
  }
{/*@bgen(jjtree) id_expression */
  try {
/*@egen*/
  (
    LOOKAHEAD(scope_override_lookahead())
    {
      System.out.println("id_expression() -- > scope_override()");
    }
    name = scope_override()
    {
      System.out.println("id_expression() -- > scope_override() we get the name:"+name);
      } 
  )?
  (
    {
      System.out.println("id_expression()" + tokenImage [ getToken(1).kind ] + getToken(1).image);
    }
    < ID >/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    System.out.println("for goto !!!");
  }
  | "operator" optor()
  | "~" < ID >
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}
/*void ifdef_expression() #ifdef_expression():
{
  System.out.println("new for ifdef");
}
{
  < _IFDEF >(expression())+
  < _ELSE > (expression())*
  < _ENDIF >
}*/
void primary_expression()                     :
{/*@bgen(jjtree) primary_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTPRIMARY_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) primary_expression */
  try {
/*@egen*/
  "this"
|
  (
    LOOKAHEAD(2)
    {
      System.out.println("primary_expression() -- > <STRING>:"+getToken(1).image);
    }
    < STRING >
    
  )+
| 
	"reinterpret_cast"/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
        }
/*@egen*/
	{
	  System.out.println("primary_expression() -- >reinterpret_cast");
	  while(getToken(1).kind != SEMICOLON) {
	    jj_consume_token(getToken(1).kind);
	  }
	}
| 
  {
    System.out.println("primary_expression() -- > (expression())");
  }
  "(" expression() ")"
| LOOKAHEAD((extern_builtin_type_specifier())?("::")? "new")
  {
    System.out.println("primary_expression() -- > (new_expression())");
  }
  new_expression()
  
| LOOKAHEAD((extern_builtin_type_specifier())?("::")? "delete")
  delete_expression()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    System.out.println("primary_expression() -- > (delete_expression())");
  }
|
  {
    System.out.println("primary_expression() -- > (id_expression())"+getToken(1).image+getToken(2).image);
  }
  (
    (< SCOPE >)+
  | (< SCOPE >)?
  )
  id_expression()
| constant()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
  }
/*@egen*/
  {
    System.out.println("primary_expression() -- > (constant())");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void expression_list()                  :
{/*@bgen(jjtree) expression_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEXPRESSION_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
  System.out.println("expression_list() -- > assignment_expression() { ,assignment_expression()}");
}
{/*@bgen(jjtree) expression_list */
  try {
/*@egen*/
  assignment_expression()
  (
    "," assignment_expression()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void constant()           :
{/*@bgen(jjtree) constant */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) constant */
  try {
/*@egen*/
  < OCTALINT >
| < OCTALLONG >
| < DECIMALINT >
| < DECIMALLONG >
| < HEXADECIMALINT >
| < HEXADECIMALLONG >
| < UNSIGNED_OCTALINT >
| < UNSIGNED_OCTALLONG >
| < UNSIGNED_DECIMALINT >
| < UNSIGNED_DECIMALLONG >
| < UNSIGNED_HEXADECIMALINT >
| < UNSIGNED_HEXADECIMALLONG >
| < CHARACTER >
| < FLOATONE >
| < FLOATTWO >
| "true"
| "false"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void optor()        :
{/*@bgen(jjtree) optor */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTOPTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) optor */
  try {
/*@egen*/
  "new"
  [
    LOOKAHEAD(2)
    "[" "]"
  ]
| "delete"
  [
    LOOKAHEAD(2)
    "[" "]"
  ]
| "+"
| "-"
| "*"
| "/"
| "%"
| "^"
| "&"
| "|"
| "~"
| "!"
| "="
| "<"
| ">"
| "+="
| "-="
| "*="
| "/="
| "%="
| "^="
| "&="
| "|="
| "<<"
| ">>"
| ">>="
| "<<="
| "=="
| "!="
| "<="
| ">="
| "&&"
| "||"
| "++"
| "--"
| ","
| "->*"
| "->"
| "(" ")"
| "[" "]"
| declaration_specifiers()
  (
    LOOKAHEAD(2)
    (
      "*"
    | "&"
    )
  )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void exception_spec()                 :
{/*@bgen(jjtree) exception_spec */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEXCEPTION_SPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) exception_spec */
  try {
/*@egen*/
  "throw" "(" exception_list() ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void exception_list()                 :
{/*@bgen(jjtree) exception_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEXCEPTION_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) exception_list */
  try {
/*@egen*/
  type_name()
  (
    "," type_name()
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}
