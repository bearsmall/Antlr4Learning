/* Generated By:JJTree&JavaCC: Do not edit this line. CPPTreeParserTokenManager.java */
package com.bupt.cmp.ast.cpp;

import java.io.IOException;
import java.io.PrintStream;

/** Token Manager. */
public class CPPTreeParserTokenManager implements CPPTreeParserConstants
{

  /** Debug output. */
  public  PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x3eL) != 0L || (active1 & 0xfffffffffffffc00L) != 0L || (active2 & 0x20000fffc03L) != 0L)
         {
            jjmatchedKind = 168;
            return 39;
         }
         if ((active2 & 0x800000003bcL) != 0L)
         {
            jjmatchedKind = 168;
            return 1;
         }
         if ((active0 & 0x100000000L) != 0L || (active2 & 0x40000000000L) != 0L)
            return 42;
         if ((active0 & 0x1000000000L) != 0L || (active1 & 0x140L) != 0L)
            return 7;
         return -1;
      case 1:
         if ((active2 & 0x80000000020L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 168;
               jjmatchedPos = 1;
            }
            return 0;
         }
         if ((active0 & 0x3eL) != 0L || (active1 & 0xfffffdffcffffc00L) != 0L || (active2 & 0x20000ffff9fL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 168;
               jjmatchedPos = 1;
            }
            return 39;
         }
         if ((active1 & 0x20030000000L) != 0L)
            return 39;
         if ((active2 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 31;
               jjmatchedPos = 1;
            }
            return 41;
         }
         return -1;
      case 2:
         if ((active1 & 0x3884000001c00L) != 0L || (active2 & 0xe00000L) != 0L)
            return 39;
         if ((active0 & 0x3eL) != 0L || (active1 & 0xfff475bfefffe000L) != 0L || (active2 & 0xa00001fffbfL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 168;
               jjmatchedPos = 2;
            }
            return 39;
         }
         return -1;
      case 3:
         if ((active0 & 0x3eL) != 0L || (active1 & 0xfff664be6feac800L) != 0L || (active2 & 0xa000053bfb7L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 168;
               jjmatchedPos = 3;
            }
            return 39;
         }
         if ((active1 & 0x110180152000L) != 0L || (active2 & 0xc4008L) != 0L)
            return 39;
         return -1;
      case 4:
         if ((active0 & 0x38L) != 0L || (active1 & 0xf7f6648e6e004800L) != 0L || (active2 & 0x2000041ab87L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 168;
               jjmatchedPos = 4;
            }
            return 39;
         }
         if ((active0 & 0x6L) != 0L || (active1 & 0x800003001ea8000L) != 0L || (active2 & 0x121410L) != 0L)
            return 39;
         return -1;
      case 5:
         if ((active1 & 0xf482048c28004800L) != 0L || (active2 & 0x103L) != 0L)
            return 39;
         if ((active0 & 0x38L) != 0L || (active1 & 0x364600247000000L) != 0L || (active2 & 0x2000041aa84L) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 168;
               jjmatchedPos = 5;
            }
            return 39;
         }
         return -1;
      case 6:
         if ((active0 & 0x18L) != 0L || (active1 & 0x8344400243000000L) != 0L || (active2 & 0x20000008a04L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 6;
            return 39;
         }
         if ((active0 & 0x20L) != 0L || (active1 & 0x20200004000000L) != 0L || (active2 & 0x12080L) != 0L)
            return 39;
         return -1;
      case 7:
         if ((active0 & 0x10L) != 0L || (active1 & 0x8240400041000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 7;
            return 39;
         }
         if ((active0 & 0x8L) != 0L || (active1 & 0x104000202000000L) != 0L || (active2 & 0x8a04L) != 0L)
            return 39;
         return -1;
      case 8:
         if ((active1 & 0x8200000041000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 8;
            return 39;
         }
         if ((active0 & 0x10L) != 0L || (active1 & 0x40400000000000L) != 0L)
            return 39;
         return -1;
      case 9:
         if ((active1 & 0x8200000040000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 9;
            return 39;
         }
         if ((active1 & 0x1000000L) != 0L)
            return 39;
         return -1;
      case 10:
         if ((active1 & 0x8000000000000000L) != 0L)
            return 39;
         if ((active1 & 0x200000040000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 10;
            return 39;
         }
         return -1;
      case 11:
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 11;
            return 39;
         }
         if ((active1 & 0x40000000L) != 0L)
            return 39;
         return -1;
      case 12:
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 12;
            return 39;
         }
         return -1;
      case 13:
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 13;
            return 39;
         }
         return -1;
      case 14:
         if ((active1 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 14;
            return 39;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa1_0(0x100L, 0x0L, 0x0L);
      case 33:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L, 0x0L);
      case 35:
         jjmatchedKind = 14;
         return jjMoveStringLiteralDfa1_0(0x2800L, 0x0L, 0x0L);
      case 37:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L, 0x0L);
      case 38:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x2200000000000L, 0x0L, 0x0L);
      case 40:
         return jjStopAtPos(0, 29);
      case 41:
         return jjStopAtPos(0, 30);
      case 42:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L, 0x0L);
      case 43:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x4L, 0x0L);
      case 44:
         return jjStopAtPos(0, 34);
      case 45:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x288L, 0x0L);
      case 46:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x100L, 0x0L);
      case 47:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x8000001400L, 0x0L, 0x0L);
      case 58:
         jjmatchedKind = 32;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000000000L);
      case 59:
         return jjStopAtPos(0, 33);
      case 60:
         jjmatchedKind = 55;
         return jjMoveStringLiteralDfa1_0(0xa00080000000000L, 0x0L, 0x0L);
      case 61:
         jjmatchedKind = 37;
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L, 0x0L);
      case 62:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_0(0x1400100000000000L, 0x0L, 0x0L);
      case 63:
         return jjStopAtPos(0, 35);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x80000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x20000L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x40000L);
      case 91:
         return jjStopAtPos(0, 27);
      case 93:
         return jjStopAtPos(0, 28);
      case 94:
         jjmatchedKind = 51;
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L, 0x0L);
      case 95:
         return jjMoveStringLiteralDfa1_0(0x3eL, 0x0L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3c00L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3c000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3fc0000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7c000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf80000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf000000000L, 0x20000000000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe0000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3c00000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1c000000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe0000000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x700000000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xf800000000000000L, 0x800003L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x800000003bcL);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1c00L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xe000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x110000L);
      case 120:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x600000L);
      case 123:
         return jjStopAtPos(0, 25);
      case 124:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0x1800000000000L, 0x0L, 0x0L);
      case 125:
         return jjStopAtPos(0, 26);
      case 126:
         return jjStopAtPos(0, 68);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      case 38:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         break;
      case 42:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         break;
      case 43:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         break;
      case 45:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      case 58:
         if ((active2 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 31, 41);
         break;
      case 60:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 61:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         break;
      case 62:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0x200L, active2, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x40000L);
      case 87:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x20000L);
      case 89:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x80000L);
      case 95:
         return jjMoveStringLiteralDfa2_0(active0, 0x3eL, active1, 0L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4010000c0000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x10000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0x70080000c000000L, active2, 0x4L);
      case 102:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 105, 39);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000100000L, active2, 0x100018L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L, active1, 0x300000000000c000L, active2, 0x20000002000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2080200000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc0100000c00L, active2, 0xc00L);
      case 111:
         if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x3114023c10000L, active2, 0x60c000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4000000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x78008000020000L, active2, 0x80000000020L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000L, active2, 0x1000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc000000000000000L, active2, 0x800001L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80200000002000L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xe00000000L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x40000000L, active2, 0x380L);
      case 124:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStopAtPos(2, 115);
         break;
      case 42:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(2, 73);
         break;
      case 46:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(2, 36);
         break;
      case 61:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(2, 43);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(2, 44);
         break;
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x20000L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x40000L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x80000L);
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x4L, active1, 0xc000000000300000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000000000000L, active2, 0L);
      case 100:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 151, 39);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x800L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x8L, active1, 0x4000000020000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x810L, active1, 0x4000000L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1100000000000000L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x220008000000000L, active2, 0x10540aL);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x2020L, active1, 0x41008000000L, active2, 0x8000L);
      case 109:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 76, 39);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000400000L, active2, 0x4L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100043800000L, active2, 0x20000000000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x840002000010000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x600000000L, active2, 0x380L);
      case 114:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 102, 39);
         else if ((active2 & 0x200000L) != 0L)
         {
            jjmatchedKind = 149;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x402011L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80040000L, active2, 0x800L);
      case 116:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 107, 39);
         else if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 112;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x2L, active1, 0x40221080008e000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x120000000L, active2, 0x80000000020L);
      case 119:
         if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 111, 39);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 68:
         if ((active2 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 146, 39);
         break;
      case 69:
         if ((active2 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 147, 39);
         break;
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0L, active2, 0x20000L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x2000000000800L, active2, 0x400000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x202044024000L, active2, 0x20000018000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000L, active2, 0L);
      case 100:
         if ((active2 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 142, 39);
         return jjMoveStringLiteralDfa4_0(active0, 0x800L, active1, 0L, active2, 0L);
      case 101:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 82, 39);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 95, 39);
         else if ((active2 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 168;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x20L, active1, 0x2010408808000000L, active2, 0x3a0L);
      case 103:
         if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 108, 39);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x10L, active1, 0x100040000000000L, active2, 0x800L);
      case 108:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 80, 39);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000200000000L, active2, 0x100000L);
      case 109:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 96, 39);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1200000000000000L, active2, 0x1000L);
      case 111:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 39);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 104, 39);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400008000L, active2, 0x410L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000L, active2, 0x4L);
      case 114:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 84, 39);
         return jjMoveStringLiteralDfa4_0(active0, 0x2L, active1, 0x804000000000000L, active2, 0L);
      case 115:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(3, 131, 39);
         return jjMoveStringLiteralDfa4_0(active0, 0x2004L, active1, 0x1001a00000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xc040000002000000L, active2, 0x2002L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400000000000000L, active2, 0x1L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20000000000000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa4_0(active0, 0x8L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 32:
         if ((active2 & 0x20L) != 0L)
            return jjStopAtPos(4, 133);
         break;
      case 68:
         if ((active2 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 145, 39);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x20L, active1, 0x24000000000000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x8L, active1, 0L, active2, 0x3L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x80L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(4, 13);
         else if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 100, 39);
         else if ((active2 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 148, 39);
         return jjMoveStringLiteralDfa5_0(active0, 0x800L, active1, 0x1042000000000800L, active2, 0x400000L);
      case 103:
         if ((active2 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 140, 39);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x800L);
      case 104:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 83, 39);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0xc080000202000000L, active2, 0x100L);
      case 107:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 81, 39);
         break;
      case 108:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 86, 39);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20000000L, active2, 0x20000000004L);
      case 109:
         if ((active0 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 2, 39);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40000000L, active2, 0L);
      case 110:
         if ((active2 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(4, 138, 39);
         return jjMoveStringLiteralDfa5_0(active0, 0x10L, active1, 0x48000004000L, active2, 0x200L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000000000L, active2, 0L);
      case 114:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 79, 39);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x400000c00000000L, active2, 0x10000L);
      case 115:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 85, 39);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100400000000000L, active2, 0L);
      case 116:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 101, 39);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 123, 39);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000009000000L, active2, 0x8000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x4000000L, active2, 0x2000L);
      case 119:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 132, 39);
         break;
      case 121:
         if ((active0 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(4, 1, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 32:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(5, 116);
         break;
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x1000000L, active2, 0x10000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x10L, active1, 0L, active2, 0x2204L);
      case 99:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 119, 39);
         else if ((active1 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 126;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8040000200000000L, active2, 0L);
      case 100:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(5, 78, 39);
         else if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 103, 39);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 124, 39);
         else if ((active2 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 136, 39);
         break;
      case 101:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(5, 91, 39);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 93, 39);
         else if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 106, 39);
         return jjMoveStringLiteralDfa6_0(active0, 0x8L, active1, 0x200000000000000L, active2, 0x80L);
      case 102:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(5, 11);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 125, 39);
         break;
      case 104:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 129, 39);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40000000L, active2, 0x8000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x200004000000L, active2, 0x20000000000L);
      case 110:
         if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 99, 39);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 122, 39);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000L, active2, 0x800L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 113:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 39);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 113, 39);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0L, active2, 0x400000L);
      case 116:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 98, 39);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(5, 128, 39);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x124000000000000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0x20L, active1, 0L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         if ((active2 & 0x400000L) != 0L)
            return jjStopAtPos(6, 150);
         break;
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x41000000L, active2, 0L);
      case 101:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(6, 5, 39);
         else if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 109, 39);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 117, 39);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000000000000L, active2, 0x800L);
      case 102:
         if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(6, 135, 39);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000L, active2, 0L);
      case 108:
         if ((active2 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 141, 39);
         return jjMoveStringLiteralDfa7_0(active0, 0x10L, active1, 0L, active2, 0x8000L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x200L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4000000000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x8L, active1, 0L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000000000L, active2, 0L);
      case 116:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 90, 39);
         else if ((active2 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(6, 144, 39);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000000000L, active2, 0x4L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000000L, active2, 0L);
      case 121:
         if ((active2 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 168, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000400000000000L, active2, 0L);
      case 100:
         if ((active2 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(7, 139, 39);
         break;
      case 101:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 89, 39);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 130, 39);
         else if ((active2 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 137, 39);
         else if ((active2 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(7, 143, 39);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40000000000000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x10L, active1, 0L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000000000000L, active2, 0L);
      case 114:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 114, 39);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 120, 39);
         break;
      case 116:
         if ((active0 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(7, 3, 39);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 97, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8000000000000000L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x40000000L);
      case 100:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 118, 39);
         break;
      case 101:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 110, 39);
         break;
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000000000000L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x1000000L);
      case 121:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(8, 4, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active1, 0x40000000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active1, 0x200000000000000L);
      case 115:
         return jjMoveStringLiteralDfa10_0(active1, 0x8000000000000000L);
      case 116:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(9, 88, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(8, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa11_0(active1, 0x40000000L);
      case 116:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 127, 39);
         return jjMoveStringLiteralDfa11_0(active1, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(9, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa12_0(active1, 0x200000000000000L);
      case 116:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(11, 94, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(10, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa13_0(active1, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(11, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa14_0(active1, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(12, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa15_0(active1, 0x200000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(13, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 116:
         if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 121, 39);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 92;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 42:
                  if (curChar == 58)
                  {
                     if (kind > 31)
                        kind = 31;
                  }
                  if (curChar == 58)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 1:
               case 39:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 168)
                     kind = 168;
                  jjCheckNAdd(39);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 5);
                  else if (curChar == 58)
                     jjAddStates(6, 7);
                  else if (curChar == 34)
                     jjCheckNAddStates(8, 10);
                  else if (curChar == 39)
                     jjCheckNAddStates(11, 13);
                  else if (curChar == 46)
                     jjCheckNAdd(7);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 156)
                        kind = 156;
                     jjCheckNAddStates(14, 21);
                  }
                  else if (curChar == 48)
                     jjAddStates(22, 25);
                  if (curChar == 48)
                  {
                     if (kind > 152)
                        kind = 152;
                     jjCheckNAddStates(26, 33);
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 168)
                     kind = 168;
                  jjCheckNAdd(39);
                  break;
               case 6:
                  if (curChar == 46)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 164)
                     kind = 164;
                  jjCheckNAddStates(34, 36);
                  break;
               case 9:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 164)
                     kind = 164;
                  jjCheckNAddTwoStates(10, 11);
                  break;
               case 12:
                  if (curChar == 39)
                     jjCheckNAddStates(11, 13);
                  break;
               case 13:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 15:
                  if ((0x8000008400000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 16:
                  if (curChar == 39 && kind > 166)
                     kind = 166;
                  break;
               case 17:
                  if (curChar == 48)
                     jjCheckNAddStates(37, 40);
                  break;
               case 18:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(37, 40);
                  break;
               case 19:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(41, 44);
                  break;
               case 20:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(41, 44);
                  break;
               case 21:
                  if (curChar == 48)
                     jjAddStates(45, 46);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(47, 50);
                  break;
               case 25:
                  if (curChar == 34)
                     jjCheckNAddStates(8, 10);
                  break;
               case 26:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 28:
                  if ((0x8000008400000400L & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 29:
                  if (curChar == 34 && kind > 167)
                     kind = 167;
                  break;
               case 30:
                  if (curChar == 48)
                     jjCheckNAddStates(51, 54);
                  break;
               case 31:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(51, 54);
                  break;
               case 32:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(55, 58);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(55, 58);
                  break;
               case 34:
                  if (curChar == 48)
                     jjAddStates(59, 60);
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(61, 64);
                  break;
               case 40:
                  if (curChar == 58)
                     jjAddStates(6, 7);
                  break;
               case 43:
                  if (curChar == 58 && kind > 31)
                     kind = 31;
                  break;
               case 44:
                  if (curChar != 48)
                     break;
                  if (kind > 152)
                     kind = 152;
                  jjCheckNAddStates(26, 33);
                  break;
               case 45:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 152)
                     kind = 152;
                  jjCheckNAdd(45);
                  break;
               case 46:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(46, 47);
                  break;
               case 48:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 50:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(65, 67);
                  break;
               case 55:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 156)
                     kind = 156;
                  jjCheckNAddStates(14, 21);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 156)
                     kind = 156;
                  jjCheckNAdd(56);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(59, 60);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(68, 70);
                  break;
               case 66:
                  if (curChar == 48)
                     jjAddStates(22, 25);
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 160)
                     kind = 160;
                  jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 161)
                     kind = 161;
                  jjAddStates(71, 72);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(73, 74);
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(75, 77);
                  break;
               case 81:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 5);
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(82, 83);
                  break;
               case 83:
                  if (curChar != 46)
                     break;
                  if (kind > 164)
                     kind = 164;
                  jjCheckNAddStates(78, 80);
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 164)
                     kind = 164;
                  jjCheckNAddStates(78, 80);
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(85, 6);
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(86, 87);
                  break;
               case 88:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(89);
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 165)
                     kind = 165;
                  jjCheckNAddTwoStates(89, 90);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 168)
                        kind = 168;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 168)
                        kind = 168;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 76)
                     jjAddStates(81, 82);
                  else if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 4;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 168)
                        kind = 168;
                     jjCheckNAdd(39);
                  }
                  if (curChar == 121)
                  {
                     if (kind > 134)
                        kind = 134;
                  }
                  break;
               case 3:
                  if (curChar == 89 && kind > 134)
                     kind = 134;
                  break;
               case 4:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 8:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(83, 84);
                  break;
               case 11:
                  if ((0x104000001040L & l) != 0L && kind > 164)
                     kind = 164;
                  break;
               case 13:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 14:
                  if (curChar == 92)
                     jjAddStates(85, 88);
                  break;
               case 15:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAddStates(11, 13);
                  break;
               case 22:
                  if (curChar == 120)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(47, 50);
                  break;
               case 24:
                  if (curChar == 88)
                     jjCheckNAdd(23);
                  break;
               case 26:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 27:
                  if (curChar == 92)
                     jjAddStates(89, 92);
                  break;
               case 28:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 35:
                  if (curChar == 120)
                     jjCheckNAdd(36);
                  break;
               case 36:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(61, 64);
                  break;
               case 37:
                  if (curChar == 88)
                     jjCheckNAdd(36);
                  break;
               case 38:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 168)
                     kind = 168;
                  jjCheckNAdd(39);
                  break;
               case 39:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 168)
                     kind = 168;
                  jjCheckNAdd(39);
                  break;
               case 41:
                  if (curChar == 126 && kind > 31)
                     kind = 31;
                  break;
               case 47:
                  if ((0x100000001000L & l) != 0L && kind > 153)
                     kind = 153;
                  break;
               case 49:
                  if ((0x20000000200000L & l) != 0L && kind > 154)
                     kind = 154;
                  break;
               case 51:
                  if ((0x100000001000L & l) != 0L && kind > 155)
                     kind = 155;
                  break;
               case 52:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if ((0x20000000200000L & l) != 0L && kind > 155)
                     kind = 155;
                  break;
               case 54:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 58:
                  if ((0x20100000201000L & l) != 0L && kind > 157)
                     kind = 157;
                  break;
               case 60:
                  if ((0x20000000200000L & l) != 0L && kind > 158)
                     kind = 158;
                  break;
               case 62:
                  if ((0x100000001000L & l) != 0L && kind > 159)
                     kind = 159;
                  break;
               case 63:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if ((0x20000000200000L & l) != 0L && kind > 159)
                     kind = 159;
                  break;
               case 65:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 67:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(68);
                  break;
               case 68:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 160)
                     kind = 160;
                  jjCheckNAdd(68);
                  break;
               case 69:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(70);
                  break;
               case 70:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 161)
                     kind = 161;
                  jjCheckNAddTwoStates(70, 71);
                  break;
               case 71:
                  if ((0x20100000201000L & l) != 0L && kind > 161)
                     kind = 161;
                  break;
               case 72:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(73);
                  break;
               case 73:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(73, 74);
                  break;
               case 74:
                  if ((0x20000000200000L & l) != 0L && kind > 162)
                     kind = 162;
                  break;
               case 75:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(76);
                  break;
               case 76:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(75, 77);
                  break;
               case 77:
                  if ((0x100000001000L & l) != 0L && kind > 163)
                     kind = 163;
                  break;
               case 78:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if ((0x20000000200000L & l) != 0L && kind > 163)
                     kind = 163;
                  break;
               case 80:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 87:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(93, 94);
                  break;
               case 90:
                  if ((0x104000001040L & l) != 0L && kind > 165)
                     kind = 165;
                  break;
               case 91:
                  if (curChar == 76)
                     jjAddStates(81, 82);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 13:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(11, 13);
                  break;
               case 26:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjAddStates(8, 10);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 92 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 15);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 21);
      case 92:
         return jjMoveStringLiteralDfa1_4(0xc00000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         break;
      case 13:
         return jjMoveStringLiteralDfa2_4(active0, 0x800000L);
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa2_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(2, 23);
         break;
      default :
         return 3;
   }
   return 3;
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 35:
         return jjMoveStringLiteralDfa1_3(0x80000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa2_3(active0, 0x80000L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa3_3(active0, 0x80000L);
      default :
         return 3;
   }
}
private int jjMoveStringLiteralDfa3_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa4_3(active0, 0x80000L);
      default :
         return 4;
   }
}
private int jjMoveStringLiteralDfa4_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa5_3(active0, 0x80000L);
      default :
         return 5;
   }
}
private int jjMoveStringLiteralDfa5_3(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(5, 19);
         break;
      default :
         return 6;
   }
   return 6;
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x20000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(1, 17);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   82, 83, 85, 6, 86, 87, 42, 43, 26, 27, 29, 13, 14, 16, 56, 57,
   58, 59, 60, 61, 63, 65, 67, 69, 72, 75, 45, 46, 47, 48, 49, 50,
   52, 54, 7, 8, 11, 13, 14, 18, 16, 13, 14, 20, 16, 22, 24, 13,
   14, 23, 16, 26, 27, 31, 29, 26, 27, 33, 29, 35, 37, 26, 27, 36,
   29, 50, 52, 54, 61, 63, 65, 70, 71, 73, 74, 76, 78, 80, 84, 8,
   11, 12, 25, 9, 10, 15, 17, 19, 21, 28, 30, 32, 34, 88, 89,
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\137\137\164\162\171", "\137\137\141\163\155",
"\137\137\145\170\143\145\160\164", "\137\137\146\151\156\141\154\154\171", "\137\137\154\145\141\166\145", null,
null, null, null, null, null, null, null, null, null, null, null, null, null, null,
null, null, null, null, "\173", "\175", "\133", "\135", "\50", "\51", null, "\72",
"\73", "\54", "\77", "\56\56\56", "\75", "\52\75", "\57\75", "\45\75", "\53\75",
"\55\75", "\74\74\75", "\76\76\75", "\46\75", "\136\75", "\174\75", "\174\174",
"\46\46", "\174", "\136", "\46", "\75\75", "\41\75", "\74", "\76", "\74\75", "\76\75",
"\74\74", "\76\76", "\53", "\55", "\52", "\57", "\45", "\53\53", "\55\55", "\176",
"\41", "\56", "\55\76", "\56\52", "\55\76\52", "\141\156\144",
"\141\156\144\137\145\161", "\141\163\155", "\141\165\164\157", "\142\151\164\141\156\144",
"\142\151\164\157\162", "\142\157\157\154", "\142\162\145\141\153", "\143\141\163\145",
"\143\141\164\143\150", "\143\150\141\162", "\143\154\141\163\163", "\143\157\155\160\154",
"\143\157\156\163\164", "\143\157\156\163\164\137\143\141\163\164",
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\145\154\145\164\145", "\144\157",
"\144\157\165\142\154\145", "\144\171\156\141\155\151\143\137\143\141\163\164", "\145\154\163\145",
"\145\156\165\155", "\145\170\160\154\151\143\151\164", "\145\170\160\157\162\164",
"\145\170\164\145\162\156", "\146\141\154\163\145", "\146\154\157\141\164", "\146\157\162",
"\146\162\151\145\156\144", "\147\157\164\157", "\151\146", "\151\156\154\151\156\145", "\151\156\164",
"\154\157\156\147", "\155\165\164\141\142\154\145", "\156\141\155\145\163\160\141\143\145",
"\156\145\167", "\156\157\164", "\156\157\164\137\145\161",
"\157\160\145\162\141\164\157\162", "\157\162\40", "\157\162\137\145\161\40", "\160\162\151\166\141\164\145",
"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", "\162\145\147\151\163\164\145\162",
"\162\145\151\156\164\145\162\160\162\145\164\137\143\141\163\164", "\162\145\164\165\162\156", "\163\150\157\162\164",
"\163\151\147\156\145\144", "\163\151\172\145\157\146", "\163\164\141\164\151\143",
"\163\164\141\164\151\143\137\143\141\163\164", "\163\164\162\165\143\164", "\163\167\151\164\143\150",
"\164\145\155\160\154\141\164\145", "\164\150\151\163", "\164\150\162\157\167", "\164\162\165\145\40", null,
"\164\171\160\145\144\145\146", "\164\171\160\145\151\144", "\164\171\160\145\156\141\155\145",
"\165\156\151\157\156", "\165\156\163\151\147\156\145\144", "\165\163\151\156\147",
"\166\151\162\164\165\141\154", "\166\157\151\144", "\166\157\154\141\164\151\154\145",
"\167\143\150\141\162\137\164", "\104\127\117\122\104", "\127\117\122\104", "\102\131\124\105",
"\167\150\151\154\145", "\170\157\162", "\170\157\162\137\145\161\40", "\163\164\144", null, null,
null, null, null, null, null, null, null, null, null, null, null, null, null, null,
null, "\146\151\156\141\154\154\171", "\72\72", "\164\162\165\145", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_LINE_COMMENT",
   "IN_COMMENT",
   "ELSE_STATEMENT",
   "PREPROCESSOR_OUTPUT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 2, 3, 4, 0, -1, 0, -1, 0, -1, 0, -1, -1, -1,
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
};
static final long[] jjtoToken = {
   0xfffffffffe00003fL, 0xffffffffffffffffL, 0xfffffffffffL,
};
static final long[] jjtoSkip = {
   0x2affc0L, 0x0L, 0x0L,
};
static final long[] jjtoMore = {
   0x1d50000L, 0x0L, 0x0L,
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[92];
private final int[] jjstateSet = new int[184];
protected char curChar;
/** Constructor. */
public CPPTreeParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public CPPTreeParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 92; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 5 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken()
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 16)
         {
            jjmatchedKind = 16;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 18)
         {
            jjmatchedKind = 18;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 20)
         {
            jjmatchedKind = 20;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 24)
         {
            jjmatchedKind = 24;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     //throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
      return null;
   }
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
