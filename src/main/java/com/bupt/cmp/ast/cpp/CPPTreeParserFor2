/* Generated By:JJTree&JavaCC: Do not edit this line. CPPTreeParser.java */
package examiner.ast.cpp;
import java.io.*;
import java.util.*;
import examiner.common.*;
public final class CPPTreeParser/*@bgen(jjtree)*/implements CPPTreeParserTreeConstants, CPPTreeParserConstants {/*@bgen(jjtree)*/
  protected JJTCPPTreeParserState jjtree = new JJTCPPTreeParserState();private static String vers = "v20";
  private static String id = "C++ Parser";
  private static boolean isFriend = false;

  private static void msg(String s) {
      System.out.println(id + " Version " + vers +": " + s);
  }
     /**
	 * 运行解析�?
	 * 
	 * @param fileText
	 * @return
	 */
  public static SimpleNode GetCPPGrammarTree(String fileText) throws ParseException
  {
    if (fileText == null)
    {
      return null;
    }
    // 解析�?
    CPPTreeParser parser;
    parser = new CPPTreeParser(new StringReader(fileText));
    SimpleNode root = parser.translation_unit();
    return root;
  }
    /**
   * A symbol table manager object. Currently only types are recorded for
   * doing semantic predicates for parsing.
   */
  static SymtabManager sym;


  /**
   * Utility method used to skip template arguments.
   * It must be invoked with the token index of the first angular bracket.
   * It returns the token index after the last angular bracket.
   */
  int SkipTemplateArgument(int i)
  {
     Token t = getToken(i);
     if (t.kind != LESSTHAN)
        return i;

     int initial_i = i;
     int angularBrackets = 1;
     int parentheses = 0;
     int braces = 0;

     while (angularBrackets > 0) {
        t = getToken(++i);
        if (t.kind == EOF)
           return initial_i;
        if (parentheses < 0 || braces < 0)
           return initial_i;
        if (t.kind == LESSTHAN)
           angularBrackets++;
        if (t.kind == GREATERTHAN)
           angularBrackets--;
        if (t.kind == LPARENTHESIS)
           parentheses++;
        if (t.kind == RPARENTHESIS)
           parentheses--;
        if (t.kind == LCURLYBRACE)
           braces++;
        if (t.kind == RCURLYBRACE)
           braces--;
     }
     return i+1;
  }

  /*
   * Methods used in semantics predicates.
   */

  /**
   * Reads a fully qualified name (since it is used during lookahead, we 
   * cannot use token. We have to explicitly use getToken).
   */
  String GetFullyScopedName()
  {
     int i = 1;
     Token t = getToken(i);

     if (t.kind == TILDE) {
        i++;
        t = getToken(i);
     }
     if (t.kind != ID && t.kind != SCOPE)
        return null;

     StringBuffer s = new StringBuffer();

     if (t.kind != SCOPE)
     {
        s.append(t.image);
        i++;
        i = SkipTemplateArgument(i);
        t = getToken(i++);
     }
     else
        i++;

     while (t.kind == SCOPE)
     {
        s.append(t.image);
        t = getToken(i++);
        if (t.kind == TILDE)
          t = getToken(i++);
        s.append(t.image);
        i = SkipTemplateArgument(i);
        t = getToken(i++);
     }

     return s.toString();
  }

  /**
   * This method first tries to read a sequence of tokens of the form 
   *             ("::")? <ID> ("::" <ID>)* 
   * and if it succeeds then asks the symbol table manager  if this is
   * the name of a constructor.
   */
  boolean IsCtor()
  {
      return sym.IsCtor(GetFullyScopedName());
  }

  /**
   * Reads a fully qualified name (since it is used during lookahead, we 
   * cannot use token. We have to explicitly use getToken), followed by 
   * the first type name of the parameter list.
   */
  String GetMethodNameAndInitialSignature()
  {
     StringBuffer s = new StringBuffer();
     int i = 1 ,j;
     Token t = getToken(i++);

     // reads first method name then type name
     for (j = 1 ; j <= 2 ; j++) {
         if (t.kind != ID && t.kind != SCOPE)
             return null;

         if (t.kind != SCOPE) {
             s.append(t.image);
             t = getToken(i++);
         }
         while (t.kind == SCOPE || t.kind == LESSTHAN) {
             if (t.kind == LESSTHAN) {
                while (t.kind != GREATERTHAN)
                  t = getToken(i++);
                t = getToken(i++);
             }

             s.append(t.image);
             s.append((t = getToken(i++)).image);
             t = getToken(i++);
         }
         if (j == 2)
             break;
         if (t.kind != LPARENTHESIS)
             return null;
         s.append("(");
         t = getToken(i++);
     }

     return s.toString();
  }

  /**
   * This method first tries to read a sequence of tokens of the form 
   *             ("::")? <ID> ("::" <ID>)* "(" ("::")? <ID> ("::" <ID>)* 
   * If it succeeds it checks if the string after the left parenthesis is 
   * a known type.
   */
  boolean IsMethod()
  {
     return sym.IsMethod(GetMethodNameAndInitialSignature());
  }

  final public SimpleNode translation_unit() throws ParseException {
 /*@bgen(jjtree) Root */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Scope sc;
    try {
     sym.OpenScope(null, false, false);
     sc = sym.GetCurScope();
     sc.PutTypeName("std", sc);
      label_1:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_1;
        }
        external_declaration();
      }
      jj_consume_token(0);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtn000.jjtSetLastToken(getToken(0));
                sym.CloseScope();
                {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public void external_declaration() throws ParseException {
 /*@bgen(jjtree) External_Declaration */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEXTERNAL_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));boolean isTypedef = false;
  StringBuffer typedefSource = new StringBuffer();
    try {
      if (jj_2_7(2147483647)) {
        switch (jj_nt.kind) {
        case TEMPLATE:
        case EXPORT:
          template_head();
          break;
        default:
          ;
        }
        declaration();
      } else if (jj_2_8(2147483647)) {
        enum_specifier();
        switch (jj_nt.kind) {
        case LPARENTHESIS:
        case SCOPE:
        case AMPERSAND:
        case STAR:
        case TILDE:
        case OPERATOR:
        case ID:
          init_declarator_list(false, null);
          break;
        default:
          ;
        }
        jj_consume_token(SEMICOLON);
      } else if (jj_2_9(2147483647)) {
        dtor_definition();
      } else if (jj_2_10(2147483647)) {
        ctor_definition();
      } else if (jj_2_11(2147483647)) {
        function_definition();
      } else if (jj_2_12(2147483647)) {
        conversion_function_decl_or_def();
      } else if (jj_2_13(3)) {
        label_2:
        while (true) {
          template_head();
          switch (jj_nt.kind) {
          case TEMPLATE:
          case EXPORT:
            ;
            break;
          default:
            break label_2;
          }
        }
        if (jj_2_2(2147483647)) {
          dtor_definition();
        } else if (jj_2_3(2147483647)) {
          ctor_definition();
        } else if (jj_2_4(2147483647)) {
          function_definition();
        } else if (jj_2_5(2147483647)) {
          isTypedef = declaration_specifiers(typedefSource);
          switch (jj_nt.kind) {
          case LPARENTHESIS:
          case SCOPE:
          case AMPERSAND:
          case STAR:
          case TILDE:
          case OPERATOR:
          case ID:
            init_declarator_list(isTypedef, typedefSource);
            break;
          default:
            ;
          }
          jj_consume_token(SEMICOLON);
        } else if (jj_2_6(2147483647)) {
          conversion_function_decl_or_def();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else if (jj_2_14(2)) {
        explicit_instantiation();
      } else {
        switch (jj_nt.kind) {
        case TEMPLATE:
          explicit_specialization();
          break;
        default:
          if (jj_2_15(3)) {
            namespace_definition();
          } else if (jj_2_16(1)) {
            declaration();
          } else {
            switch (jj_nt.kind) {
            case SEMICOLON:
              jj_consume_token(SEMICOLON);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
          sym.ClearSuspendedVarName();
              break;
            default:
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void function_definition() throws ParseException {
 /*@bgen(jjtree) Function_Definition */
   CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTFUNCTION_DEFINITION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));Scope sc = null;
   boolean isTypedef;
    try {
      if (jj_2_17(3)) {
        isTypedef = declaration_specifiers(null);
        sc = function_declarator(isTypedef);
        label_3:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_3;
          }
          jj_consume_token(COMMA);
          sc = function_declarator(isTypedef);
        }
        func_decl_def(sc);
      } else {
        switch (jj_nt.kind) {
        case SCOPE:
        case AMPERSAND:
        case STAR:
        case OPERATOR:
        case ID:
          sc = function_declarator(false);
          label_4:
          while (true) {
            switch (jj_nt.kind) {
            case COMMA:
              ;
              break;
            default:
              break label_4;
            }
            jj_consume_token(COMMA);
            sc = function_declarator(false);
          }
          func_decl_def(sc);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void func_decl_def(Scope sc) throws ParseException {
 /*@bgen(jjtree) Func_Decl_Def */
   CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTFUNC_DECL_DEF);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));boolean closeReqd = false;
    try {
     if (closeReqd = (sc != null && sc != sym.GetCurScope()))
        sym.OpenScope(sc);
      switch (jj_nt.kind) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
          sym.ClearSuspendedVarName();
        break;
      case LCURLYBRACE:
        compound_statement();
        break;
      case TRY:
        jj_consume_token(TRY);
        compound_statement();
        label_5:
        while (true) {
          handler();
          switch (jj_nt.kind) {
          case CATCH:
          case 148:
            ;
            break;
          default:
            break label_5;
          }
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    if (closeReqd) sym.CloseScope();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void linkage_specification() throws ParseException {
 /*@bgen(jjtree) linkage_specification */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTLINKAGE_SPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(EXTERN);
      jj_consume_token(STRING);
      switch (jj_nt.kind) {
      case LCURLYBRACE:
        jj_consume_token(LCURLYBRACE);
        label_6:
        while (true) {
          if (jj_2_18(1)) {
            ;
          } else {
            break label_6;
          }
          external_declaration();
        }
        jj_consume_token(RCURLYBRACE);
        if (jj_2_19(2147483647)) {
          jj_consume_token(SEMICOLON);
        } else {
          ;
        }
        break;
      default:
        if (jj_2_20(1)) {
          external_declaration();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void declaration_in_condition() throws ParseException {
 /*@bgen(jjtree) declaration_in_condition */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDECLARATION_IN_CONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      declaration_specifiers(null);
      declarator();
      jj_consume_token(ASSIGNEQUAL);
      initializer();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void declaration() throws ParseException {
 /*@bgen(jjtree) declaration */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));boolean isTypedef = false;
  StringBuffer typedefSource = new StringBuffer();
    try {
      if (jj_2_21(2)) {
        isTypedef = declaration_specifiers(typedefSource);
        switch (jj_nt.kind) {
        case LPARENTHESIS:
        case SCOPE:
        case AMPERSAND:
        case STAR:
        case TILDE:
        case OPERATOR:
        case ID:
          init_declarator_list(isTypedef, typedefSource);
          break;
        default:
          ;
        }
        switch (jj_nt.kind) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        case LCURLYBRACE:
          compound_statement();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        switch (jj_nt.kind) {
        case EXTERN:
          linkage_specification();
          break;
        case 146:
          namespace_alias_definition();
          break;
        default:
          if (jj_2_22(2)) {
            using_declaration();
          } else {
            switch (jj_nt.kind) {
            case 147:
              using_directive();
              break;
            default:
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

/**
 * Very temporary. Just returns true if it sees a typedef. Finally, we will
 * need a structure that stores all the attributes.
 */
  final public boolean type_modifiers() throws ParseException {
 /*@bgen(jjtree) type_modifiers */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTYPE_MODIFIERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));boolean isTypedef = false;
    try {
      switch (jj_nt.kind) {
      case AUTO:
      case EXTERN:
      case MUTABLE:
      case REGISTER:
      case STATIC:
      case TYPEDEF:
        isTypedef = storage_class_specifier();
        break;
      case CONST:
      case VOLATILE:
        type_qualifier();
        break;
      case INLINE:
        jj_consume_token(INLINE);
        break;
      case EXPLICIT:
        jj_consume_token(EXPLICIT);
        break;
      case VIRTUAL:
        jj_consume_token(VIRTUAL);
        break;
      case FRIEND:
        jj_consume_token(FRIEND);
       isFriend = true;
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtn000.jjtSetLastToken(getToken(0));
     {if (true) return isTypedef;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Returns true if it sees a typedef. Parameter typedefSource stores the 
 * type being aliased.
 */
  final public boolean declaration_specifiers(StringBuffer typedefSource) throws ParseException {
 /*@bgen(jjtree) declaration_specifiers */
   CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDECLARATION_SPECIFIERS);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));Token t;
   boolean isTypedef = false, tmp;
    try {
      label_7:
      while (true) {
        if (jj_2_23(2147483647)) {
          ;
        } else {
          break label_7;
        }
        tmp = type_modifiers();
                                                          isTypedef |= tmp;
      }
      switch (jj_nt.kind) {
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case WCHAR_T:
      case BOOL:
      case INT:
      case LONG:
      case SHORT:
      case SIGNED:
      case UNSIGNED:
      case VOID:
        builtin_type_specifier();
        label_8:
        while (true) {
          if (jj_2_24(2)) {
            ;
          } else {
            break label_8;
          }
          if (jj_2_25(2147483647)) {
            builtin_type_specifier();
          } else {
            switch (jj_nt.kind) {
            case AUTO:
            case CONST:
            case EXTERN:
            case FRIEND:
            case INLINE:
            case MUTABLE:
            case EXPLICIT:
            case REGISTER:
            case STATIC:
            case TYPEDEF:
            case VIRTUAL:
            case VOLATILE:
              tmp = type_modifiers();
                                     isTypedef |= tmp;
              break;
            default:
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
        break;
      default:
        if (jj_2_26(2147483647)) {
          class_specifier(typedefSource);
        } else if (jj_2_27(3)) {
          enum_specifier();
        } else {
          switch (jj_nt.kind) {
          case ENUM:
          case STRUCT:
          case CLASS:
          case TYPENAME:
          case UNION:
            elaborated_type_specifier(typedefSource);
            break;
          default:
            if (jj_2_28(1)) {
              qualified_type(typedefSource);
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
      label_9:
      while (true) {
        if (jj_2_29(2)) {
          ;
        } else {
          break label_9;
        }
        tmp = type_modifiers();
                                          isTypedef |= tmp;
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtn000.jjtSetLastToken(getToken(0));
        isFriend = false;
        {if (true) return isTypedef;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public void type_id() throws ParseException {
 /*@bgen(jjtree) type_id */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTYPE_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_10:
      while (true) {
        type_specifier();
        if (jj_2_30(1)) {
          ;
        } else {
          break label_10;
        }
      }
      abstract_declarator();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void elaborated_type_id() throws ParseException {
 /*@bgen(jjtree) elaborated_type_id */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTELABORATED_TYPE_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_11:
      while (true) {
        elaborated_type_specifier(null);
        switch (jj_nt.kind) {
        case ENUM:
        case STRUCT:
        case CLASS:
        case TYPENAME:
        case UNION:
          ;
          break;
        default:
          break label_11;
        }
      }
      abstract_declarator();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void type_specifier() throws ParseException {
 /*@bgen(jjtree) type_specifier */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTYPE_SPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_31(1)) {
        simple_type_specifier();
      } else {
        switch (jj_nt.kind) {
        case STRUCT:
        case CLASS:
        case UNION:
          class_specifier(null);
          break;
        case ENUM:
          enum_specifier();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void simple_type_specifier() throws ParseException {
 /*@bgen(jjtree) simple_type_specifier */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSIMPLE_TYPE_SPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case CHAR:
      case DOUBLE:
      case FLOAT:
      case WCHAR_T:
      case BOOL:
      case INT:
      case LONG:
      case SHORT:
      case SIGNED:
      case UNSIGNED:
      case VOID:
        builtin_type_specifier();
        break;
      default:
        if (jj_2_32(1)) {
          qualified_type(null);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void scope_override_lookahead() throws ParseException {
 /*@bgen(jjtree) scope_override_lookahead */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSCOPE_OVERRIDE_LOOKAHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case SCOPE:
        jj_consume_token(SCOPE);
        break;
      case ID:
        jj_consume_token(ID);
        switch (jj_nt.kind) {
        case LESSTHAN:
          jj_consume_token(LESSTHAN);
          if (jj_2_33(1)) {
            template_argument_list();
          } else {
            ;
          }
          jj_consume_token(GREATERTHAN);
          break;
        default:
          ;
        }
        jj_consume_token(SCOPE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public String scope_override() throws ParseException {
 /*@bgen(jjtree) scope_override */
   CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSCOPE_OVERRIDE);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));String name = "";
   Token t;
    try {
      switch (jj_nt.kind) {
      case SCOPE:
        jj_consume_token(SCOPE);
              name += "::";
        label_12:
        while (true) {
          if (jj_2_34(2147483647)) {
            ;
          } else {
            break label_12;
          }
          t = jj_consume_token(ID);
          switch (jj_nt.kind) {
          case LESSTHAN:
            jj_consume_token(LESSTHAN);
            if (jj_2_35(1)) {
              template_argument_list();
            } else {
              ;
            }
            jj_consume_token(GREATERTHAN);
            break;
          default:
            ;
          }
          jj_consume_token(SCOPE);
        name += t.image + "::";
        }
        break;
      case ID:
        label_13:
        while (true) {
          t = jj_consume_token(ID);
          switch (jj_nt.kind) {
          case LESSTHAN:
            jj_consume_token(LESSTHAN);
            if (jj_2_36(1)) {
              template_argument_list();
            } else {
              ;
            }
            jj_consume_token(GREATERTHAN);
            break;
          default:
            ;
          }
          jj_consume_token(SCOPE);
        name += t.image + "::";
          if (jj_2_37(2147483647)) {
            ;
          } else {
            break label_13;
          }
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    {if (true) return name;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String qualified_id() throws ParseException {
 /*@bgen(jjtree) qualified_id */
   CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTQUALIFIED_ID);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));String name = "";
   Token t;
    try {
      if (jj_2_38(2147483647)) {
        name = scope_override();
      } else {
        ;
      }
      switch (jj_nt.kind) {
      case ID:
        t = jj_consume_token(ID);
        if (jj_2_40(2)) {
          jj_consume_token(LESSTHAN);
          if (jj_2_39(1)) {
            template_argument_list();
          } else {
            ;
          }
          jj_consume_token(GREATERTHAN);
        } else {
          ;
        }
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        jjtn000.jjtSetLastToken(getToken(0));
        {if (true) return name + t.image;}
        break;
      case OPERATOR:
        jj_consume_token(OPERATOR);
        optor();
        if (jj_2_42(2)) {
          jj_consume_token(LESSTHAN);
          if (jj_2_41(1)) {
            template_argument_list();
          } else {
            ;
          }
          jj_consume_token(GREATERTHAN);
        } else {
          ;
        }
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        jjtn000.jjtSetLastToken(getToken(0));
        {if (true) return name + "operator";}
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public String dtor_qualified_id() throws ParseException {
 /*@bgen(jjtree) dtor_qualified_id */
   CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDTOR_QUALIFIED_ID);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));String name = "";
   Token t;
    try {
      if (jj_2_43(2147483647)) {
        name = scope_override();
      } else {
        ;
      }
      jj_consume_token(TILDE);
      t = jj_consume_token(ID);
      switch (jj_nt.kind) {
      case LESSTHAN:
        jj_consume_token(LESSTHAN);
        if (jj_2_44(1)) {
          template_argument_list();
        } else {
          ;
        }
        jj_consume_token(GREATERTHAN);
        break;
      default:
        ;
      }
        jjtree.closeNodeScope(jjtn000, true);
        jjtc000 = false;
        jjtn000.jjtSetLastToken(getToken(0));
        {if (true) return name + t.image;}
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ptr_to_member() throws ParseException {
 /*@bgen(jjtree) ptr_to_member */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTPTR_TO_MEMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      scope_override();
      jj_consume_token(STAR);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void qualified_type(StringBuffer typedefSource) throws ParseException {
 /*@bgen(jjtree) qualified_type */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTQUALIFIED_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String idName;
    try {
      if (sym.IsFullyScopedTypeName(GetFullyScopedName())) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      idName = qualified_id();
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
           if (typedefSource != null)
              typedefSource.append(idName);
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void type_qualifier() throws ParseException {
 /*@bgen(jjtree) type_qualifier */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTYPE_QUALIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case CONST:
        jj_consume_token(CONST);
        break;
      case VOLATILE:
        jj_consume_token(VOLATILE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

/**
 * Very temporary. Just returns true if it sees a typedef. Finally, we will
 * need a structure that stores all the attributes.
 */
  final public boolean storage_class_specifier() throws ParseException {
 /*@bgen(jjtree) storage_class_specifier */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSTORAGE_CLASS_SPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case AUTO:
      case EXTERN:
      case MUTABLE:
      case REGISTER:
      case STATIC:
        switch (jj_nt.kind) {
        case AUTO:
          jj_consume_token(AUTO);
          break;
        case REGISTER:
          jj_consume_token(REGISTER);
          break;
        case STATIC:
          jj_consume_token(STATIC);
          break;
        case EXTERN:
          jj_consume_token(EXTERN);
          break;
        case MUTABLE:
          jj_consume_token(MUTABLE);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                              jjtree.closeNodeScope(jjtn000, true);
                                                              jjtc000 = false;
                                                              jjtn000.jjtSetLastToken(getToken(0));
                                                              {if (true) return false;}
        break;
      case TYPEDEF:
        jj_consume_token(TYPEDEF);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                  {if (true) return true;}
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public void builtin_type_specifier() throws ParseException {
 /*@bgen(jjtree) builtin_type_specifier */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTBUILTIN_TYPE_SPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case VOID:
        jj_consume_token(VOID);
        break;
      case CHAR:
        jj_consume_token(CHAR);
        break;
      case SHORT:
        jj_consume_token(SHORT);
        break;
      case INT:
        jj_consume_token(INT);
        break;
      case LONG:
        jj_consume_token(LONG);
        break;
      case FLOAT:
        jj_consume_token(FLOAT);
        break;
      case DOUBLE:
        jj_consume_token(DOUBLE);
        break;
      case SIGNED:
        jj_consume_token(SIGNED);
        break;
      case UNSIGNED:
        jj_consume_token(UNSIGNED);
        break;
      case WCHAR_T:
        jj_consume_token(WCHAR_T);
        break;
      case BOOL:
        jj_consume_token(BOOL);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void init_declarator_list(boolean isTypedef, StringBuffer typedefSource) throws ParseException {
 /*@bgen(jjtree) init_declarator_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTINIT_DECLARATOR_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      init_declarator(isTypedef, typedefSource);
      label_14:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_14;
        }
        jj_consume_token(COMMA);
        init_declarator(isTypedef, typedefSource);
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void init_declarator(boolean isTypedef, StringBuffer typedefSource) throws ParseException {
 /*@bgen(jjtree) init_declarator */
   CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTINIT_DECLARATOR);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));String name;
   Scope sc;
    try {
      name = declarator();
      if (isTypedef) {
         sym.PutTypeName(name);
         if (typedefSource != null && typedefSource.length() > 0) {
            sc = sym.GetScopeOfFullyScopedName(typedefSource + "::");
            if (sc != null)
               sym.GetCurScope().PutTypeName(name, sc);
         }
      } else {
         sc = sym.GetCurScope();
         if (name.indexOf("::") == -1)
            sc.PutVarName(name);
      }
      switch (jj_nt.kind) {
      case LPARENTHESIS:
      case ASSIGNEQUAL:
        switch (jj_nt.kind) {
        case ASSIGNEQUAL:
          jj_consume_token(ASSIGNEQUAL);
          initializer();
          break;
        case LPARENTHESIS:
          jj_consume_token(LPARENTHESIS);
          expression_list();
          jj_consume_token(RPARENTHESIS);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void class_head() throws ParseException {
 /*@bgen(jjtree) class_head */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCLASS_HEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case STRUCT:
        jj_consume_token(STRUCT);
        break;
      case UNION:
        jj_consume_token(UNION);
        break;
      case CLASS:
        jj_consume_token(CLASS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_45(2147483647)) {
        scope_override();
      } else {
        ;
      }
      switch (jj_nt.kind) {
      case ID:
        jj_consume_token(ID);
        if (jj_2_47(2)) {
          jj_consume_token(LESSTHAN);
          if (jj_2_46(1)) {
            template_argument_list();
          } else {
            ;
          }
          jj_consume_token(GREATERTHAN);
        } else {
          ;
        }
        switch (jj_nt.kind) {
        case COLON:
          base_clause(null);
          break;
        default:
          ;
        }
        break;
      default:
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void class_specifier(StringBuffer typedefSource) throws ParseException {
 /*@bgen(jjtree) class_specifier */
   CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCLASS_SPECIFIER);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));ClassScope csc = null;
   Scope sc = null;
   Token t;
   String name = "";
   boolean nestedScope = false;
    try {
      switch (jj_nt.kind) {
      case STRUCT:
        jj_consume_token(STRUCT);
        break;
      case UNION:
        jj_consume_token(UNION);
        break;
      case CLASS:
        jj_consume_token(CLASS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch (jj_nt.kind) {
      case LCURLYBRACE:
        jj_consume_token(LCURLYBRACE);
           sym.OpenScope(null, false, false);
        label_15:
        while (true) {
          if (jj_2_48(1)) {
            ;
          } else {
            break label_15;
          }
          member_declaration();
        }
        jj_consume_token(RCURLYBRACE);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
           sym.CloseScope();
        break;
      default:
        if (jj_2_53(2147483647)) {
          if (jj_2_49(2147483647)) {
            name = scope_override();
          } else {
            ;
          }
          t = jj_consume_token(ID);
          if (jj_2_51(2)) {
            jj_consume_token(LESSTHAN);
            if (jj_2_50(1)) {
              template_argument_list();
            } else {
              ;
            }
            jj_consume_token(GREATERTHAN);
          } else {
            ;
          }
        sc = sym.GetScopeOfFullyScopedName(name);
        if (sc != null) {
           sym.OpenScope(sc);
           nestedScope = true;
        }
        sym.PutTypeName(t.image);
        csc = (ClassScope)sym.OpenScope(t.image, true, false);
        if (typedefSource != null)
           typedefSource.append(t.image);
          switch (jj_nt.kind) {
          case COLON:
            base_clause(csc);
            break;
          default:
            ;
          }
          jj_consume_token(LCURLYBRACE);
          label_16:
          while (true) {
            if (jj_2_52(1)) {
              ;
            } else {
              break label_16;
            }
            member_declaration();
          }
          jj_consume_token(RCURLYBRACE);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
           sym.CloseScope();
           if (nestedScope)
               sym.CloseScope();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void namespace_definition() throws ParseException {
 /*@bgen(jjtree) namespace_definition */
   CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTNAMESPACE_DEFINITION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));Scope sc = null;
   Token t;
    try {
      jj_consume_token(146);
      switch (jj_nt.kind) {
      case LCURLYBRACE:
        jj_consume_token(LCURLYBRACE);
           sym.OpenScope(null, false, true);
        label_17:
        while (true) {
          if (jj_2_54(1)) {
            ;
          } else {
            break label_17;
          }
          external_declaration();
        }
        jj_consume_token(RCURLYBRACE);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
           sym.CloseScope();
        break;
      default:
        if (jj_2_56(2)) {
          t = jj_consume_token(ID);
          jj_consume_token(LCURLYBRACE);
           sc = sym.GetScope(t.image);
           if (sc != null)
              sym.OpenScope(sc);
           else
              sc = (ClassScope)sym.OpenScope(t.image, true, true);
          label_18:
          while (true) {
            if (jj_2_55(1)) {
              ;
            } else {
              break label_18;
            }
            external_declaration();
          }
          jj_consume_token(RCURLYBRACE);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
           sym.CloseScope();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void namespace_alias_definition() throws ParseException {
 /*@bgen(jjtree) namespace_alias_definition */
   CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTNAMESPACE_ALIAS_DEFINITION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));Token t;
   String name;
   Scope sc;
    try {
      jj_consume_token(146);
      t = jj_consume_token(ID);
      jj_consume_token(ASSIGNEQUAL);
      name = qualified_id();
      jj_consume_token(SEMICOLON);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtn000.jjtSetLastToken(getToken(0));
      sc = sym.GetScopeOfFullyScopedName(name + "::");
      sym.GetCurScope().PutTypeName(t.image, sc);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void using_declaration() throws ParseException {
 /*@bgen(jjtree) using_declaration */
   CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTUSING_DECLARATION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));String name;
   boolean isTypename = false;
   Scope sc;
    try {
      jj_consume_token(147);
      switch (jj_nt.kind) {
      case TYPENAME:
        jj_consume_token(TYPENAME);
                        isTypename = true;
        break;
      default:
        ;
      }
      name = qualified_id();
      jj_consume_token(SEMICOLON);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtn000.jjtSetLastToken(getToken(0));
      if (isTypename || sym.IsFullyScopedTypeName(name)) {
        sc = sym.GetScopeOfFullyScopedName(name + "::");
        if (name.indexOf("::") != -1)
           name = name.substring(name.lastIndexOf("::") + 2, name.length());
        if (sc != null)
           sym.GetCurScope().PutTypeName(name, sc);
        else
           sym.PutTypeName(name);
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void using_directive() throws ParseException {
 /*@bgen(jjtree) using_directive */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTUSING_DIRECTIVE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Scope sc;
  String name;
    try {
      jj_consume_token(147);
      jj_consume_token(146);
      name = qualified_id();
      jj_consume_token(SEMICOLON);
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtn000.jjtSetLastToken(getToken(0));
      sc = sym.GetCurScope();
      sc.AddNamespace(sym.GetScopeOfFullyScopedName(name + "::"));
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void base_clause(ClassScope scope) throws ParseException {
 /*@bgen(jjtree) base_clause */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTBASE_CLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(COLON);
      base_specifier(scope);
      label_19:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_19;
        }
        jj_consume_token(COMMA);
        base_specifier(scope);
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void base_specifier(ClassScope scope) throws ParseException {
 /*@bgen(jjtree) base_specifier */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTBASE_SPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      switch (jj_nt.kind) {
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case VIRTUAL:
        switch (jj_nt.kind) {
        case VIRTUAL:
          jj_consume_token(VIRTUAL);
          switch (jj_nt.kind) {
          case PRIVATE:
          case PROTECTED:
          case PUBLIC:
            access_specifier();
            break;
          default:
            ;
          }
          break;
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
          access_specifier();
          switch (jj_nt.kind) {
          case VIRTUAL:
            jj_consume_token(VIRTUAL);
            break;
          default:
            ;
          }
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        ;
      }
      if (jj_2_57(2147483647)) {
        scope_override();
      } else {
        ;
      }
      t = jj_consume_token(ID);
      switch (jj_nt.kind) {
      case LESSTHAN:
        jj_consume_token(LESSTHAN);
        if (jj_2_58(1)) {
          template_argument_list();
        } else {
          ;
        }
        jj_consume_token(GREATERTHAN);
        break;
      default:
        ;
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtn000.jjtSetLastToken(getToken(0));
      scope.AddSuper(sym.GetScope(t.image));
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void access_specifier() throws ParseException {
 /*@bgen(jjtree) access_specifier */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTACCESS_SPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void member_declaration() throws ParseException {
 /*@bgen(jjtree) member_declaration */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTMEMBER_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));boolean isTypedef = false;
  StringBuffer typedefSource = new StringBuffer();
    try {
      if (jj_2_68(2)) {
        if (jj_2_59(3)) {
          template_head();
        } else {
          ;
        }
        if (jj_2_60(2147483647)) {
          declaration();
        } else if (jj_2_61(2147483647)) {
          enum_specifier();
          switch (jj_nt.kind) {
          case LPARENTHESIS:
          case SCOPE:
          case COLON:
          case AMPERSAND:
          case STAR:
          case TILDE:
          case OPERATOR:
          case ID:
            member_declarator_list(false, null);
            break;
          default:
            ;
          }
          jj_consume_token(SEMICOLON);
        } else if (jj_2_62(2147483647)) {
          conversion_function_decl_or_def();
        } else if (jj_2_63(2147483647)) {
          dtor_definition();
        } else if (jj_2_64(2147483647)) {
          ctor_definition();
        } else if (jj_2_65(2147483647)) {
          function_definition();
        } else if (jj_2_66(2147483647)) {
          isTypedef = declaration_specifiers(typedefSource);
          switch (jj_nt.kind) {
          case LPARENTHESIS:
          case SCOPE:
          case COLON:
          case AMPERSAND:
          case STAR:
          case TILDE:
          case OPERATOR:
          case ID:
            member_declarator_list(isTypedef, typedefSource);
            break;
          default:
            ;
          }
         sym.ClearSuspendedVarName();
          switch (jj_nt.kind) {
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
            break;
          case LCURLYBRACE:
            compound_statement();
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        } else if (jj_2_67(2147483647)) {
          function_declarator(false);
          jj_consume_token(SEMICOLON);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      sym.ClearSuspendedVarName();
        } else {
          switch (jj_nt.kind) {
          case 147:
            using_declaration();
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } else if (jj_2_69(3)) {
        qualified_id();
        jj_consume_token(SEMICOLON);
      } else {
        switch (jj_nt.kind) {
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
          access_specifier();
          jj_consume_token(COLON);
          break;
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
          sym.ClearSuspendedVarName();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void member_declarator_list(boolean isTypedef, StringBuffer typedefSource) throws ParseException {
 /*@bgen(jjtree) member_declarator_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTMEMBER_DECLARATOR_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      member_declarator(isTypedef, typedefSource);
      switch (jj_nt.kind) {
      case ASSIGNEQUAL:
        jj_consume_token(ASSIGNEQUAL);
        jj_consume_token(OCTALINT);
        break;
      default:
        ;
      }
      label_20:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_20;
        }
        jj_consume_token(COMMA);
        member_declarator(isTypedef, typedefSource);
        switch (jj_nt.kind) {
        case ASSIGNEQUAL:
          jj_consume_token(ASSIGNEQUAL);
          jj_consume_token(OCTALINT);
          break;
        default:
          ;
        }
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void member_declarator(boolean isTypedef, StringBuffer typedefSource) throws ParseException {
 /*@bgen(jjtree) member_declarator */
   CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTMEMBER_DECLARATOR);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));String name;
   Scope sc;
    try {
      if (jj_2_71(2)) {
        switch (jj_nt.kind) {
        case ID:
          jj_consume_token(ID);
          break;
        default:
          ;
        }
        jj_consume_token(COLON);
        constant_expression();
      } else {
        switch (jj_nt.kind) {
        case LPARENTHESIS:
        case SCOPE:
        case AMPERSAND:
        case STAR:
        case TILDE:
        case OPERATOR:
        case ID:
          name = declarator();
      if (isTypedef) {
         sym.PutTypeName(name);
         if (typedefSource != null && typedefSource.length() > 0) {
            sc = sym.GetScopeOfFullyScopedName(typedefSource + "::");
            if (sc != null)
               sym.GetCurScope().PutTypeName(name, sc);
         }
      } else {
         sc = sym.GetCurScope();
         if (name.indexOf("::") == -1)
            sc.PutVarName(name);
      }
          if (jj_2_70(2)) {
            jj_consume_token(ASSIGNEQUAL);
            constant_expression();
          } else {
            ;
          }
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void conversion_function_decl_or_def() throws ParseException {
 /*@bgen(jjtree) conversion_function_decl_or_def */
   CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCONVERSION_FUNCTION_DECL_OR_DEF);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));Scope sc = null;
   String name = null;
    try {
      label_21:
      while (true) {
        if (jj_2_72(2147483647)) {
          ;
        } else {
          break label_21;
        }
        type_modifiers();
                                                   isFriend = false;
      }
      if (jj_2_73(2147483647)) {
        name = scope_override();
      } else {
        ;
      }
      jj_consume_token(OPERATOR);
      declaration_specifiers(null);
      switch (jj_nt.kind) {
      case AMPERSAND:
      case STAR:
        switch (jj_nt.kind) {
        case STAR:
          jj_consume_token(STAR);
          break;
        case AMPERSAND:
          jj_consume_token(AMPERSAND);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        ;
      }
      jj_consume_token(LPARENTHESIS);
      if (jj_2_74(1)) {
        parameter_list();
      } else {
        ;
      }
      jj_consume_token(RPARENTHESIS);
      if (jj_2_75(2)) {
        type_qualifier();
      } else {
        ;
      }
      switch (jj_nt.kind) {
      case THROW:
        exception_spec();
        break;
      default:
        ;
      }
      func_decl_def(null);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void enum_specifier() throws ParseException {
 /*@bgen(jjtree) enum_specifier */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTENUM_SPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      jj_consume_token(ENUM);
      switch (jj_nt.kind) {
      case LCURLYBRACE:
        jj_consume_token(LCURLYBRACE);
        enumerator_list();
        jj_consume_token(RCURLYBRACE);
        break;
      case ID:
        t = jj_consume_token(ID);
        if (jj_2_76(2)) {
          jj_consume_token(LCURLYBRACE);
          enumerator_list();
          jj_consume_token(RCURLYBRACE);
        } else {
          ;
        }
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtn000.jjtSetLastToken(getToken(0));
             sym.PutTypeName(t.image);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void elaborated_type_specifier(StringBuffer typedefSource) throws ParseException {
 /*@bgen(jjtree) elaborated_type_specifier */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTELABORATED_TYPE_SPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String name;
  Scope sc = null;
  boolean closeReqd = false;
  String newName = "";
    try {
      switch (jj_nt.kind) {
      case ENUM:
        jj_consume_token(ENUM);
        break;
      case CLASS:
        jj_consume_token(CLASS);
        break;
      case STRUCT:
        jj_consume_token(STRUCT);
        break;
      case UNION:
        jj_consume_token(UNION);
        break;
      case TYPENAME:
        jj_consume_token(TYPENAME);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      name = qualified_id();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
        if (isFriend == true)
           name = "::"+name;

        if (typedefSource != null)
           typedefSource.append(name);

        sc = sym.GetScopeOfFullyScopedName(name);
        if (closeReqd = (sc != null && sc != sym.GetCurScope()))
           sym.OpenScope(sc);

        if (name.lastIndexOf("::") != -1)
          name = name.substring(name.lastIndexOf("::") + 2);

        sym.PutTypeName(name);
        if (closeReqd)
           sym.CloseScope();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void enumerator_list() throws ParseException {
 /*@bgen(jjtree) enumerator_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTENUMERATOR_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      enumerator();
      label_22:
      while (true) {
        if (jj_2_77(2)) {
          ;
        } else {
          break label_22;
        }
        jj_consume_token(COMMA);
        enumerator();
      }
      switch (jj_nt.kind) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void enumerator() throws ParseException {
 /*@bgen(jjtree) enumerator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTENUMERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ID);
      switch (jj_nt.kind) {
      case ASSIGNEQUAL:
        jj_consume_token(ASSIGNEQUAL);
        constant_expression();
        break;
      default:
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void ptr_operator() throws ParseException {
 /*@bgen(jjtree) ptr_operator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTPTR_OPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case AMPERSAND:
        jj_consume_token(AMPERSAND);
        cv_qualifier_seq();
        break;
      case STAR:
        jj_consume_token(STAR);
        cv_qualifier_seq();
        break;
      case SCOPE:
      case ID:
        ptr_to_member();
        cv_qualifier_seq();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void cv_qualifier_seq() throws ParseException {
 /*@bgen(jjtree) cv_qualifier_seq */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCV_QUALIFIER_SEQ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_80(2)) {
        switch (jj_nt.kind) {
        case CONST:
          jj_consume_token(CONST);
          if (jj_2_78(2)) {
            jj_consume_token(VOLATILE);
          } else {
            ;
          }
          break;
        case VOLATILE:
          jj_consume_token(VOLATILE);
          if (jj_2_79(2)) {
            jj_consume_token(CONST);
          } else {
            ;
          }
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public String declarator() throws ParseException {
 /*@bgen(jjtree) declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String name;
    try {
      if (jj_2_81(2147483647)) {
        ptr_operator();
        name = declarator();
      } else {
        switch (jj_nt.kind) {
        case LPARENTHESIS:
        case SCOPE:
        case TILDE:
        case OPERATOR:
        case ID:
          name = direct_declarator();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    {if (true) return name;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public String direct_declarator() throws ParseException {
 /*@bgen(jjtree) direct_declarator */
   CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDIRECT_DECLARATOR);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));String name;
   Token t;
    try {
      if (jj_2_85(2)) {
        jj_consume_token(TILDE);
        t = jj_consume_token(ID);
        if (jj_2_82(2)) {
          declarator_suffixes();
        } else {
          ;
        }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
          {if (true) return "~" + t.image;}
      } else {
        switch (jj_nt.kind) {
        case LPARENTHESIS:
          jj_consume_token(LPARENTHESIS);
          name = declarator();
          jj_consume_token(RPARENTHESIS);
          if (jj_2_83(2)) {
            declarator_suffixes();
          } else {
            ;
          }
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
          {if (true) return name;}
          break;
        case SCOPE:
        case OPERATOR:
        case ID:
          name = qualified_id();
          if (jj_2_84(5)) {
            declarator_suffixes();
          } else {
            ;
          }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      {if (true) return name;}
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public void declarator_suffixes() throws ParseException {
 /*@bgen(jjtree) declarator_suffixes */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDECLARATOR_SUFFIXES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case LSQUAREBRACKET:
        label_23:
        while (true) {
          jj_consume_token(LSQUAREBRACKET);
          if (jj_2_86(1)) {
            constant_expression();
          } else {
            ;
          }
          jj_consume_token(RSQUAREBRACKET);
          switch (jj_nt.kind) {
          case LSQUAREBRACKET:
            ;
            break;
          default:
            break label_23;
          }
        }
        break;
      case LPARENTHESIS:
        jj_consume_token(LPARENTHESIS);
        if (jj_2_87(1)) {
          parameter_list();
        } else {
          ;
        }
        jj_consume_token(RPARENTHESIS);
        if (jj_2_88(2)) {
          type_qualifier();
        } else {
          ;
        }
        switch (jj_nt.kind) {
        case THROW:
          exception_spec();
          break;
        default:
          ;
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

/**
 * Used only for lookahead.
 */
  final public void function_declarator_lookahead() throws ParseException {
 /*@bgen(jjtree) function_declarator_lookahead */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTFUNCTION_DECLARATOR_LOOKAHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_24:
      while (true) {
        if (jj_2_89(2)) {
          ;
        } else {
          break label_24;
        }
        ptr_operator();
      }
      switch (jj_nt.kind) {
      case SCOPE:
      case OPERATOR:
      case ID:
        qualified_id();
        jj_consume_token(LPARENTHESIS);
        switch (jj_nt.kind) {
        case RPARENTHESIS:
          jj_consume_token(RPARENTHESIS);
          break;
        default:
          if (jj_2_90(1)) {
            parameter_list();
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        if (IsMethod()) {
          qualified_id();
          jj_consume_token(LPARENTHESIS);
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public Scope function_declarator(boolean isTypedef) throws ParseException {
 /*@bgen(jjtree) function_declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTFUNCTION_DECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Scope sc = null;
    try {
      if (jj_2_91(2147483647)) {
        ptr_operator();
        sc = function_declarator(isTypedef);
      } else {
        switch (jj_nt.kind) {
        case SCOPE:
        case OPERATOR:
        case ID:
          sc = function_direct_declarator(isTypedef);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    {if (true) return sc;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Scope function_direct_declarator(boolean isTypedef) throws ParseException {
 /*@bgen(jjtree) function_direct_declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTFUNCTION_DIRECT_DECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String name;
  Scope sc = null;
  boolean closeReqd = false;
    try {
      name = qualified_id();
        if (name.indexOf("::") != -1) {
           sc = sym.GetScopeOfFullyScopedName(name);
           if (closeReqd = (sc != null && sc != sym.GetCurScope()))
              sym.OpenScope(sc);
        }
      jj_consume_token(LPARENTHESIS);
      if (jj_2_92(1)) {
        parameter_list();
      } else {
        ;
      }
      jj_consume_token(RPARENTHESIS);
      if (jj_2_93(2)) {
        type_qualifier();
      } else {
        ;
      }
      switch (jj_nt.kind) {
      case THROW:
        exception_spec();
        break;
      default:
        ;
      }
      if (jj_2_94(2147483647)) {
        jj_consume_token(ASSIGNEQUAL);
        jj_consume_token(OCTALINT);
      } else {
        ;
      }
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
       jjtn000.jjtSetLastToken(getToken(0));
        if (closeReqd)
           sym.CloseScope();

        if (isTypedef)
           sym.PutTypeName(name);

        {if (true) return sc;}
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtn000.jjtSetLastToken(getToken(0));
       }
    }
    throw new Error("Missing return statement in function");
  }

  final public void dtor_ctor_decl_spec() throws ParseException {
 /*@bgen(jjtree) dtor_ctor_decl_spec */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDTOR_CTOR_DECL_SPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_25:
      while (true) {
        switch (jj_nt.kind) {
        case FRIEND:
        case INLINE:
        case EXPLICIT:
        case VIRTUAL:
          ;
          break;
        default:
          break label_25;
        }
        switch (jj_nt.kind) {
        case VIRTUAL:
          jj_consume_token(VIRTUAL);
          break;
        case INLINE:
          jj_consume_token(INLINE);
          break;
        case EXPLICIT:
          jj_consume_token(EXPLICIT);
          break;
        case FRIEND:
          jj_consume_token(FRIEND);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void dtor_definition() throws ParseException {
 /*@bgen(jjtree) dtor_definition */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDTOR_DEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Scope sc = null;
  boolean closeReqd = false;
    try {
      dtor_ctor_decl_spec();
      sc = dtor_declarator();
      switch (jj_nt.kind) {
      case ASSIGNEQUAL:
        jj_consume_token(ASSIGNEQUAL);
        jj_consume_token(OCTALINT);
        break;
      default:
        ;
      }
        if (closeReqd = (sc != null && sc != sym.GetCurScope()))
           sym.OpenScope(sc);
      switch (jj_nt.kind) {
      case THROW:
        exception_spec();
        break;
      default:
        ;
      }
      switch (jj_nt.kind) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
           sym.ClearSuspendedVarName();
        break;
      case TRY:
        jj_consume_token(TRY);
        compound_statement();
        label_26:
        while (true) {
          handler();
          switch (jj_nt.kind) {
          case CATCH:
          case 148:
            ;
            break;
          default:
            break label_26;
          }
        }
        break;
      case LCURLYBRACE:
        compound_statement();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtn000.jjtSetLastToken(getToken(0));
     if (closeReqd) sym.CloseScope();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void ctor_definition() throws ParseException {
 /*@bgen(jjtree) ctor_definition */
   CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCTOR_DEFINITION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));Scope sc = null;
   boolean closeReqd = false;
    try {
      dtor_ctor_decl_spec();
      sc = ctor_declarator();
      if (closeReqd = (sc != null && sc != sym.GetCurScope()))
         sym.OpenScope(sc);
      switch (jj_nt.kind) {
      case THROW:
        exception_spec();
        break;
      default:
        ;
      }
      switch (jj_nt.kind) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
           sym.ClearSuspendedVarName();
        break;
      case LCURLYBRACE:
      case COLON:
        switch (jj_nt.kind) {
        case COLON:
          ctor_initializer();
          break;
        default:
          ;
        }
        compound_statement();
        break;
      case TRY:
        jj_consume_token(TRY);
        switch (jj_nt.kind) {
        case COLON:
          ctor_initializer();
          break;
        default:
          ;
        }
        compound_statement();
        label_27:
        while (true) {
          handler();
          switch (jj_nt.kind) {
          case CATCH:
          case 148:
            ;
            break;
          default:
            break label_27;
          }
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
     jjtn000.jjtSetLastToken(getToken(0));
     if (closeReqd) sym.CloseScope();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void ctor_declarator_lookahead() throws ParseException {
 /*@bgen(jjtree) ctor_declarator_lookahead */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCTOR_DECLARATOR_LOOKAHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (IsCtor()) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      qualified_id();
      jj_consume_token(LPARENTHESIS);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void dtor_declarator_lookahead() throws ParseException {
 /*@bgen(jjtree) dtor_declarator_lookahead */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDTOR_DECLARATOR_LOOKAHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (IsCtor()) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      dtor_qualified_id();
      jj_consume_token(LPARENTHESIS);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public Scope ctor_declarator() throws ParseException {
 /*@bgen(jjtree) ctor_declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCTOR_DECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String name;
  Scope sc = null;
  boolean closeReqd = false;
    try {
      if (IsCtor()) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      name = qualified_id();
        sc = sym.GetScopeOfFullyScopedName(name);

        if (closeReqd = (sc != null && sc != sym.GetCurScope()))
           sym.OpenScope(sc);
      jj_consume_token(LPARENTHESIS);
      if (jj_2_95(2)) {
        parameter_list();
      } else {
        ;
      }
      jj_consume_token(RPARENTHESIS);
      if (jj_2_96(2)) {
        exception_spec();
      } else {
        ;
      }
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
       jjtn000.jjtSetLastToken(getToken(0));
        if (closeReqd)
           sym.CloseScope();

        {if (true) return sc;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public Scope dtor_declarator() throws ParseException {
 /*@bgen(jjtree) dtor_declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDTOR_DECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String name;
  Scope sc = null;
  boolean closeReqd = false;
    try {
      if (IsCtor()) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      name = dtor_qualified_id();
        sc = sym.GetScopeOfFullyScopedName(name);

        if (closeReqd = (sc != null && sc != sym.GetCurScope()))
           sym.OpenScope(sc);
      jj_consume_token(LPARENTHESIS);
      if (jj_2_97(2)) {
        parameter_list();
      } else {
        ;
      }
      jj_consume_token(RPARENTHESIS);
      if (jj_2_98(2)) {
        exception_spec();
      } else {
        ;
      }
       jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;
       jjtn000.jjtSetLastToken(getToken(0));
        if (closeReqd)
           sym.CloseScope();

        {if (true) return sc;}
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ctor_initializer() throws ParseException {
 /*@bgen(jjtree) ctor_initializer */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCTOR_INITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(COLON);
      superclass_init();
      label_28:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_28;
        }
        jj_consume_token(COMMA);
        superclass_init();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void superclass_init() throws ParseException {
 /*@bgen(jjtree) superclass_init */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSUPERCLASS_INIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      qualified_id();
      jj_consume_token(LPARENTHESIS);
      if (jj_2_99(1)) {
        expression_list();
      } else {
        ;
      }
      jj_consume_token(RPARENTHESIS);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void parameter_list() throws ParseException {
 /*@bgen(jjtree) parameter_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTPARAMETER_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_101(1)) {
        parameter_declaration_list();
        if (jj_2_100(2)) {
          switch (jj_nt.kind) {
          case COMMA:
            jj_consume_token(COMMA);
            break;
          default:
            ;
          }
          jj_consume_token(ELLIPSIS);
        } else {
          ;
        }
      } else {
        switch (jj_nt.kind) {
        case ELLIPSIS:
          jj_consume_token(ELLIPSIS);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void parameter_declaration_list() throws ParseException {
 /*@bgen(jjtree) parameter_declaration_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTPARAMETER_DECLARATION_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      parameter_declaration();
      label_29:
      while (true) {
        if (jj_2_102(2)) {
          ;
        } else {
          break label_29;
        }
        jj_consume_token(COMMA);
        parameter_declaration();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void parameter_declaration() throws ParseException {
 /*@bgen(jjtree) parameter_declaration */
   CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTPARAMETER_DECLARATION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));String name;
    try {
      declaration_specifiers(null);
      if (jj_2_103(2147483647)) {
        name = declarator();
       if (name.indexOf("::") == -1)
          sym.AddSuspendedVarName(name);
      } else {
        abstract_declarator();
      }
      switch (jj_nt.kind) {
      case ASSIGNEQUAL:
        jj_consume_token(ASSIGNEQUAL);
        assignment_expression();
        break;
      default:
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void initializer() throws ParseException {
 /*@bgen(jjtree) initializer */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_105(3)) {
        jj_consume_token(LCURLYBRACE);
        initializer();
        label_30:
        while (true) {
          if (jj_2_104(2)) {
            ;
          } else {
            break label_30;
          }
          jj_consume_token(COMMA);
          initializer();
        }
        switch (jj_nt.kind) {
        case COMMA:
          jj_consume_token(COMMA);
          break;
        default:
          ;
        }
        jj_consume_token(RCURLYBRACE);
      } else if (jj_2_106(1)) {
        assignment_expression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void type_name() throws ParseException {
 /*@bgen(jjtree) type_name */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTYPE_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      declaration_specifiers(null);
      abstract_declarator();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void abstract_declarator() throws ParseException {
 /*@bgen(jjtree) abstract_declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTABSTRACT_DECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_108(2)) {
        switch (jj_nt.kind) {
        case LPARENTHESIS:
          jj_consume_token(LPARENTHESIS);
          abstract_declarator();
          jj_consume_token(RPARENTHESIS);
          label_31:
          while (true) {
            abstract_declarator_suffix();
            switch (jj_nt.kind) {
            case LSQUAREBRACKET:
            case LPARENTHESIS:
              ;
              break;
            default:
              break label_31;
            }
          }
          break;
        case LSQUAREBRACKET:
          label_32:
          while (true) {
            jj_consume_token(LSQUAREBRACKET);
            if (jj_2_107(1)) {
              expression();
            } else {
              ;
            }
            jj_consume_token(RSQUAREBRACKET);
            switch (jj_nt.kind) {
            case LSQUAREBRACKET:
              ;
              break;
            default:
              break label_32;
            }
          }
          break;
        case SCOPE:
        case AMPERSAND:
        case STAR:
        case ID:
          ptr_operator();
          abstract_declarator();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void abstract_declarator_suffix() throws ParseException {
 /*@bgen(jjtree) abstract_declarator_suffix */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTABSTRACT_DECLARATOR_SUFFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case LSQUAREBRACKET:
        jj_consume_token(LSQUAREBRACKET);
        if (jj_2_109(1)) {
          expression();
        } else {
          ;
        }
        jj_consume_token(RSQUAREBRACKET);
        break;
      case LPARENTHESIS:
        jj_consume_token(LPARENTHESIS);
        if (jj_2_110(1)) {
          parameter_list();
        } else {
          ;
        }
        jj_consume_token(RPARENTHESIS);
        cv_qualifier_seq();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void template_head() throws ParseException {
 /*@bgen(jjtree) template_head */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTEMPLATE_HEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case EXPORT:
        jj_consume_token(EXPORT);
        break;
      default:
        ;
      }
      jj_consume_token(TEMPLATE);
      jj_consume_token(LESSTHAN);
      if (jj_2_111(1)) {
        template_parameter_list();
      } else {
        ;
      }
      jj_consume_token(GREATERTHAN);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void template_parameter_list() throws ParseException {
 /*@bgen(jjtree) template_parameter_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTEMPLATE_PARAMETER_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      template_parameter();
      label_33:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_33;
        }
        jj_consume_token(COMMA);
        template_parameter();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void template_parameter() throws ParseException {
 /*@bgen(jjtree) template_parameter */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTEMPLATE_PARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      if (jj_2_113(3)) {
        switch (jj_nt.kind) {
        case CLASS:
          jj_consume_token(CLASS);
          break;
        case TYPENAME:
          jj_consume_token(TYPENAME);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        t = jj_consume_token(ID);
      sym.PutTypeName(t.image);
        switch (jj_nt.kind) {
        case ASSIGNEQUAL:
          jj_consume_token(ASSIGNEQUAL);
          if (jj_2_112(3)) {
            type_id();
          } else {
            switch (jj_nt.kind) {
            case ENUM:
            case STRUCT:
            case CLASS:
            case TYPENAME:
            case UNION:
              elaborated_type_id();
              break;
            default:
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        default:
          ;
        }
      } else if (jj_2_114(1)) {
        parameter_declaration();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void template_id() throws ParseException {
 /*@bgen(jjtree) template_id */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTEMPLATE_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ID);
      jj_consume_token(LESSTHAN);
      if (jj_2_115(1)) {
        template_argument_list();
      } else {
        ;
      }
      jj_consume_token(GREATERTHAN);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void template_argument_list() throws ParseException {
 /*@bgen(jjtree) template_argument_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTEMPLATE_ARGUMENT_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      template_argument();
      label_34:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_34;
        }
        jj_consume_token(COMMA);
        template_argument();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void template_argument() throws ParseException {
 /*@bgen(jjtree) template_argument */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTEMPLATE_ARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_117(3)) {
        type_name();
      } else if (jj_2_118(1)) {
        shift_expression();
        label_35:
        while (true) {
          if (jj_2_116(2)) {
            ;
          } else {
            break label_35;
          }
          switch (jj_nt.kind) {
          case LESSTHANOREQUALTO:
            jj_consume_token(LESSTHANOREQUALTO);
            break;
          case GREATERTHANOREQUALTO:
            jj_consume_token(GREATERTHANOREQUALTO);
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
          shift_expression();
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void explicit_instantiation() throws ParseException {
 /*@bgen(jjtree) explicit_instantiation */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEXPLICIT_INSTANTIATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(TEMPLATE);
      declaration();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void explicit_specialization() throws ParseException {
 /*@bgen(jjtree) explicit_specialization */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEXPLICIT_SPECIALIZATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(TEMPLATE);
      jj_consume_token(LESSTHAN);
      jj_consume_token(GREATERTHAN);
      declaration();
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void statement_list() throws ParseException {
 /*@bgen(jjtree) statement_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSTATEMENT_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_36:
      while (true) {
        statement();
        if (jj_2_119(2147483647)) {
          ;
        } else {
          break label_36;
        }
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void statement() throws ParseException {
 /*@bgen(jjtree) statement */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_120(2147483647)) {
        declaration();
      } else if (jj_2_121(2147483647)) {
        expression();
        jj_consume_token(SEMICOLON);
      } else {
        switch (jj_nt.kind) {
        case LCURLYBRACE:
          compound_statement();
          break;
        case IF:
        case SWITCH:
          selection_statement();
          break;
        case BREAK:
        case CONTINUE:
        case GOTO:
        case RETURN:
          jump_statement();
          break;
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        case TRY:
          try_block();
          break;
        default:
          if (jj_2_122(2)) {
            labeled_statement();
          } else {
            switch (jj_nt.kind) {
            case DO:
            case FOR:
            case WHILE:
              iteration_statement();
              break;
            default:
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void labeled_statement() throws ParseException {
 /*@bgen(jjtree) labeled_statement */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTLABELED_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case ID:
        jj_consume_token(ID);
        jj_consume_token(COLON);
        statement();
        break;
      case CASE:
        jj_consume_token(CASE);
        constant_expression();
        jj_consume_token(COLON);
        statement();
        break;
      case _DEFAULT:
        jj_consume_token(_DEFAULT);
        jj_consume_token(COLON);
        statement();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void compound_statement() throws ParseException {
 /*@bgen(jjtree) compound_statement */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCOMPOUND_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LCURLYBRACE);
     sym.OpenScope(null, false, false);
     sym.PutSuspendedVarName();
     sym.ClearSuspendedVarName();
      if (jj_2_123(1)) {
        statement_list();
      } else {
        ;
      }
     sym.CloseScope();
      jj_consume_token(RCURLYBRACE);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void selection_statement() throws ParseException {
 /*@bgen(jjtree) selection_statement */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSELECTION_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case IF:
        jj_consume_token(IF);
        jj_consume_token(LPARENTHESIS);
        if (jj_2_124(2147483647)) {
          declaration_in_condition();
        } else if (jj_2_125(1)) {
          expression();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(RPARENTHESIS);
        statement();
        if (jj_2_126(2)) {
          jj_consume_token(ELSE);
          statement();
        } else {
          ;
        }
        break;
      case SWITCH:
        jj_consume_token(SWITCH);
        jj_consume_token(LPARENTHESIS);
        if (jj_2_127(2147483647)) {
          declaration_in_condition();
        } else if (jj_2_128(1)) {
          expression();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(RPARENTHESIS);
        statement();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void iteration_statement() throws ParseException {
 /*@bgen(jjtree) iteration_statement */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTITERATION_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case WHILE:
        jj_consume_token(WHILE);
        jj_consume_token(LPARENTHESIS);
        if (jj_2_129(2147483647)) {
          declaration_in_condition();
        } else if (jj_2_130(1)) {
          expression();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(RPARENTHESIS);
        statement();
        break;
      case DO:
        jj_consume_token(DO);
        statement();
        jj_consume_token(WHILE);
        jj_consume_token(LPARENTHESIS);
        if (jj_2_131(2147483647)) {
          declaration_in_condition();
        } else if (jj_2_132(1)) {
          expression();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(RPARENTHESIS);
        jj_consume_token(SEMICOLON);
        break;
      case FOR:
        jj_consume_token(FOR);
        jj_consume_token(LPARENTHESIS);
        if (jj_2_133(3)) {
          declaration();
        } else if (jj_2_134(1)) {
          expression();
          jj_consume_token(SEMICOLON);
        } else {
          switch (jj_nt.kind) {
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        if (jj_2_135(1)) {
          expression();
        } else {
          ;
        }
        jj_consume_token(SEMICOLON);
        if (jj_2_136(1)) {
          expression();
        } else {
          ;
        }
        jj_consume_token(RPARENTHESIS);
        statement();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void jump_statement() throws ParseException {
 /*@bgen(jjtree) jump_statement */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTJUMP_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case GOTO:
        jj_consume_token(GOTO);
        jj_consume_token(ID);
        jj_consume_token(SEMICOLON);
        break;
      case CONTINUE:
        jj_consume_token(CONTINUE);
        jj_consume_token(SEMICOLON);
        break;
      case BREAK:
        jj_consume_token(BREAK);
        jj_consume_token(SEMICOLON);
        break;
      case RETURN:
        jj_consume_token(RETURN);
        if (jj_2_137(1)) {
          expression();
        } else {
          ;
        }
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void try_block() throws ParseException {
 /*@bgen(jjtree) try_block */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTRY_BLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(TRY);
      compound_statement();
      label_37:
      while (true) {
        handler();
        switch (jj_nt.kind) {
        case CATCH:
        case 148:
          ;
          break;
        default:
          break label_37;
        }
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void handler() throws ParseException {
 /*@bgen(jjtree) handler */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTHANDLER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case CATCH:
        jj_consume_token(CATCH);
        jj_consume_token(LPARENTHESIS);
        exception_declaration();
        jj_consume_token(RPARENTHESIS);
        compound_statement();
        break;
      case 148:
        jj_consume_token(148);
        compound_statement();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void exception_declaration() throws ParseException {
 /*@bgen(jjtree) exception_declaration */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEXCEPTION_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_138(1)) {
        parameter_declaration_list();
      } else {
        switch (jj_nt.kind) {
        case ELLIPSIS:
          jj_consume_token(ELLIPSIS);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtn000.jjtSetLastToken(getToken(0));
       }
    }
  }

  final public void throw_expression() throws ParseException {
 /*@bgen(jjtree) throw_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTHROW_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(THROW);
      if (jj_2_139(2)) {
        assignment_expression();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void expression() throws ParseException {
 /*@bgen(jjtree) expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      assignment_expression();
      label_38:
      while (true) {
        if (jj_2_140(2)) {
          ;
        } else {
          break label_38;
        }
        jj_consume_token(COMMA);
        assignment_expression();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void assignment_expression() throws ParseException {
 /*@bgen(jjtree) assignment_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTASSIGNMENT_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_141(1)) {
        conditional_expression();
        switch (jj_nt.kind) {
        case ASSIGNEQUAL:
        case TIMESEQUAL:
        case DIVIDEEQUAL:
        case MODEQUAL:
        case PLUSEQUAL:
        case MINUSEQUAL:
        case SHIFTLEFTEQUAL:
        case SHIFTRIGHTEQUAL:
        case BITWISEANDEQUAL:
        case BITWISEXOREQUAL:
        case BITWISEOREQUAL:
          switch (jj_nt.kind) {
          case ASSIGNEQUAL:
            jj_consume_token(ASSIGNEQUAL);
            break;
          case TIMESEQUAL:
            jj_consume_token(TIMESEQUAL);
            break;
          case DIVIDEEQUAL:
            jj_consume_token(DIVIDEEQUAL);
            break;
          case MODEQUAL:
            jj_consume_token(MODEQUAL);
            break;
          case PLUSEQUAL:
            jj_consume_token(PLUSEQUAL);
            break;
          case MINUSEQUAL:
            jj_consume_token(MINUSEQUAL);
            break;
          case SHIFTLEFTEQUAL:
            jj_consume_token(SHIFTLEFTEQUAL);
            break;
          case SHIFTRIGHTEQUAL:
            jj_consume_token(SHIFTRIGHTEQUAL);
            break;
          case BITWISEANDEQUAL:
            jj_consume_token(BITWISEANDEQUAL);
            break;
          case BITWISEXOREQUAL:
            jj_consume_token(BITWISEXOREQUAL);
            break;
          case BITWISEOREQUAL:
            jj_consume_token(BITWISEOREQUAL);
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
          assignment_expression();
          break;
        default:
          ;
        }
      } else {
        switch (jj_nt.kind) {
        case THROW:
          throw_expression();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void conditional_expression() throws ParseException {
 /*@bgen(jjtree) conditional_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCONDITIONAL_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      logical_or_expression();
      switch (jj_nt.kind) {
      case QUESTIONMARK:
        jj_consume_token(QUESTIONMARK);
        expression();
        jj_consume_token(COLON);
        conditional_expression();
        break;
      default:
        ;
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void constant_expression() throws ParseException {
 /*@bgen(jjtree) constant_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCONSTANT_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      conditional_expression();
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtn000.jjtSetLastToken(getToken(0));
       }
    }
  }

  final public void logical_or_expression() throws ParseException {
 /*@bgen(jjtree) logical_or_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTLOGICAL_OR_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      logical_and_expression();
      label_39:
      while (true) {
        switch (jj_nt.kind) {
        case OR:
          ;
          break;
        default:
          break label_39;
        }
        jj_consume_token(OR);
        logical_and_expression();
      }
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtn000.jjtSetLastToken(getToken(0));
       }
    }
  }

  final public void logical_and_expression() throws ParseException {
 /*@bgen(jjtree) logical_and_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTLOGICAL_AND_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      inclusive_or_expression();
      label_40:
      while (true) {
        switch (jj_nt.kind) {
        case AND:
          ;
          break;
        default:
          break label_40;
        }
        jj_consume_token(AND);
        inclusive_or_expression();
      }
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtn000.jjtSetLastToken(getToken(0));
       }
    }
  }

  final public void inclusive_or_expression() throws ParseException {
 /*@bgen(jjtree) inclusive_or_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTINCLUSIVE_OR_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      exclusive_or_expression();
      label_41:
      while (true) {
        switch (jj_nt.kind) {
        case BITWISEOR:
          ;
          break;
        default:
          break label_41;
        }
        jj_consume_token(BITWISEOR);
        exclusive_or_expression();
      }
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtn000.jjtSetLastToken(getToken(0));
       }
    }
  }

  final public void exclusive_or_expression() throws ParseException {
 /*@bgen(jjtree) exclusive_or_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEXCLUSIVE_OR_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      and_expression();
      label_42:
      while (true) {
        switch (jj_nt.kind) {
        case BITWISEXOR:
          ;
          break;
        default:
          break label_42;
        }
        jj_consume_token(BITWISEXOR);
        and_expression();
      }
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtn000.jjtSetLastToken(getToken(0));
       }
    }
  }

  final public void and_expression() throws ParseException {
 /*@bgen(jjtree) and_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTAND_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      equality_expression();
      label_43:
      while (true) {
        if (jj_2_142(2)) {
          ;
        } else {
          break label_43;
        }
        jj_consume_token(AMPERSAND);
        equality_expression();
      }
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtn000.jjtSetLastToken(getToken(0));
       }
    }
  }

  final public void equality_expression() throws ParseException {
 /*@bgen(jjtree) equality_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEQUALITY_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      relational_expression();
      label_44:
      while (true) {
        switch (jj_nt.kind) {
        case EQUAL:
        case NOTEQUAL:
          ;
          break;
        default:
          break label_44;
        }
        switch (jj_nt.kind) {
        case NOTEQUAL:
          jj_consume_token(NOTEQUAL);
          break;
        case EQUAL:
          jj_consume_token(EQUAL);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        relational_expression();
      }
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtn000.jjtSetLastToken(getToken(0));
       }
    }
  }

  final public void relational_expression() throws ParseException {
 /*@bgen(jjtree) relational_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTRELATIONAL_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      shift_expression();
      label_45:
      while (true) {
        if (jj_2_143(2)) {
          ;
        } else {
          break label_45;
        }
        switch (jj_nt.kind) {
        case LESSTHAN:
          jj_consume_token(LESSTHAN);
          break;
        case GREATERTHAN:
          jj_consume_token(GREATERTHAN);
          break;
        case LESSTHANOREQUALTO:
          jj_consume_token(LESSTHANOREQUALTO);
          break;
        case GREATERTHANOREQUALTO:
          jj_consume_token(GREATERTHANOREQUALTO);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        shift_expression();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void shift_expression() throws ParseException {
 /*@bgen(jjtree) shift_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSHIFT_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      additive_expression();
      label_46:
      while (true) {
        switch (jj_nt.kind) {
        case SHIFTLEFT:
        case SHIFTRIGHT:
          ;
          break;
        default:
          break label_46;
        }
        switch (jj_nt.kind) {
        case SHIFTLEFT:
          jj_consume_token(SHIFTLEFT);
          break;
        case SHIFTRIGHT:
          jj_consume_token(SHIFTRIGHT);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        additive_expression();
      }
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtn000.jjtSetLastToken(getToken(0));
       }
    }
  }

  final public void additive_expression() throws ParseException {
 /*@bgen(jjtree) additive_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTADDITIVE_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      multiplicative_expression();
      label_47:
      while (true) {
        if (jj_2_144(2)) {
          ;
        } else {
          break label_47;
        }
        switch (jj_nt.kind) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        multiplicative_expression();
      }
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtn000.jjtSetLastToken(getToken(0));
       }
    }
  }

  final public void multiplicative_expression() throws ParseException {
 /*@bgen(jjtree) multiplicative_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTMULTIPLICATIVE_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      pm_expression();
      label_48:
      while (true) {
        if (jj_2_145(2)) {
          ;
        } else {
          break label_48;
        }
        switch (jj_nt.kind) {
        case STAR:
          jj_consume_token(STAR);
          break;
        case DIVIDE:
          jj_consume_token(DIVIDE);
          break;
        case MOD:
          jj_consume_token(MOD);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        pm_expression();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void pm_expression() throws ParseException {
 /*@bgen(jjtree) pm_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTPM_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      cast_expression();
      label_49:
      while (true) {
        switch (jj_nt.kind) {
        case DOTSTAR:
        case ARROWSTAR:
          ;
          break;
        default:
          break label_49;
        }
        switch (jj_nt.kind) {
        case DOTSTAR:
          jj_consume_token(DOTSTAR);
          break;
        case ARROWSTAR:
          jj_consume_token(ARROWSTAR);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        cast_expression();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void cast_expression() throws ParseException {
 /*@bgen(jjtree) cast_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCAST_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_146(2147483647)) {
        jj_consume_token(LPARENTHESIS);
        type_name();
        jj_consume_token(RPARENTHESIS);
        cast_expression();
      } else if (jj_2_147(1)) {
        unary_expression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
  }

  final public void unary_expression() throws ParseException {
 /*@bgen(jjtree) unary_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTUNARY_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case PLUSPLUS:
        jj_consume_token(PLUSPLUS);
        cast_expression();
        break;
      case MINUSMINUS:
        jj_consume_token(MINUSMINUS);
        cast_expression();
        break;
      default:
        if (jj_2_150(3)) {
          unary_operator();
          cast_expression();
        } else {
          switch (jj_nt.kind) {
          case SIZEOF:
            jj_consume_token(SIZEOF);
            if (jj_2_148(2147483647)) {
              jj_consume_token(LPARENTHESIS);
              type_name();
              jj_consume_token(RPARENTHESIS);
            } else if (jj_2_149(1)) {
              unary_expression();
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            if (jj_2_151(1)) {
              postfix_expression();
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtn000.jjtSetLastToken(getToken(0));
       }
    }
  }

  final public void new_expression() throws ParseException {
 /*@bgen(jjtree) new_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTNEW_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_152(2147483647)) {
        jj_consume_token(SCOPE);
      } else {
        ;
      }
      jj_consume_token(NEW);
      if (jj_2_156(2147483647)) {
        jj_consume_token(LPARENTHESIS);
        type_name();
        jj_consume_token(RPARENTHESIS);
      } else if (jj_2_157(1)) {
        if (jj_2_153(2147483647)) {
          jj_consume_token(LPARENTHESIS);
          expression_list();
          jj_consume_token(RPARENTHESIS);
        } else {
          ;
        }
        if (jj_2_154(2147483647)) {
          jj_consume_token(LPARENTHESIS);
          type_name();
          jj_consume_token(RPARENTHESIS);
        } else if (jj_2_155(2147483647)) {
          new_type_id();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_158(2147483647)) {
        new_initializer();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void new_type_id() throws ParseException {
 /*@bgen(jjtree) new_type_id */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTNEW_TYPE_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      declaration_specifiers(null);
      if (jj_2_159(2147483647)) {
        new_declarator();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void new_declarator() throws ParseException {
 /*@bgen(jjtree) new_declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTNEW_DECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case LSQUAREBRACKET:
        direct_new_declarator();
        break;
      case SCOPE:
      case AMPERSAND:
      case STAR:
      case ID:
        ptr_operator();
        cv_qualifier_seq();
        if (jj_2_160(2)) {
          new_declarator();
        } else {
          ;
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtn000.jjtSetLastToken(getToken(0));
       }
    }
  }

  final public void direct_new_declarator() throws ParseException {
 /*@bgen(jjtree) direct_new_declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDIRECT_NEW_DECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_50:
      while (true) {
        jj_consume_token(LSQUAREBRACKET);
        expression();
        jj_consume_token(RSQUAREBRACKET);
        if (jj_2_161(2)) {
          ;
        } else {
          break label_50;
        }
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void new_initializer() throws ParseException {
 /*@bgen(jjtree) new_initializer */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTNEW_INITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LPARENTHESIS);
      if (jj_2_162(1)) {
        expression_list();
      } else {
        ;
      }
      jj_consume_token(RPARENTHESIS);
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtn000.jjtSetLastToken(getToken(0));
       }
    }
  }

  final public void delete_expression() throws ParseException {
 /*@bgen(jjtree) delete_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDELETE_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case SCOPE:
        jj_consume_token(SCOPE);
        break;
      default:
        ;
      }
      jj_consume_token(DELETE);
      switch (jj_nt.kind) {
      case LSQUAREBRACKET:
        jj_consume_token(LSQUAREBRACKET);
        jj_consume_token(RSQUAREBRACKET);
        break;
      default:
        ;
      }
      cast_expression();
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtn000.jjtSetLastToken(getToken(0));
       }
    }
  }

  final public void unary_operator() throws ParseException {
 /*@bgen(jjtree) unary_operator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTUNARY_OPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case AMPERSAND:
        jj_consume_token(AMPERSAND);
        break;
      case STAR:
        jj_consume_token(STAR);
        break;
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      case TILDE:
        jj_consume_token(TILDE);
        break;
      case NOT:
        jj_consume_token(NOT);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtn000.jjtSetLastToken(getToken(0));
       }
    }
  }

  final public void postfix_expression() throws ParseException {
 /*@bgen(jjtree) postfix_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTPOSTFIX_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_168(3)) {
        switch (jj_nt.kind) {
        case LPARENTHESIS:
        case SCOPE:
        case TILDE:
        case DELETE:
        case NEW:
        case THIS:
        case OPERATOR:
        case TRUETOK:
        case FALSETOK:
        case BOOLEAN:
        case OCTALINT:
        case OCTALLONG:
        case UNSIGNED_OCTALINT:
        case UNSIGNED_OCTALLONG:
        case DECIMALINT:
        case DECIMALLONG:
        case UNSIGNED_DECIMALINT:
        case UNSIGNED_DECIMALLONG:
        case HEXADECIMALINT:
        case HEXADECIMALLONG:
        case UNSIGNED_HEXADECIMALINT:
        case UNSIGNED_HEXADECIMALLONG:
        case FLOATONE:
        case FLOATTWO:
        case CHARACTER:
        case STRING:
        case ID:
          primary_expression();
          break;
        case DYNAMIC_CAST:
          jj_consume_token(DYNAMIC_CAST);
          jj_consume_token(LESSTHAN);
          switch (jj_nt.kind) {
          case CONST:
          case VOLATILE:
            type_qualifier();
            break;
          default:
            ;
          }
          type_id();
          jj_consume_token(GREATERTHAN);
          break;
        case STATIC_CAST:
          jj_consume_token(STATIC_CAST);
          jj_consume_token(LESSTHAN);
          switch (jj_nt.kind) {
          case CONST:
          case VOLATILE:
            type_qualifier();
            break;
          default:
            ;
          }
          type_id();
          jj_consume_token(GREATERTHAN);
          break;
        case REINTERPRET_CAST:
          jj_consume_token(REINTERPRET_CAST);
          jj_consume_token(LESSTHAN);
          switch (jj_nt.kind) {
          case CONST:
          case VOLATILE:
            type_qualifier();
            break;
          default:
            ;
          }
          type_id();
          jj_consume_token(GREATERTHAN);
          break;
        case CONST_CAST:
          jj_consume_token(CONST_CAST);
          jj_consume_token(LESSTHAN);
          switch (jj_nt.kind) {
          case CONST:
          case VOLATILE:
            type_qualifier();
            break;
          default:
            ;
          }
          type_id();
          jj_consume_token(GREATERTHAN);
          break;
        case TYPEID:
          jj_consume_token(TYPEID);
          jj_consume_token(LPARENTHESIS);
          if (jj_2_163(3)) {
            switch (jj_nt.kind) {
            case CONST:
            case VOLATILE:
              type_qualifier();
              break;
            default:
              ;
            }
            type_id();
          } else if (jj_2_164(1)) {
            expression_list();
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
          jj_consume_token(RPARENTHESIS);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        label_51:
        while (true) {
          if (jj_2_165(2)) {
            ;
          } else {
            break label_51;
          }
          switch (jj_nt.kind) {
          case LSQUAREBRACKET:
            jj_consume_token(LSQUAREBRACKET);
            expression();
            jj_consume_token(RSQUAREBRACKET);
            break;
          case LPARENTHESIS:
            jj_consume_token(LPARENTHESIS);
            if (jj_2_166(1)) {
              expression_list();
            } else {
              ;
            }
            jj_consume_token(RPARENTHESIS);
            break;
          case DOT:
            jj_consume_token(DOT);
            id_expression();
            break;
          case POINTERTO:
            jj_consume_token(POINTERTO);
            id_expression();
            break;
          case PLUSPLUS:
            jj_consume_token(PLUSPLUS);
            break;
          case MINUSMINUS:
            jj_consume_token(MINUSMINUS);
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } else if (jj_2_169(1)) {
        simple_type_specifier();
        jj_consume_token(LPARENTHESIS);
        if (jj_2_167(1)) {
          expression_list();
        } else {
          ;
        }
        jj_consume_token(RPARENTHESIS);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void id_expression() throws ParseException {
 /*@bgen(jjtree) id_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTID_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_170(2147483647)) {
        scope_override();
      } else {
        ;
      }
      if (jj_2_171(2147483647)) {
        template_id();
      } else {
        switch (jj_nt.kind) {
        case OPERATOR:
          jj_consume_token(OPERATOR);
          optor();
          break;
        case TILDE:
          jj_consume_token(TILDE);
          jj_consume_token(ID);
          break;
        case ID:
          jj_consume_token(ID);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void primary_expression() throws ParseException {
 /*@bgen(jjtree) primary_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTPRIMARY_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case THIS:
        jj_consume_token(THIS);
        break;
      case STRING:
        label_52:
        while (true) {
          jj_consume_token(STRING);
          if (jj_2_172(2)) {
            ;
          } else {
            break label_52;
          }
        }
        break;
      case LPARENTHESIS:
        jj_consume_token(LPARENTHESIS);
        expression();
        jj_consume_token(RPARENTHESIS);
        break;
      default:
        if (jj_2_173(2147483647)) {
          new_expression();
        } else if (jj_2_174(2147483647)) {
          delete_expression();
        } else {
          switch (jj_nt.kind) {
          case SCOPE:
          case TILDE:
          case OPERATOR:
          case ID:
            id_expression();
            break;
          case TRUETOK:
          case FALSETOK:
          case BOOLEAN:
          case OCTALINT:
          case OCTALLONG:
          case UNSIGNED_OCTALINT:
          case UNSIGNED_OCTALLONG:
          case DECIMALINT:
          case DECIMALLONG:
          case UNSIGNED_DECIMALINT:
          case UNSIGNED_DECIMALLONG:
          case HEXADECIMALINT:
          case HEXADECIMALLONG:
          case UNSIGNED_HEXADECIMALINT:
          case UNSIGNED_HEXADECIMALLONG:
          case FLOATONE:
          case FLOATTWO:
          case CHARACTER:
            constant();
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtn000.jjtSetLastToken(getToken(0));
       }
    }
  }

  final public void expression_list() throws ParseException {
 /*@bgen(jjtree) expression_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEXPRESSION_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      assignment_expression();
      label_53:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_53;
        }
        jj_consume_token(COMMA);
        assignment_expression();
      }
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtn000.jjtSetLastToken(getToken(0));
       }
    }
  }

  final public void constant() throws ParseException {
 /*@bgen(jjtree) constant */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case OCTALINT:
        jj_consume_token(OCTALINT);
        break;
      case OCTALLONG:
        jj_consume_token(OCTALLONG);
        break;
      case DECIMALINT:
        jj_consume_token(DECIMALINT);
        break;
      case DECIMALLONG:
        jj_consume_token(DECIMALLONG);
        break;
      case HEXADECIMALINT:
        jj_consume_token(HEXADECIMALINT);
        break;
      case HEXADECIMALLONG:
        jj_consume_token(HEXADECIMALLONG);
        break;
      case BOOLEAN:
        jj_consume_token(BOOLEAN);
        break;
      case UNSIGNED_OCTALINT:
        jj_consume_token(UNSIGNED_OCTALINT);
        break;
      case UNSIGNED_OCTALLONG:
        jj_consume_token(UNSIGNED_OCTALLONG);
        break;
      case UNSIGNED_DECIMALINT:
        jj_consume_token(UNSIGNED_DECIMALINT);
        break;
      case UNSIGNED_DECIMALLONG:
        jj_consume_token(UNSIGNED_DECIMALLONG);
        break;
      case UNSIGNED_HEXADECIMALINT:
        jj_consume_token(UNSIGNED_HEXADECIMALINT);
        break;
      case UNSIGNED_HEXADECIMALLONG:
        jj_consume_token(UNSIGNED_HEXADECIMALLONG);
        break;
      case CHARACTER:
        jj_consume_token(CHARACTER);
        break;
      case FLOATONE:
        jj_consume_token(FLOATONE);
        break;
      case FLOATTWO:
        jj_consume_token(FLOATTWO);
        break;
      case TRUETOK:
        jj_consume_token(TRUETOK);
        break;
      case FALSETOK:
        jj_consume_token(FALSETOK);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtn000.jjtSetLastToken(getToken(0));
       }
    }
  }

  final public void optor() throws ParseException {
 /*@bgen(jjtree) optor */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTOPTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case NEW:
        jj_consume_token(NEW);
        if (jj_2_175(2)) {
          jj_consume_token(LSQUAREBRACKET);
          jj_consume_token(RSQUAREBRACKET);
        } else {
          ;
        }
        break;
      case DELETE:
        jj_consume_token(DELETE);
        if (jj_2_176(2)) {
          jj_consume_token(LSQUAREBRACKET);
          jj_consume_token(RSQUAREBRACKET);
        } else {
          ;
        }
        break;
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      case STAR:
        jj_consume_token(STAR);
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        break;
      case MOD:
        jj_consume_token(MOD);
        break;
      case BITWISEXOR:
        jj_consume_token(BITWISEXOR);
        break;
      case AMPERSAND:
        jj_consume_token(AMPERSAND);
        break;
      case BITWISEOR:
        jj_consume_token(BITWISEOR);
        break;
      case TILDE:
        jj_consume_token(TILDE);
        break;
      case NOT:
        jj_consume_token(NOT);
        break;
      case ASSIGNEQUAL:
        jj_consume_token(ASSIGNEQUAL);
        break;
      case LESSTHAN:
        jj_consume_token(LESSTHAN);
        break;
      case GREATERTHAN:
        jj_consume_token(GREATERTHAN);
        break;
      case PLUSEQUAL:
        jj_consume_token(PLUSEQUAL);
        break;
      case MINUSEQUAL:
        jj_consume_token(MINUSEQUAL);
        break;
      case TIMESEQUAL:
        jj_consume_token(TIMESEQUAL);
        break;
      case DIVIDEEQUAL:
        jj_consume_token(DIVIDEEQUAL);
        break;
      case MODEQUAL:
        jj_consume_token(MODEQUAL);
        break;
      case BITWISEXOREQUAL:
        jj_consume_token(BITWISEXOREQUAL);
        break;
      case BITWISEANDEQUAL:
        jj_consume_token(BITWISEANDEQUAL);
        break;
      case BITWISEOREQUAL:
        jj_consume_token(BITWISEOREQUAL);
        break;
      case SHIFTLEFT:
        jj_consume_token(SHIFTLEFT);
        break;
      case SHIFTRIGHT:
        jj_consume_token(SHIFTRIGHT);
        break;
      case SHIFTRIGHTEQUAL:
        jj_consume_token(SHIFTRIGHTEQUAL);
        break;
      case SHIFTLEFTEQUAL:
        jj_consume_token(SHIFTLEFTEQUAL);
        break;
      case EQUAL:
        jj_consume_token(EQUAL);
        break;
      case NOTEQUAL:
        jj_consume_token(NOTEQUAL);
        break;
      case LESSTHANOREQUALTO:
        jj_consume_token(LESSTHANOREQUALTO);
        break;
      case GREATERTHANOREQUALTO:
        jj_consume_token(GREATERTHANOREQUALTO);
        break;
      case AND:
        jj_consume_token(AND);
        break;
      case OR:
        jj_consume_token(OR);
        break;
      case PLUSPLUS:
        jj_consume_token(PLUSPLUS);
        break;
      case MINUSMINUS:
        jj_consume_token(MINUSMINUS);
        break;
      case COMMA:
        jj_consume_token(COMMA);
        break;
      case ARROWSTAR:
        jj_consume_token(ARROWSTAR);
        break;
      case POINTERTO:
        jj_consume_token(POINTERTO);
        break;
      case LPARENTHESIS:
        jj_consume_token(LPARENTHESIS);
        jj_consume_token(RPARENTHESIS);
        break;
      case LSQUAREBRACKET:
        jj_consume_token(LSQUAREBRACKET);
        jj_consume_token(RSQUAREBRACKET);
        break;
      default:
        if (jj_2_178(1)) {
          declaration_specifiers(null);
          if (jj_2_177(2)) {
            switch (jj_nt.kind) {
            case STAR:
              jj_consume_token(STAR);
              break;
            case AMPERSAND:
              jj_consume_token(AMPERSAND);
              break;
            default:
              jj_consume_token(-1);
              throw new ParseException();
            }
          } else {
            ;
          }
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
       if (jjtc000) {
         jjtree.clearNodeScope(jjtn000);
         jjtc000 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte000 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte000;}
       }
       if (jjte000 instanceof ParseException) {
         {if (true) throw (ParseException)jjte000;}
       }
       {if (true) throw (Error)jjte000;}
    } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
         jjtn000.jjtSetLastToken(getToken(0));
       }
    }
  }

  final public void exception_spec() throws ParseException {
 /*@bgen(jjtree) exception_spec */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEXCEPTION_SPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(THROW);
      jj_consume_token(LPARENTHESIS);
      if (jj_2_179(1)) {
        exception_list();
      } else {
        ;
      }
      jj_consume_token(RPARENTHESIS);
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  final public void exception_list() throws ParseException {
 /*@bgen(jjtree) exception_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEXCEPTION_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      type_name();
      label_54:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_54;
        }
        jj_consume_token(COMMA);
        type_name();
      }
    } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
       jjtn000.jjtSetLastToken(getToken(0));
     }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_100(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_101(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_102(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_103(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_103(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_104(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_104(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_105(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_105(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_106(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_106(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_107(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_107(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_108(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_108(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_109(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_109(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_110(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_110(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_111(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_111(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_112(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_112(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_113(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_113(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_114(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_114(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_115(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_115(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_116(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_116(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_117(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_117(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_118(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_118(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_119(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_119(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_120(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_120(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_121(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_121(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_122(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_122(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_123(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_123(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_124(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_124(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_125(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_125(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_126(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_126(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_127(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_127(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_128(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_128(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_129(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_129(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_130(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_130(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_131(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_131(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_132(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_132(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_133(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_133(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_134(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_134(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_135(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_135(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_136(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_136(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_137(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_137(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_138(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_138(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_139(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_139(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_140(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_140(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_141(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_141(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_142(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_142(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_143(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_143(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_144(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_144(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_145(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_145(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_146(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_146(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_147(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_147(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_148(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_148(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_149(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_149(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_150(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_150(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_151(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_151(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_152(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_152(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_153(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_153(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_154(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_154(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_155(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_155(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_156(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_156(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_157(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_157(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_158(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_158(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_159(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_159(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_160(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_160(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_161(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_161(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_162(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_162(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_163(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_163(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_164(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_164(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_165(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_165(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_166(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_166(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_167(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_167(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_168(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_168(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_169(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_169(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_170(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_170(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_171(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_171(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_172(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_172(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_173(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_173(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_174(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_174(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_175(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_175(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_176(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_176(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_177(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_177(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_178(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_178(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_179(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_179(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_3_114() {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) return true;
    }
    if (jj_scan_token(ID)) return true;
    xsp = jj_scanpos;
    if (jj_3R_124()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_220() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_113()) {
    jj_scanpos = xsp;
    if (jj_3_114()) return true;
    }
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_220()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_351()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(115)) jj_scanpos = xsp;
    if (jj_scan_token(TEMPLATE)) return true;
    if (jj_scan_token(LESSTHAN)) return true;
    xsp = jj_scanpos;
    if (jj_3_111()) jj_scanpos = xsp;
    if (jj_scan_token(GREATERTHAN)) return true;
    return false;
  }

  private boolean jj_3_110() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3_109() {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_375() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_110()) jj_scanpos = xsp;
    if (jj_scan_token(RPARENTHESIS)) return true;
    if (jj_3R_273()) return true;
    return false;
  }

  private boolean jj_3R_360() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_374()) {
    jj_scanpos = xsp;
    if (jj_3R_375()) return true;
    }
    return false;
  }

  private boolean jj_3R_374() {
    if (jj_scan_token(LSQUAREBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_109()) jj_scanpos = xsp;
    if (jj_scan_token(RSQUAREBRACKET)) return true;
    return false;
  }

  private boolean jj_3_107() {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_3R_109()) return true;
    if (jj_3R_218()) return true;
    return false;
  }

  private boolean jj_3_104() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_scan_token(LSQUAREBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_107()) jj_scanpos = xsp;
    if (jj_scan_token(RSQUAREBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_120() {
    Token xsp;
    if (jj_3R_219()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_219()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_346() {
    if (jj_3R_360()) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_218()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    Token xsp;
    if (jj_3R_346()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_346()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_108() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) {
    jj_scanpos = xsp;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_218() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_108()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_3R_61()) return true;
    if (jj_3R_218()) return true;
    return false;
  }

  private boolean jj_3_106() {
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_116() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_105()) {
    jj_scanpos = xsp;
    if (jj_3_106()) return true;
    }
    return false;
  }

  private boolean jj_3_105() {
    if (jj_scan_token(LCURLYBRACE)) return true;
    if (jj_3R_116()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_104()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    if (jj_scan_token(RCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3_102() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3_100() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    if (jj_scan_token(ELLIPSIS)) return true;
    return false;
  }

  private boolean jj_3_103() {
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_377() {
    if (jj_scan_token(ASSIGNEQUAL)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_337() {
    if (jj_3R_218()) return true;
    return false;
  }

  private boolean jj_3R_336() {
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_3R_61()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_336()) {
    jj_scanpos = xsp;
    if (jj_3R_337()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_377()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_99() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_414() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_413()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_3R_114()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_102()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_103() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_101()) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    }
    return false;
  }

  private boolean jj_3_101() {
    if (jj_3R_113()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_100()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_413() {
    if (jj_3R_88()) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_99()) jj_scanpos = xsp;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3R_406() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_413()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_414()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_97() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3_98() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_307() {
    return false;
  }

  private boolean jj_3R_269() {
    jj_lookingAhead = true;
    jj_semLA = IsCtor();
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_307()) return true;
    if (jj_3R_167()) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_97()) jj_scanpos = xsp;
    if (jj_scan_token(RPARENTHESIS)) return true;
    xsp = jj_scanpos;
    if (jj_3_98()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_399() {
    if (jj_3R_340()) return true;
    return false;
  }

  private boolean jj_3_95() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3_96() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_308() {
    return false;
  }

  private boolean jj_3R_166() {
    return false;
  }

  private boolean jj_3R_270() {
    jj_lookingAhead = true;
    jj_semLA = IsCtor();
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_308()) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_95()) jj_scanpos = xsp;
    if (jj_scan_token(RPARENTHESIS)) return true;
    xsp = jj_scanpos;
    if (jj_3_96()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_168() {
    return false;
  }

  private boolean jj_3R_57() {
    jj_lookingAhead = true;
    jj_semLA = IsCtor();
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_166()) return true;
    if (jj_3R_167()) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3R_398() {
    if (jj_3R_406()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    jj_lookingAhead = true;
    jj_semLA = IsCtor();
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_168()) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3R_379() {
    if (jj_scan_token(ASSIGNEQUAL)) return true;
    if (jj_scan_token(OCTALINT)) return true;
    return false;
  }

  private boolean jj_3R_387() {
    if (jj_scan_token(TRY)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_398()) jj_scanpos = xsp;
    if (jj_3R_186()) return true;
    if (jj_3R_399()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_399()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_396() {
    if (jj_3R_340()) return true;
    return false;
  }

  private boolean jj_3R_397() {
    if (jj_3R_406()) return true;
    return false;
  }

  private boolean jj_3R_386() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_397()) jj_scanpos = xsp;
    if (jj_3R_186()) return true;
    return false;
  }

  private boolean jj_3R_385() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_384() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_3R_56()) return true;
    if (jj_3R_270()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_384()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_385()) {
    jj_scanpos = xsp;
    if (jj_3R_386()) {
    jj_scanpos = xsp;
    if (jj_3R_387()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_383() {
    if (jj_3R_186()) return true;
    return false;
  }

  private boolean jj_3R_382() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_186()) return true;
    Token xsp;
    if (jj_3R_396()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_396()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_381() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_380() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_3R_56()) return true;
    if (jj_3R_269()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_379()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_380()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_381()) {
    jj_scanpos = xsp;
    if (jj_3R_382()) {
    jj_scanpos = xsp;
    if (jj_3R_383()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_165() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_165()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_94() {
    if (jj_scan_token(ASSIGNEQUAL)) return true;
    return false;
  }

  private boolean jj_3_92() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_417() {
    if (jj_scan_token(ASSIGNEQUAL)) return true;
    if (jj_scan_token(OCTALINT)) return true;
    return false;
  }

  private boolean jj_3R_416() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3_93() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3_90() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_261() {
    if (jj_3R_88()) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_92()) jj_scanpos = xsp;
    if (jj_scan_token(RPARENTHESIS)) return true;
    xsp = jj_scanpos;
    if (jj_3_93()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_416()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_417()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_91() {
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_3R_261()) return true;
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_3R_109()) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) return true;
    }
    return false;
  }

  private boolean jj_3_83() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_3R_88()) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_84() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_3R_88()) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_3_90()) return true;
    }
    return false;
  }

  private boolean jj_3_89() {
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_89()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = IsMethod();
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_170()) return true;
    }
    return false;
  }

  private boolean jj_3_87() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3_86() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_276() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3_88() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_87()) jj_scanpos = xsp;
    if (jj_scan_token(RPARENTHESIS)) return true;
    xsp = jj_scanpos;
    if (jj_3_88()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_276()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_82() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_275() {
    if (jj_scan_token(LSQUAREBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_86()) jj_scanpos = xsp;
    if (jj_scan_token(RSQUAREBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_110() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) return true;
    }
    return false;
  }

  private boolean jj_3R_213() {
    Token xsp;
    if (jj_3R_275()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_275()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_311() {
    if (jj_3R_88()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_84()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_310() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_115()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_83()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_85() {
    if (jj_scan_token(TILDE)) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_82()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_277() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_85()) {
    jj_scanpos = xsp;
    if (jj_3R_310()) {
    jj_scanpos = xsp;
    if (jj_3R_311()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_81() {
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3_79() {
    if (jj_scan_token(CONST)) return true;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_3R_277()) return true;
    return false;
  }

  private boolean jj_3_78() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_3R_109()) return true;
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) return true;
    }
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_scan_token(VOLATILE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_79()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(CONST)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_78()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    }
    return false;
  }

  private boolean jj_3R_273() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_80()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_3R_274()) return true;
    if (jj_3R_273()) return true;
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_273()) return true;
    return false;
  }

  private boolean jj_3_77() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_109() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_scan_token(AMPERSAND)) return true;
    if (jj_3R_273()) return true;
    return false;
  }

  private boolean jj_3R_361() {
    if (jj_scan_token(ASSIGNEQUAL)) return true;
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_361()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_3R_106()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_77()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_388() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) return true;
    }
    return false;
  }

  private boolean jj_3R_254() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) return true;
    }
    }
    }
    }
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3_76() {
    if (jj_scan_token(LCURLYBRACE)) return true;
    if (jj_3R_105()) return true;
    if (jj_scan_token(RCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_76()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_scan_token(LCURLYBRACE)) return true;
    if (jj_3R_105()) return true;
    if (jj_scan_token(RCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3R_415() {
    if (jj_scan_token(ASSIGNEQUAL)) return true;
    if (jj_scan_token(OCTALINT)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(ENUM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) return true;
    }
    return false;
  }

  private boolean jj_3_73() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3_72() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3_74() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_410() {
    if (jj_scan_token(ASSIGNEQUAL)) return true;
    if (jj_scan_token(OCTALINT)) return true;
    return false;
  }

  private boolean jj_3R_389() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3_75() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_268() {
    if (jj_3R_175()) return true;
    return false;
  }

  private boolean jj_3R_267() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_204() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_267()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_268()) jj_scanpos = xsp;
    if (jj_scan_token(OPERATOR)) return true;
    if (jj_3R_61()) return true;
    xsp = jj_scanpos;
    if (jj_3R_388()) jj_scanpos = xsp;
    if (jj_scan_token(LPARENTHESIS)) return true;
    xsp = jj_scanpos;
    if (jj_3_74()) jj_scanpos = xsp;
    if (jj_scan_token(RPARENTHESIS)) return true;
    xsp = jj_scanpos;
    if (jj_3_75()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_389()) jj_scanpos = xsp;
    if (jj_3R_390()) return true;
    return false;
  }

  private boolean jj_3_70() {
    if (jj_scan_token(ASSIGNEQUAL)) return true;
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_3R_186()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_3R_175()) return true;
    return false;
  }

  private boolean jj_3R_335() {
    if (jj_3R_115()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_70()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_71() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(149)) jj_scanpos = xsp;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_309() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_71()) {
    jj_scanpos = xsp;
    if (jj_3R_335()) return true;
    }
    return false;
  }

  private boolean jj_3R_411() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_309()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_415()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_272() {
    if (jj_3R_309()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_410()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_411()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_67() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_3R_265()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_69() {
    if (jj_3R_88()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_66() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_3R_272()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_3R_73()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_64() {
    if (jj_3R_56()) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_3R_56()) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_61()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_208()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_3R_209()) return true;
    }
    return false;
  }

  private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_62() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_90()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_91()) jj_scanpos = xsp;
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_3R_207()) return true;
    return false;
  }

  private boolean jj_3_61() {
    if (jj_scan_token(ENUM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(149)) jj_scanpos = xsp;
    if (jj_scan_token(LCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3R_363() {
    if (jj_3R_265()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(121)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_3R_206()) return true;
    return false;
  }

  private boolean jj_3_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(118)) jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    if (jj_scan_token(LCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_205()) return true;
    return false;
  }

  private boolean jj_3R_394() {
    if (jj_3R_272()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_3R_204()) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_3R_81()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_394()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_334() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_333()) return true;
    return false;
  }

  private boolean jj_3_59() {
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_68()) {
    jj_scanpos = xsp;
    if (jj_3_69()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_59()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) {
    jj_scanpos = xsp;
    if (jj_3R_96()) {
    jj_scanpos = xsp;
    if (jj_3R_97()) {
    jj_scanpos = xsp;
    if (jj_3R_98()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) {
    jj_scanpos = xsp;
    if (jj_3R_100()) {
    jj_scanpos = xsp;
    if (jj_3R_101()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_58() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3_57() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_354() {
    if (jj_scan_token(LESSTHAN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_58()) jj_scanpos = xsp;
    if (jj_scan_token(GREATERTHAN)) return true;
    return false;
  }

  private boolean jj_3R_378() {
    if (jj_3R_265()) return true;
    return false;
  }

  private boolean jj_3R_265() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_353() {
    if (jj_3R_175()) return true;
    return false;
  }

  private boolean jj_3R_352() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_362()) {
    jj_scanpos = xsp;
    if (jj_3R_363()) return true;
    }
    return false;
  }

  private boolean jj_3R_362() {
    if (jj_scan_token(VIRTUAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_378()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_333() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_352()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_353()) jj_scanpos = xsp;
    if (jj_scan_token(ID)) return true;
    xsp = jj_scanpos;
    if (jj_3R_354()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_300() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_333()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_334()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_260() {
    if (jj_scan_token(147)) return true;
    if (jj_scan_token(146)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_scan_token(TYPENAME)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_scan_token(147)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_187()) jj_scanpos = xsp;
    if (jj_3R_88()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_259() {
    if (jj_scan_token(146)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(ASSIGNEQUAL)) return true;
    if (jj_3R_88()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_55() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_56() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LCURLYBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_55()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3_54() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_scan_token(LCURLYBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_54()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(146)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3_56()) return true;
    }
    return false;
  }

  private boolean jj_3_50() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3_52() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_330() {
    if (jj_3R_300()) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_scan_token(LESSTHAN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_50()) jj_scanpos = xsp;
    if (jj_scan_token(GREATERTHAN)) return true;
    return false;
  }

  private boolean jj_3_49() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3_53() {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3R_329() {
    if (jj_3R_175()) return true;
    return false;
  }

  private boolean jj_3R_297() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_329()) jj_scanpos = xsp;
    if (jj_scan_token(ID)) return true;
    xsp = jj_scanpos;
    if (jj_3_51()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_330()) jj_scanpos = xsp;
    if (jj_scan_token(LCURLYBRACE)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_52()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_296() {
    if (jj_scan_token(LCURLYBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_48()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3R_253() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_296()) {
    jj_scanpos = xsp;
    if (jj_3R_297()) return true;
    }
    return false;
  }

  private boolean jj_3_45() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_scan_token(LESSTHAN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) jj_scanpos = xsp;
    if (jj_scan_token(GREATERTHAN)) return true;
    return false;
  }

  private boolean jj_3R_257() {
    if (jj_3R_300()) return true;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_3R_175()) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_47()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_257()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_177()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_178()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_366() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_112()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3R_357() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_365()) {
    jj_scanpos = xsp;
    if (jj_3R_366()) return true;
    }
    return false;
  }

  private boolean jj_3R_365() {
    if (jj_scan_token(ASSIGNEQUAL)) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3R_262() {
    if (jj_3R_115()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_357()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_343() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_262()) return true;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_3R_262()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_343()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_302() {
    if (jj_scan_token(TYPEDEF)) return true;
    return false;
  }

  private boolean jj_3R_263() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_301()) {
    jj_scanpos = xsp;
    if (jj_3R_302()) return true;
    }
    return false;
  }

  private boolean jj_3R_301() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_41() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) return true;
    }
    return false;
  }

  private boolean jj_3R_193() {
    return false;
  }

  private boolean jj_3_44() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_252() {
    if (jj_scan_token(LESSTHAN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) jj_scanpos = xsp;
    if (jj_scan_token(GREATERTHAN)) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    jj_lookingAhead = true;
    jj_semLA = sym.IsFullyScopedTypeName(GetFullyScopedName());
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_193()) return true;
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3_42() {
    if (jj_scan_token(LESSTHAN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_41()) jj_scanpos = xsp;
    if (jj_scan_token(GREATERTHAN)) return true;
    return false;
  }

  private boolean jj_3R_274() {
    if (jj_3R_175()) return true;
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_251() {
    if (jj_3R_175()) return true;
    return false;
  }

  private boolean jj_3R_167() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_251()) jj_scanpos = xsp;
    if (jj_scan_token(TILDE)) return true;
    if (jj_scan_token(ID)) return true;
    xsp = jj_scanpos;
    if (jj_3R_252()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_40() {
    if (jj_scan_token(LESSTHAN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) jj_scanpos = xsp;
    if (jj_scan_token(GREATERTHAN)) return true;
    return false;
  }

  private boolean jj_3_38() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_scan_token(OPERATOR)) return true;
    if (jj_3R_266()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_42()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_40()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_36() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_3R_175()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_201()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) return true;
    }
    return false;
  }

  private boolean jj_3R_332() {
    if (jj_scan_token(LESSTHAN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_36()) jj_scanpos = xsp;
    if (jj_scan_token(GREATERTHAN)) return true;
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_331() {
    if (jj_scan_token(LESSTHAN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) jj_scanpos = xsp;
    if (jj_scan_token(GREATERTHAN)) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_299() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_332()) jj_scanpos = xsp;
    if (jj_scan_token(SCOPE)) return true;
    return false;
  }

  private boolean jj_3R_256() {
    Token xsp;
    if (jj_3R_299()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_299()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_298() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_331()) jj_scanpos = xsp;
    if (jj_scan_token(SCOPE)) return true;
    return false;
  }

  private boolean jj_3_33() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_255() {
    if (jj_scan_token(SCOPE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_298()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_175() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_255()) {
    jj_scanpos = xsp;
    if (jj_3R_256()) return true;
    }
    return false;
  }

  private boolean jj_3R_264() {
    if (jj_scan_token(LESSTHAN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_33()) jj_scanpos = xsp;
    if (jj_scan_token(GREATERTHAN)) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_264()) jj_scanpos = xsp;
    if (jj_scan_token(SCOPE)) return true;
    return false;
  }

  private boolean jj_3R_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_3R_198()) return true;
    }
    return false;
  }

  private boolean jj_3_32() {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3_32()) return true;
    }
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_3R_253()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_31() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_412() {
    if (jj_3R_254()) return true;
    return false;
  }

  private boolean jj_3R_405() {
    Token xsp;
    if (jj_3R_412()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_412()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_218()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    Token xsp;
    if (jj_3_30()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_30()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_218()) return true;
    return false;
  }

  private boolean jj_3_25() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_65()) return true;
    if (jj_scan_token(LCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_3R_254()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_3R_253()) return true;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_3R_80()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_171()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3_28()) return true;
    }
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_scan_token(FRIEND)) return true;
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_186()) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_3R_263()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_3R_190()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_3R_260()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_3R_259()) return true;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_3R_258()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_61()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    return false;
  }

  private boolean jj_3R_407() {
    if (jj_3R_340()) return true;
    return false;
  }

  private boolean jj_3_19() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_3R_61()) return true;
    if (jj_3R_115()) return true;
    if (jj_scan_token(ASSIGNEQUAL)) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_322() {
    if (jj_scan_token(LCURLYBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_18()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCURLYBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_258() {
    if (jj_scan_token(EXTERN)) return true;
    if (jj_scan_token(STRING)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_322()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_175()) return true;
    return false;
  }

  private boolean jj_3R_404() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_186()) return true;
    Token xsp;
    if (jj_3R_407()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_407()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_403() {
    if (jj_3R_186()) return true;
    return false;
  }

  private boolean jj_3R_402() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_390() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_402()) {
    jj_scanpos = xsp;
    if (jj_3R_403()) {
    jj_scanpos = xsp;
    if (jj_3R_404()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_401() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_175()) return true;
    return false;
  }

  private boolean jj_3R_271() {
    if (jj_3R_73()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_401()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_390()) return true;
    return false;
  }

  private boolean jj_3R_400() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_61()) return true;
    if (jj_3R_73()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_400()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_390()) return true;
    return false;
  }

  private boolean jj_3R_207() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3R_271()) return true;
    }
    return false;
  }

  private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_6() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_62()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_63()) jj_scanpos = xsp;
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_391() {
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_3R_250()) return true;
    return false;
  }

  private boolean jj_3_4() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_372() {
    if (jj_3R_204()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_56()) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_56()) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3R_371() {
    if (jj_3R_61()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_391()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_370() {
    if (jj_3R_207()) return true;
    return false;
  }

  private boolean jj_3R_369() {
    if (jj_3R_206()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_12() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_67()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_368() {
    if (jj_3R_205()) return true;
    return false;
  }

  private boolean jj_3R_367() {
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) jj_scanpos = xsp;
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3_13() {
    Token xsp;
    if (jj_3R_69()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_69()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_368()) {
    jj_scanpos = xsp;
    if (jj_3R_369()) {
    jj_scanpos = xsp;
    if (jj_3R_370()) {
    jj_scanpos = xsp;
    if (jj_3R_371()) {
    jj_scanpos = xsp;
    if (jj_3R_372()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_10() {
    if (jj_3R_56()) return true;
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_3R_204()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_56()) return true;
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3_177() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) return true;
    }
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_3R_207()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(ENUM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(149)) jj_scanpos = xsp;
    if (jj_scan_token(LCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_3R_176()) return true;
    }
    return false;
  }

  private boolean jj_3_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    if (jj_scan_token(LCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3R_418() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_126()) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_3R_206()) return true;
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_3R_205()) return true;
    return false;
  }

  private boolean jj_3R_249() {
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_3R_81()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_367()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_179() {
    if (jj_3R_156()) return true;
    return false;
  }

  private boolean jj_3R_157() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_249()) jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3_15()) {
    jj_scanpos = xsp;
    if (jj_3_16()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_3R_126()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_418()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_scan_token(THROW)) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_179()) jj_scanpos = xsp;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_178() {
    if (jj_3R_61()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_177()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_306() {
    if (jj_scan_token(LSQUAREBRACKET)) return true;
    if (jj_scan_token(RSQUAREBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_305() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_176() {
    if (jj_scan_token(LSQUAREBRACKET)) return true;
    if (jj_scan_token(RSQUAREBRACKET)) return true;
    return false;
  }

  private boolean jj_3_175() {
    if (jj_scan_token(LSQUAREBRACKET)) return true;
    if (jj_scan_token(RSQUAREBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_304() {
    if (jj_scan_token(DELETE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_176()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_266() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_303()) {
    jj_scanpos = xsp;
    if (jj_3R_304()) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_3R_305()) {
    jj_scanpos = xsp;
    if (jj_3R_306()) {
    jj_scanpos = xsp;
    if (jj_3_178()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_303() {
    if (jj_scan_token(NEW)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_175()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_239() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_327() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(134)) {
    jj_scanpos = xsp;
    if (jj_scan_token(135)) {
    jj_scanpos = xsp;
    if (jj_scan_token(138)) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) {
    jj_scanpos = xsp;
    if (jj_scan_token(136)) {
    jj_scanpos = xsp;
    if (jj_scan_token(137)) {
    jj_scanpos = xsp;
    if (jj_scan_token(140)) {
    jj_scanpos = xsp;
    if (jj_scan_token(141)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(142)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(127)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_174() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) jj_scanpos = xsp;
    if (jj_scan_token(DELETE)) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_3R_117()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_239()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_173() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) jj_scanpos = xsp;
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  private boolean jj_3_167() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_295() {
    if (jj_3R_327()) return true;
    return false;
  }

  private boolean jj_3R_294() {
    if (jj_3R_243()) return true;
    return false;
  }

  private boolean jj_3R_293() {
    if (jj_3R_326()) return true;
    return false;
  }

  private boolean jj_3R_292() {
    if (jj_3R_325()) return true;
    return false;
  }

  private boolean jj_3_172() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_291() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_118()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3R_290() {
    Token xsp;
    if (jj_3_172()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_172()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_244() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_3R_290()) {
    jj_scanpos = xsp;
    if (jj_3R_291()) {
    jj_scanpos = xsp;
    if (jj_3R_292()) {
    jj_scanpos = xsp;
    if (jj_3R_293()) {
    jj_scanpos = xsp;
    if (jj_3R_294()) {
    jj_scanpos = xsp;
    if (jj_3R_295()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_171() {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3_170() {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_289() {
    if (jj_scan_token(TILDE)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_288() {
    if (jj_scan_token(OPERATOR)) return true;
    if (jj_3R_266()) return true;
    return false;
  }

  private boolean jj_3R_287() {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_286() {
    if (jj_3R_175()) return true;
    return false;
  }

  private boolean jj_3R_243() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_286()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_287()) {
    jj_scanpos = xsp;
    if (jj_3R_288()) {
    jj_scanpos = xsp;
    if (jj_3R_289()) {
    jj_scanpos = xsp;
    if (jj_scan_token(149)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_248() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3_169() {
    if (jj_3R_84()) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_167()) jj_scanpos = xsp;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_163() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_144()) jj_scanpos = xsp;
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3_166() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3_164() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_245() {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(POINTERTO)) return true;
    if (jj_3R_243()) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_243()) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_166()) jj_scanpos = xsp;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(LSQUAREBRACKET)) return true;
    if (jj_3R_118()) return true;
    if (jj_scan_token(RSQUAREBRACKET)) return true;
    return false;
  }

  private boolean jj_3_165() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_scan_token(TYPEID)) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_163()) {
    jj_scanpos = xsp;
    if (jj_3_164()) return true;
    }
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_scan_token(CONST_CAST)) return true;
    if (jj_scan_token(LESSTHAN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_248()) jj_scanpos = xsp;
    if (jj_3R_123()) return true;
    if (jj_scan_token(GREATERTHAN)) return true;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_scan_token(REINTERPRET_CAST)) return true;
    if (jj_scan_token(LESSTHAN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_247()) jj_scanpos = xsp;
    if (jj_3R_123()) return true;
    if (jj_scan_token(GREATERTHAN)) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_scan_token(STATIC_CAST)) return true;
    if (jj_scan_token(LESSTHAN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_246()) jj_scanpos = xsp;
    if (jj_3R_123()) return true;
    if (jj_scan_token(GREATERTHAN)) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(DYNAMIC_CAST)) return true;
    if (jj_scan_token(LESSTHAN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_245()) jj_scanpos = xsp;
    if (jj_3R_123()) return true;
    if (jj_scan_token(GREATERTHAN)) return true;
    return false;
  }

  private boolean jj_3_160() {
    if (jj_3R_143()) return true;
    return false;
  }

  private boolean jj_3R_350() {
    if (jj_scan_token(LSQUAREBRACKET)) return true;
    if (jj_scan_token(RSQUAREBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_3R_244()) return true;
    return false;
  }

  private boolean jj_3R_138() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_168()) {
    jj_scanpos = xsp;
    if (jj_3_169()) return true;
    }
    return false;
  }

  private boolean jj_3_168() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) return true;
    }
    }
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_165()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_136() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_162() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_326() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) jj_scanpos = xsp;
    if (jj_scan_token(DELETE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_350()) jj_scanpos = xsp;
    if (jj_3R_137()) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_162()) jj_scanpos = xsp;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_161() {
    if (jj_scan_token(LSQUAREBRACKET)) return true;
    if (jj_3R_118()) return true;
    if (jj_scan_token(RSQUAREBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_285() {
    Token xsp;
    if (jj_3_161()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_161()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_159() {
    if (jj_3R_143()) return true;
    return false;
  }

  private boolean jj_3R_242() {
    if (jj_3R_109()) return true;
    if (jj_3R_273()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_160()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_143() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_241()) {
    jj_scanpos = xsp;
    if (jj_3R_242()) return true;
    }
    return false;
  }

  private boolean jj_3R_241() {
    if (jj_3R_285()) return true;
    return false;
  }

  private boolean jj_3_158() {
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3_155() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_393() {
    if (jj_3R_143()) return true;
    return false;
  }

  private boolean jj_3_154() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_126()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3R_240() {
    if (jj_3R_61()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_393()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_153() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_349() {
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_3R_240()) return true;
    return false;
  }

  private boolean jj_3_156() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_126()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_126()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_152() {
    if (jj_scan_token(SCOPE)) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_112()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_157() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_139()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) return true;
    }
    return false;
  }

  private boolean jj_3R_348() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_126()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_148() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_126()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3R_325() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) jj_scanpos = xsp;
    if (jj_scan_token(NEW)) return true;
    xsp = jj_scanpos;
    if (jj_3R_348()) {
    jj_scanpos = xsp;
    if (jj_3_157()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_349()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_151() {
    if (jj_3R_138()) return true;
    return false;
  }

  private boolean jj_3_149() {
    if (jj_3R_135()) return true;
    return false;
  }

  private boolean jj_3R_347() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_126()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_scan_token(SIZEOF)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_347()) {
    jj_scanpos = xsp;
    if (jj_3_149()) return true;
    }
    return false;
  }

  private boolean jj_3_150() {
    if (jj_3R_136()) return true;
    if (jj_3R_137()) return true;
    return false;
  }

  private boolean jj_3R_409() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) return true;
    }
    if (jj_3R_137()) return true;
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_scan_token(MINUSMINUS)) return true;
    if (jj_3R_137()) return true;
    return false;
  }

  private boolean jj_3_146() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_126()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3R_135() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_235()) {
    jj_scanpos = xsp;
    if (jj_3R_236()) {
    jj_scanpos = xsp;
    if (jj_3_150()) {
    jj_scanpos = xsp;
    if (jj_3R_237()) {
    jj_scanpos = xsp;
    if (jj_3_151()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_235() {
    if (jj_scan_token(PLUSPLUS)) return true;
    if (jj_3R_137()) return true;
    return false;
  }

  private boolean jj_3_147() {
    if (jj_3R_135()) return true;
    return false;
  }

  private boolean jj_3R_137() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_238()) {
    jj_scanpos = xsp;
    if (jj_3_147()) return true;
    }
    return false;
  }

  private boolean jj_3R_238() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_126()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    if (jj_3R_137()) return true;
    return false;
  }

  private boolean jj_3R_376() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) return true;
    }
    if (jj_3R_221()) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_3R_137()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_409()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_145() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) return true;
    }
    }
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_3R_134()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_145()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_3R_133()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_144()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_144() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    }
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3R_408() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) return true;
    }
    if (jj_3R_234()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_3R_221()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_376()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_142() {
    if (jj_scan_token(AMPERSAND)) return true;
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3R_373() {
    if (jj_scan_token(BITWISEOR)) return true;
    if (jj_3R_345()) return true;
    return false;
  }

  private boolean jj_3R_358() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_324()) return true;
    return false;
  }

  private boolean jj_3R_392() {
    if (jj_scan_token(BITWISEXOR)) return true;
    if (jj_3R_359()) return true;
    return false;
  }

  private boolean jj_3_143() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) return true;
    }
    }
    }
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3R_234() {
    if (jj_3R_125()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_143()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_344() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_284()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_3R_234()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_408()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_359() {
    if (jj_3R_132()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_142()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_345() {
    if (jj_3R_359()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_392()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_324() {
    if (jj_3R_345()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_373()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_284() {
    if (jj_3R_324()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_358()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_233() {
    if (jj_3R_284()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_344()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_3R_233()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_323()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_323() {
    if (jj_scan_token(QUESTIONMARK)) return true;
    if (jj_3R_118()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3_140() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_3R_278()) return true;
    return false;
  }

  private boolean jj_3R_283() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_117() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_141()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) return true;
    }
    return false;
  }

  private boolean jj_3_141() {
    if (jj_3R_131()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_283()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_139() {
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_3R_117()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_140()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_318() {
    if (jj_3R_340()) return true;
    return false;
  }

  private boolean jj_3_134() {
    if (jj_3R_118()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_278() {
    if (jj_scan_token(THROW)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_139()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_364() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_138()) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    }
    return false;
  }

  private boolean jj_3_138() {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3_132() {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_356() {
    if (jj_scan_token(148)) return true;
    if (jj_3R_186()) return true;
    return false;
  }

  private boolean jj_3_130() {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_340() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_355()) {
    jj_scanpos = xsp;
    if (jj_3R_356()) return true;
    }
    return false;
  }

  private boolean jj_3R_355() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_364()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    if (jj_3R_186()) return true;
    return false;
  }

  private boolean jj_3_137() {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3_136() {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3_131() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_281() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_186()) return true;
    Token xsp;
    if (jj_3R_318()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_318()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_128() {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3_129() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_317() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_137()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_125() {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3_133() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_316() {
    if (jj_scan_token(BREAK)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_315() {
    if (jj_scan_token(CONTINUE)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_342() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3_127() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_280() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_314()) {
    jj_scanpos = xsp;
    if (jj_3R_315()) {
    jj_scanpos = xsp;
    if (jj_3R_316()) {
    jj_scanpos = xsp;
    if (jj_3R_317()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_314() {
    if (jj_scan_token(GOTO)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_341() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3_135() {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3R_321() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_133()) {
    jj_scanpos = xsp;
    if (jj_3_134()) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3_135()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3_136()) jj_scanpos = xsp;
    if (jj_scan_token(RPARENTHESIS)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3_124() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_339() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3R_320() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_127()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_342()) {
    jj_scanpos = xsp;
    if (jj_3_132()) return true;
    }
    if (jj_scan_token(RPARENTHESIS)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_282() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_319()) {
    jj_scanpos = xsp;
    if (jj_3R_320()) {
    jj_scanpos = xsp;
    if (jj_3R_321()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_319() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_341()) {
    jj_scanpos = xsp;
    if (jj_3_130()) return true;
    }
    if (jj_scan_token(RPARENTHESIS)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_338() {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3_126() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_313() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_339()) {
    jj_scanpos = xsp;
    if (jj_3_128()) return true;
    }
    if (jj_scan_token(RPARENTHESIS)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_279() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_312()) {
    jj_scanpos = xsp;
    if (jj_3R_313()) return true;
    }
    return false;
  }

  private boolean jj_3R_312() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_338()) {
    jj_scanpos = xsp;
    if (jj_3_125()) return true;
    }
    if (jj_scan_token(RPARENTHESIS)) return true;
    if (jj_3R_127()) return true;
    xsp = jj_scanpos;
    if (jj_3_126()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_123() {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_scan_token(LCURLYBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_123()) jj_scanpos = xsp;
    if (jj_scan_token(RCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_230() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_102()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_229()) {
    jj_scanpos = xsp;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_229() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_228() {
    if (jj_3R_282()) return true;
    return false;
  }

  private boolean jj_3_122() {
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3_121() {
    if (jj_3R_118()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_3R_281()) return true;
    return false;
  }

  private boolean jj_3_120() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_3R_280()) return true;
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_3R_279()) return true;
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_3R_186()) return true;
    return false;
  }

  private boolean jj_3_119() {
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_3R_118()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_127() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_222()) {
    jj_scanpos = xsp;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_3R_227()) {
    jj_scanpos = xsp;
    if (jj_3_122()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_232() {
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_129() {
    Token xsp;
    if (jj_3R_232()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_232()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_scan_token(TEMPLATE)) return true;
    if (jj_scan_token(LESSTHAN)) return true;
    if (jj_scan_token(GREATERTHAN)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(TEMPLATE)) return true;
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_328() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_197()) return true;
    return false;
  }

  private boolean jj_3R_395() {
    if (jj_3R_405()) return true;
    return false;
  }

  private boolean jj_3_116() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) return true;
    }
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3_118() {
    if (jj_3R_125()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_116()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_117() {
    if (jj_3R_126()) return true;
    return false;
  }

  private boolean jj_3R_197() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_117()) {
    jj_scanpos = xsp;
    if (jj_3_118()) return true;
    }
    return false;
  }

  private boolean jj_3_115() {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_197()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_328()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_111() {
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_351() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_220()) return true;
    return false;
  }

  private boolean jj_3_112() {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LESSTHAN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_115()) jj_scanpos = xsp;
    if (jj_scan_token(GREATERTHAN)) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_scan_token(ASSIGNEQUAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_112()) {
    jj_scanpos = xsp;
    if (jj_3R_395()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public CPPTreeParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;

  /** Constructor with InputStream. */
  public CPPTreeParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CPPTreeParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CPPTreeParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
  }

  /** Constructor. */
  public CPPTreeParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new CPPTreeParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
  }

  /** Constructor with generated Token Manager. */
  public CPPTreeParser(CPPTreeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  /** Reinitialise. */
  public void ReInit(CPPTreeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      return token;
    }
    jj_nt = token;
    token = oldToken;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
