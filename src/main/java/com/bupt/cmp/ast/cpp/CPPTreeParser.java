/* Generated By:JJTree&JavaCC: Do not edit this line. CPPTreeParser.java */
package com.bupt.cmp.ast.cpp;


import com.bupt.cmp.ast.SimpleNode;
import com.bupt.cmp.ast.ClassScope;
import com.bupt.cmp.ast.Scope;
import com.bupt.cmp.ast.SymtabManager;
import com.bupt.cmp.lang.file.DefaultCodeFile;
import com.bupt.cmp.pretreat.TreeProcess;

import java.io.*;

public final class CPPTreeParser/*@bgen(jjtree)*/implements CPPTreeParserTreeConstants, CPPTreeParserConstants {/*@bgen(jjtree)*/
  protected JJTCPPTreeParserState jjtree = new JJTCPPTreeParserState();/**
	 * 运行解析�?
	 * 
	 * @param cf
	 * @return
	 */
  static String linshitest;
  public static boolean GetCPPGrammarTree(DefaultCodeFile cf) throws ParseException
  {
    if (cf.getContent() == "")
    {
      return false;
    }
    // 解析
    linshitest=cf.getName();
    CPPTreeParser parser;
    parser = new CPPTreeParser(new StringReader(cf.getContent()));
    SimpleNode root = parser.translation_unit();
    //将语法树转换为数组，保存在cf�?
    new TreeProcess().convertTreeToArrays(root, cf);
    return true;
  }

  /**
	 * A symbol table manager object. Currently only types are recorded for
	 * doing semantic predicates for parsing.
	 */
  public static SymtabManager sym;

  /*
	 * Methods used in semantics predicates.
	 */
  /**
	 * Reads a fully qualified name (since it is used during lookahead, we
	 * cannot use token. We have to explicitly use getToken).
	 */
  public String GetFullyScopedName() /* throws ParseException */
  {
    Token t = getToken(1);
    if (t.kind != ID && t.kind != SCOPE) return null;
    StringBuffer s = new StringBuffer();
    int i;
    if (t.kind != SCOPE)
    {
      s.append(t.image);
      t = getToken(2);
      i = 3;
    }
    else i = 2;
    while (t.kind == SCOPE)
    {
      s.append(t.image);
      s.append((t = getToken(i++)).image);
      t = getToken(i++);
    }
    return s.toString();
  }

  /**
	 * This method first tries to read a sequence of tokens of the form ("::")?
	 * <ID> ("::" <ID>)* and if it succeeds then asks the symbol table manager
	 * if this is the name of a constructor.
	 */
  public boolean IsCtor() /* throws ParseException */
  {
    return sym.IsCtor(GetFullyScopedName());
  }

  final public SimpleNode translation_unit() throws ParseException {
 /*@bgen(jjtree) Root */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTROOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
    sym.OpenScope(null, false);
      label_1:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_1;
        }
        external_declaration();
      }
      endfun();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    sym.CloseScope();
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void endfun() throws ParseException {
    jj_consume_token(0);
  }

  final public void external_declaration() throws ParseException {
 /*@bgen(jjtree) external_declaration */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEXTERNAL_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));boolean isTypedef = false;
  //System.out.println("external_declaration()");
    try {
      if (getToken(1).kind == __TRY || getToken(1).kind == __ASM || getToken(1).kind == __FINALLY) {
        switch (jj_nt.kind) {
        case __TRY:
          jj_consume_token(__TRY);
          break;
        case __ASM:
          jj_consume_token(__ASM);
          break;
        case __FINALLY:
          jj_consume_token(__FINALLY);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        compound_statement();
      } else {
        switch (jj_nt.kind) {
        case __EXCEPT:
          jj_consume_token(__EXCEPT);
      while (getToken(1).kind != LCURLYBRACE)
      {
        jj_consume_token(getToken(1).kind);
      }
          compound_statement();
          break;
        case __LEAVE:
          jj_consume_token(__LEAVE);
          jj_consume_token(SEMICOLON);
          break;
        default:
          if (jj_2_5(2147483647)) {
    //System.out.println("external_declaration() -- > template_head+declaration");
            switch (jj_nt.kind) {
            case TEMPLATE:
      //System.out.println("external_declaration() -- > template_head()");
              template_head();
              break;
            default:
              ;
            }
            declaration();
          } else if (jj_2_6(2147483647)) {
            enum_specifier();
            switch (jj_nt.kind) {
            case LPARENTHESIS:
            case SCOPE:
            case AMPERSAND:
            case STAR:
            case TILDE:
            case OPERATOR:
            case ID:
              init_declarator_list(false);
              break;
            default:
              ;
            }
            jj_consume_token(SEMICOLON);
          } else if (jj_2_7(2147483647)) {
    //System.out.println("=dtor_definition()=");
            dtor_definition();
          } else if (jj_2_8(2147483647)) {
    //System.out.println("=dtor_ctor_decl_spec()=");
            ctor_definition();
          } else if (jj_2_9(2147483647)) {
    //System.out.println("=function_definition()=");
            function_definition();
          } else if (jj_2_10(2147483647)) {
    //System.out.println("=conversion_function_decl_or_def()=");
            conversion_function_decl_or_def();
          } else {
            switch (jj_nt.kind) {
            case TEMPLATE:
              template_head();
              if (jj_2_2(2147483647)) {
                ctor_definition();
              } else if (jj_2_3(2147483647)) {
                function_definition();
              } else if (jj_2_4(1)) {
                isTypedef = declaration_specifiers();
                switch (jj_nt.kind) {
                case LPARENTHESIS:
                case SCOPE:
                case AMPERSAND:
                case STAR:
                case TILDE:
                case OPERATOR:
                case ID:
                  init_declarator_list(isTypedef);
                  break;
                default:
                  ;
                }
                jj_consume_token(SEMICOLON);
              } else {
                jj_consume_token(-1);
                throw new ParseException();
              }
              break;
            default:
              if (jj_2_11(1)) {
    //System.out.println("=declaration()=");
                declaration();
              } else {
                switch (jj_nt.kind) {
                case SEMICOLON:
                  jj_consume_token(SEMICOLON);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    //System.out.println("The Very Beginning consume ;;;;;;;;;;;;;;;;");
                  break;
                case USING:
                  jj_consume_token(USING);
                  jj_consume_token(NAMESPACE);
                  jj_consume_token(ID);
                  jj_consume_token(SEMICOLON);
                  break;
                default:
                  if (jj_2_12(3)) {
  //System.out.println("external_declaration() to std::id");
                    Scope_declaration();
                  } else {
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                }
              }
            }
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

//deal with std::vector and etc...
  final public void function_definition() throws ParseException {
 /*@bgen(jjtree) function_definition */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTFUNCTION_DEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Scope sc = null;
  boolean isTypedef;
  //System.out.println("function_definition():"+getToken(1).image+getToken(2).image+getToken(3).image);
    try {
      if (jj_2_13(3)) {
    //System.out.println("function_definition():"+"case 1");
        isTypedef = declaration_specifiers();
        sc = function_declarator(isTypedef);
        func_decl_def(sc);
      } else {
        switch (jj_nt.kind) {
        case SCOPE:
        case AMPERSAND:
        case STAR:
        case OPERATOR:
        case ID:
    //System.out.println("function_definition():"+"case 2");
          sc = function_declarator(false);
          func_decl_def(sc);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void func_decl_def(Scope sc) throws ParseException {
 /*@bgen(jjtree) func_decl_def */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTFUNC_DECL_DEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));boolean closeReqd = false;
  //System.out.println("Welcome to func_decl_def");
    try {
    if (closeReqd = (sc != null && sc != sym.GetCurScope()))
    {
      //System.out.println("Open a new Scope in func_decl_def");
      sym.OpenScope(sc);
    }
      switch (jj_nt.kind) {
      case LCURLYBRACE:
      //System.out.println("func_decl_def -- > compound_statement");
        compound_statement();
      //System.out.println("func_decl_def -- > compound_statement end");
        break;
      default:
        switch (jj_nt.kind) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          ;
        }
      //System.out.println("Welcome to func_decl_def, here consume a ; or nothing");
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    if (closeReqd)
    {
      //System.out.println("Close a new Scope in func_decl_def");
      sym.CloseScope();
    }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void linkage_specification() throws ParseException {
 /*@bgen(jjtree) linkage_specification */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTLINKAGE_SPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(EXTERN);
      jj_consume_token(STRING);
      switch (jj_nt.kind) {
      case LCURLYBRACE:
        jj_consume_token(LCURLYBRACE);
        label_2:
        while (true) {
          if (jj_2_14(1)) {
            ;
          } else {
            break label_2;
          }
          external_declaration();
        }
        jj_consume_token(RCURLYBRACE);
        if (jj_2_15(2147483647)) {
          jj_consume_token(SEMICOLON);
        } else {
          ;
        }
        break;
      default:
        if (jj_2_16(1)) {
          declaration();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

//protea changed in 1023
  final public void declarationforif() throws ParseException {
 /*@bgen(jjtree) declarationforif */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDECLARATIONFORIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));boolean isTypedef = false;
    try {
      if (jj_2_17(3)) {
        isTypedef = declaration_specifiers();
        switch (jj_nt.kind) {
        case LPARENTHESIS:
        case SCOPE:
        case AMPERSAND:
        case STAR:
        case TILDE:
        case OPERATOR:
        case ID:
      //System.out.println("======Next step is init_declarator_list()=====");
          init_declarator_list(isTypedef);
          break;
        default:
          ;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    //System.out.println("declaration() : consume a ;");
      } else if (jj_2_18(3)) {
        extern_linkage_specification();
      } else {
        switch (jj_nt.kind) {
        case EXTERN:
    //System.out.println("=====Next step is linkage_specification()()=====");
          linkage_specification();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void declaration() throws ParseException {
 /*@bgen(jjtree) declaration */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));boolean isTypedef = false;
    try {
      if (jj_2_19(3)) {
        isTypedef = declaration_specifiers();
        switch (jj_nt.kind) {
        case LPARENTHESIS:
        case SCOPE:
        case AMPERSAND:
        case STAR:
        case TILDE:
        case OPERATOR:
        case ID:
      //System.out.println("======Next step is init_declarator_list()=====");
          init_declarator_list(isTypedef);
          break;
        default:
          ;
        }
        jj_consume_token(SEMICOLON);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    //System.out.println("declaration() : consume a ;");
      } else if (jj_2_20(3)) {
        extern_linkage_specification();
      } else {
        switch (jj_nt.kind) {
        case EXTERN:
    //System.out.println("=====Next step is linkage_specification()()=====");
          linkage_specification();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

// to deal with extern "C" function_declaration function_definition or ";"
  final public void extern_linkage_specification() throws ParseException {
 /*@bgen(jjtree) extern_linkage_specification */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEXTERN_LINKAGE_SPECIFICATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(EXTERN);
      jj_consume_token(STRING);
      label_3:
      while (true) {
        if (jj_2_21(1)) {
          extern_builtin_type_specifier();
        } else {
          switch (jj_nt.kind) {
          case ID:
            jj_consume_token(ID);
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        if (jj_2_22(1)) {
          ;
        } else {
          break label_3;
        }
      }
      jj_consume_token(LPARENTHESIS);
    while (getToken(1).kind != RPARENTHESIS)
    {
      jj_consume_token(getToken(1).kind);
    }
    //System.out.println("the end before \u005c")\u005c"");
      jj_consume_token(RPARENTHESIS);
      switch (jj_nt.kind) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        if (jj_2_23(1)) {
          function_definition();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

/**
 * Very temporary. Just returns true if it sees a typedef. Finally, we will
 * need a structure that stores all the attributes.
 */
  final public boolean type_modifiers() throws ParseException {
 /*@bgen(jjtree) type_modifiers */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTYPE_MODIFIERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));boolean isTypedef = false;
    try {
      switch (jj_nt.kind) {
      case AUTO:
      case EXTERN:
      case REGISTER:
      case _STATIC:
      case TYPEDEF:
        isTypedef = storage_class_specifier();
        break;
      case CONST:
      case VOLATILE:
        type_qualifier();
        break;
      case INLINE:
        jj_consume_token(INLINE);
        break;
      case VIRTUAL:
        jj_consume_token(VIRTUAL);
        break;
      case FRIEND:
        jj_consume_token(FRIEND);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    {if (true) return isTypedef;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

/**
 * Very temporary. Just returns true if it sees a typedef. Finally, we will
 * need a structure that stores all the attributes.
 * protea changed in 1018
 */
  final public boolean declaration_specifiers() throws ParseException {
 /*@bgen(jjtree) declaration_specifiers */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDECLARATION_SPECIFIERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
  boolean isTypedef = false, tmp;
  //System.out.println("declaration_specifiers:"+getToken(1).image + getToken(2).image + getToken(3).image);
    try {
      if (getToken(1).kind == STD) {
        //System.out.println("there is a kind type named std::<ID>:" + getToken(1).image + getToken(2).image + getToken(3).image);
        jj_consume_token(STD);
        jj_consume_token(SCOPE);
        jj_consume_token(ID);
        label_4:
        while (true) {
          switch (jj_nt.kind) {
          case LESSTHAN:
            ;
            break;
          default:
            break label_4;
          }
          jj_consume_token(LESSTHAN);
          template_argument_list();
          jj_consume_token(GREATERTHAN);
        }
        label_5:
        while (true) {
          switch (jj_nt.kind) {
          case AMPERSAND:
          case STAR:
            ;
            break;
          default:
            break label_5;
          }
          switch (jj_nt.kind) {
          case STAR:
            jj_consume_token(STAR);
            break;
          case AMPERSAND:
            jj_consume_token(AMPERSAND);
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } else {
        switch (jj_nt.kind) {
        case AUTO:
        case CONST:
        case EXTERN:
        case FRIEND:
        case INLINE:
        case REGISTER:
        case _STATIC:
        case TYPEDEF:
        case VIRTUAL:
        case VOLATILE:
          label_6:
          while (true) {
            tmp = type_modifiers();
        //System.out.println("===declaration_specifiers --> type_modifiers===");
        isTypedef |= tmp;
            if (jj_2_24(2147483647)) {
              ;
            } else {
              break label_6;
            }
          }
          if (jj_2_32(2)) {
            if (jj_2_30(2147483647)) {
          //System.out.println("===In extern_builtin_type_specifier() 1_1===");
              extern_builtin_type_specifier();
              label_7:
              while (true) {
                if (jj_2_25(2)) {
                  ;
                } else {
                  break label_7;
                }
                if (jj_2_26(2147483647)) {
              //System.out.println("===In extern_builtin_type_specifier() 1_2===");
                  extern_builtin_type_specifier();
                } else if (jj_2_27(2147483647)) {
                  tmp = type_modifiers();
                } else {
                  jj_consume_token(-1);
                  throw new ParseException();
                }
            //System.out.println("===extern_builtin_type_specifier --> type_modifiers 1===");
            isTypedef |= tmp;
              }
            } else if (jj_2_31(1)) {
              switch (jj_nt.kind) {
              case CLASS:
              case STRUCT:
              case UNION:
                class_specifier();
            //System.out.println("===declaration_specifiers --> class_specifier()===");
                break;
              case ENUM:
                enum_specifier();
            //System.out.println("===declaration_specifiers --> enum_specifier()===");
                break;
              default:
                if (jj_2_28(1)) {
                  qualified_type();
            //System.out.println("===declaration_specifiers --> qualified_type()===");
                } else {
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
              label_8:
              while (true) {
                if (jj_2_29(2)) {
                  ;
                } else {
                  break label_8;
                }
                tmp = type_modifiers();
            //System.out.println("===last type_modifiers for choose 1===");
            isTypedef |= tmp;
              }
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          } else {
            ;
          }
          break;
        default:
          if (jj_2_37(2147483647)) {
      //System.out.println("===In extern_builtin_type_specifier() 2_1===");
            extern_builtin_type_specifier();
            label_9:
            while (true) {
              if (jj_2_33(2)) {
                ;
              } else {
                break label_9;
              }
              if (jj_2_34(2147483647)) {
          //System.out.println("===In extern_builtin_type_specifier() 2_2===");
                extern_builtin_type_specifier();
              } else {
                switch (jj_nt.kind) {
                case AUTO:
                case CONST:
                case EXTERN:
                case FRIEND:
                case INLINE:
                case REGISTER:
                case _STATIC:
                case TYPEDEF:
                case VIRTUAL:
                case VOLATILE:
                  tmp = type_modifiers();
          //System.out.println("===last type_modifiers for choose 2===");
          isTypedef |= tmp;
                  break;
                default:
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            }
          } else if (jj_2_38(1)) {
            switch (jj_nt.kind) {
            case CLASS:
            case STRUCT:
            case UNION:
        //System.out.println("===declaration_specifiers --> class_specifier()===");
              class_specifier();
              break;
            case ENUM:
              enum_specifier();
        //System.out.println("===declaration_specifiers --> enum_specifier()===");
              break;
            default:
              if (jj_2_35(1)) {
                qualified_type();
        //System.out.println("===declaration_specifiers --> qualified_type()===");
              } else {
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
            label_10:
            while (true) {
              if (jj_2_36(2)) {
                ;
              } else {
                break label_10;
              }
              tmp = type_modifiers();
        //System.out.println("===last type_modifiers for choose 3===");
        isTypedef |= tmp;
            }
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    {if (true) return isTypedef;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

/*
void type_specifier() :
{}
{
    simple_type_specifier()
   |
    class_specifier()
   |
    enum_specifier()
}
*/
  final public void simple_type_specifier() throws ParseException {
 /*@bgen(jjtree) simple_type_specifier */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSIMPLE_TYPE_SPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_39(1)) {
        extern_builtin_type_specifier();
      } else if (jj_2_40(1)) {
        qualified_type();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

//protea changed in 1017
  final public void scope_override_lookahead() throws ParseException {
 /*@bgen(jjtree) scope_override_lookahead */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSCOPE_OVERRIDE_LOOKAHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case SCOPE:
        jj_consume_token(SCOPE);
        break;
      case ID:
        jj_consume_token(ID);
        switch (jj_nt.kind) {
        case LESSTHAN:
          jj_consume_token(LESSTHAN);
          template_argument_list();
          jj_consume_token(GREATERTHAN);
          break;
        default:
          ;
        }
        jj_consume_token(SCOPE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

//protea changed in 1017 scope
  final public String scope_override() throws ParseException {
 /*@bgen(jjtree) scope_override */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSCOPE_OVERRIDE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String name = "";
  Token t;
  //System.out.println("scope_override():"+getToken(1).image+"||"+getToken(2).image+"||"+getToken(3).image);
    try {
      switch (jj_nt.kind) {
      case SCOPE:
        jj_consume_token(SCOPE);
      name += "::";
        label_11:
        while (true) {
          if (jj_2_41(2)) {
            ;
          } else {
            break label_11;
          }
          t = jj_consume_token(ID);
        //System.out.println("::< ID >=" + t.image);
          switch (jj_nt.kind) {
          case LESSTHAN:
          //System.out.println("1-"+tokenImage [ getToken(1).kind ] + tokenImage [ getToken(2).kind ] + tokenImage [ getToken(3).kind ] + "11< template_argument_list() >");
            jj_consume_token(LESSTHAN);
            template_argument_list();
            jj_consume_token(GREATERTHAN);
            break;
          default:
            ;
          }
          jj_consume_token(SCOPE);
        }
        break;
      case ID:
        label_12:
        while (true) {
          t = jj_consume_token(ID);
        //System.out.println("::< ID > ="+t.image);
          switch (jj_nt.kind) {
          case LESSTHAN:
          //System.out.println("2-"+tokenImage [ getToken(1).kind ] + tokenImage [ getToken(2).kind ] + tokenImage [ getToken(3).kind ] + "12< template_argument_list() >");
            jj_consume_token(LESSTHAN);
            template_argument_list();
            jj_consume_token(GREATERTHAN);
            break;
          default:
            ;
          }
        //System.out.println("here is ::<ID><template_argument_list()>::");
          jj_consume_token(SCOPE);
          if (jj_2_42(2)) {
            ;
          } else {
            break label_12;
          }
        }
      //System.out.println("In Scope_Override,we get a name:"+name);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    {if (true) return name;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

//protea changed in 1023 deal with std::vector and etc
  final public void Scope_declaration() throws ParseException {
 /*@bgen(jjtree) Scope_declaration */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSCOPE_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String name="";
  Token t;
  int consume;
    try {
      jj_consume_token(STD);
      jj_consume_token(SCOPE);
      jj_consume_token(ID);
      label_13:
      while (true) {
        switch (jj_nt.kind) {
        case LCURLYBRACE:
        case RCURLYBRACE:
        case LSQUAREBRACKET:
        case RSQUAREBRACKET:
        case LPARENTHESIS:
        case RPARENTHESIS:
        case SCOPE:
        case COLON:
        case COMMA:
        case QUESTIONMARK:
        case ELLIPSIS:
        case ASSIGNEQUAL:
        case TIMESEQUAL:
        case DIVIDEEQUAL:
        case MODEQUAL:
        case PLUSEQUAL:
        case MINUSEQUAL:
        case SHIFTLEFTEQUAL:
        case SHIFTRIGHTEQUAL:
        case BITWISEANDEQUAL:
        case BITWISEXOREQUAL:
        case BITWISEOREQUAL:
        case OR_OP:
        case AND_OP:
        case BITWISEOR:
        case BITWISEXOR:
        case AMPERSAND:
        case EQUAL:
        case NOTEQUAL:
        case LESSTHAN:
        case GREATERTHAN:
        case LESSTHANOREQUALTO:
        case GREATERTHANOREQUALTO:
        case SHIFTLEFT:
        case SHIFTRIGHT:
        case PLUS:
        case MINUS:
        case STAR:
        case DIVIDE:
        case MOD:
        case PLUSPLUS:
        case MINUSMINUS:
        case TILDE:
        case NOT_OP:
        case DOT:
        case POINTERTO:
        case DOTSTAR:
        case ARROWSTAR:
        case AND:
        case AND_EQ:
        case ASM:
        case AUTO:
        case BITAND:
        case BITOR:
        case BOOL:
        case BREAK:
        case CASE:
        case CATCH:
        case CHAR:
        case CLASS:
        case COMPL:
        case CONST:
        case CONST_CAST:
        case CONTINUE:
        case _DEFAULT:
        case DELETE:
        case DO:
        case DOUBLE:
        case DYNAMIC_CAST:
        case ELSE:
        case ENUM:
        case EXPLICIT:
        case EXPORT:
        case EXTERN:
        case FALSE:
        case FLOAT:
        case FOR:
        case FRIEND:
        case GOTO:
        case IF:
        case INLINE:
        case INT:
        case LONG:
        case mutable:
        case NAMESPACE:
        case NEW:
        case NOT:
        case NOT_EQ:
        case OPERATOR:
        case OR:
        case OR_EQ:
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
        case REGISTER:
        case REINTERPRET:
        case RETURN:
        case SHORT:
        case SIGNED:
        case SIZEOF:
        case _STATIC:
        case STATIC_CAST:
        case STRUCT:
        case SWITCH:
        case TEMPLATE:
        case THIS:
        case THROW:
        case TRUE:
        case TRY:
        case TYPEDEF:
        case TYPEID:
        case TYPENAME:
        case UNION:
        case UNSIGNED:
        case USING:
        case VIRTUAL:
        case VOID:
        case VOLATILE:
        case WCHAR_T:
        case DWORD:
        case WORD:
        case BYTE:
        case WHILE:
        case XOR:
        case XOR_EQ:
        case OCTALINT:
        case OCTALLONG:
        case UNSIGNED_OCTALINT:
        case UNSIGNED_OCTALLONG:
        case DECIMALINT:
        case DECIMALLONG:
        case UNSIGNED_DECIMALINT:
        case UNSIGNED_DECIMALLONG:
        case HEXADECIMALINT:
        case HEXADECIMALLONG:
        case UNSIGNED_HEXADECIMALINT:
        case UNSIGNED_HEXADECIMALLONG:
        case FLOATONE:
        case FLOATTWO:
        case CHARACTER:
        case STRING:
        case ID:
          ;
          break;
        default:
          break label_13;
        }
        anytoken();
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public String qualified_id() throws ParseException {
 /*@bgen(jjtree) qualified_id */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTQUALIFIED_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String name = "";
  Token t;
  //System.out.println("qualified_id()");
    try {
      if (jj_2_43(2147483647)) {
      //System.out.println("qualified_id() -- > ===scope_override===");
        name = scope_override();
      } else {
        ;
      }
      switch (jj_nt.kind) {
      case ID:
        t = jj_consume_token(ID);
        switch (jj_nt.kind) {
        case LESSTHAN:
          jj_consume_token(LESSTHAN);
          template_argument_list();
          jj_consume_token(GREATERTHAN);
          break;
        default:
          ;
        }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      //System.out.println("===use template_argument_list()===" + name + t.image);
      {if (true) return name + t.image;}
        break;
      case OPERATOR:
        jj_consume_token(OPERATOR);
        optor();
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      //System.out.println("===use optor===");
      {if (true) return "operator";}
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ptr_to_member() throws ParseException {
 /*@bgen(jjtree) ptr_to_member */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTPTR_TO_MEMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      scope_override();
      jj_consume_token(STAR);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void qualified_type() throws ParseException {
 /*@bgen(jjtree) qualified_type */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTQUALIFIED_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));//System.out.println("qualified_type() can go to qualified_id()");
    try {
    //System.out.println("qualified_type() -- > IsFullyScopedTypeName()");
      if (sym.IsFullyScopedTypeName(GetFullyScopedName())) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      qualified_id();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void type_qualifier() throws ParseException {
 /*@bgen(jjtree) type_qualifier */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTYPE_QUALIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case CONST:
        jj_consume_token(CONST);
        break;
      case VOLATILE:
        jj_consume_token(VOLATILE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

/**
 * Very temporary. Just returns true if it sees a typedef. Finally, we will
 * need a structure that stores all the attributes.
 */
  final public boolean storage_class_specifier() throws ParseException {
 /*@bgen(jjtree) storage_class_specifier */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSTORAGE_CLASS_SPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case AUTO:
      case EXTERN:
      case REGISTER:
      case _STATIC:
        switch (jj_nt.kind) {
        case AUTO:
          jj_consume_token(AUTO);
          break;
        case REGISTER:
          jj_consume_token(REGISTER);
          break;
        case _STATIC:
          jj_consume_token(_STATIC);
          break;
        case EXTERN:
          jj_consume_token(EXTERN);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    {if (true) return false;}
        break;
      case TYPEDEF:
        jj_consume_token(TYPEDEF);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    {if (true) return true;}
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void builtin_type_specifier() throws ParseException {
 /*@bgen(jjtree) builtin_type_specifier */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTBUILTIN_TYPE_SPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case VOID:
        jj_consume_token(VOID);
        break;
      case BOOL:
        jj_consume_token(BOOL);
        break;
      case CHAR:
        jj_consume_token(CHAR);
        break;
      case SHORT:
        jj_consume_token(SHORT);
        break;
      case INT:
        jj_consume_token(INT);
        break;
      case LONG:
        jj_consume_token(LONG);
        break;
      case FLOAT:
        jj_consume_token(FLOAT);
        break;
      case DOUBLE:
        jj_consume_token(DOUBLE);
        break;
      case SIGNED:
        jj_consume_token(SIGNED);
        break;
      case UNSIGNED:
        jj_consume_token(UNSIGNED);
        break;
      case WCHAR_T:
        jj_consume_token(WCHAR_T);
        break;
      case DWORD:
        jj_consume_token(DWORD);
        break;
      case WORD:
        jj_consume_token(WORD);
        break;
      case BYTE:
        jj_consume_token(BYTE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

//protea changed in 1018
// normal type|<ID> type|(<ID>) <ID>/normal type type| (<ID>):: type| typedef <ID> type
// and int* <ID> type
  final public void extern_builtin_type_specifier() throws ParseException {
 /*@bgen(jjtree) extern_builtin_type_specifier */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEXTERN_BUILTIN_TYPE_SPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));//System.out.println("extern_builtin_type_specifier():"+ tokenImage [ getToken(1).kind ]+ "-"+ tokenImage [ getToken(2).kind ]+ "-"+ tokenImage [ getToken(3).kind ]);
    try {
      if (getToken(0).kind == TYPEDEF && getToken(1).kind == ID) {
        jj_consume_token(ID);
      } else if (getToken(1).kind == ID && getToken(2).kind == RPARENTHESIS &&
        (
          getToken(3).kind == ID
          || getToken(3).kind == SCOPE
          || getToken(3).kind == THIS
          || getToken(3).kind == NEW
          || getToken(3).kind == OCTALINT
          || getToken(3).kind == OCTALLONG
          || getToken(3).kind == UNSIGNED_OCTALINT
          || getToken(3).kind == UNSIGNED_OCTALLONG
          || getToken(3).kind == DECIMALINT
          || getToken(3).kind == DECIMALLONG
          || getToken(3).kind == UNSIGNED_DECIMALINT
          || getToken(3).kind == UNSIGNED_DECIMALLONG
          || getToken(3).kind == HEXADECIMALINT
          || getToken(3).kind == HEXADECIMALLONG
          || getToken(3).kind == UNSIGNED_HEXADECIMALINT
          || getToken(3).kind == UNSIGNED_HEXADECIMALLONG
          || getToken(3).kind == FLOATONE
          || getToken(3).kind == FLOATTWO
          || getToken(3).kind == CHARACTER
          || getToken(3).kind == STRING)) {
        jj_consume_token(ID);
      } else if (getToken(1).kind == ID &&
          (
            getToken(2).kind == STAR
            || getToken(2).kind == AMPERSAND
            || getToken(2).kind == ID
            || getToken(2).kind == VOID
            || getToken(2).kind == BOOL
            || getToken(2).kind == CHAR
            || getToken(2).kind == SHORT
            || getToken(2).kind == INT
            || getToken(2).kind == LONG
            || getToken(2).kind == FLOAT
            || getToken(2).kind == DOUBLE
            || getToken(2).kind == SIGNED
            || getToken(2).kind == UNSIGNED
            || getToken(2).kind == WCHAR_T
            || getToken(2).kind == DWORD
            || getToken(2).kind == WORD
            || getToken(2).kind == BYTE
            || getToken(2).kind == CONST
            || getToken(2).kind == VOLATILE
            || getToken(2).kind == INLINE
            || getToken(2).kind == VIRTUAL
            || getToken(2).kind == FRIEND
            || getToken(2).kind == AUTO
            || getToken(2).kind == REGISTER
            || getToken(2).kind == _STATIC
            || getToken(2).kind == EXTERN)) {
        jj_consume_token(ID);
      } else {
        switch (jj_nt.kind) {
        case VOID:
          jj_consume_token(VOID);
          break;
        case BOOL:
          jj_consume_token(BOOL);
          break;
        case CHAR:
          jj_consume_token(CHAR);
          break;
        case SHORT:
          jj_consume_token(SHORT);
          break;
        case INT:
          jj_consume_token(INT);
          break;
        case LONG:
          jj_consume_token(LONG);
          break;
        case FLOAT:
          jj_consume_token(FLOAT);
          break;
        case DOUBLE:
          jj_consume_token(DOUBLE);
          break;
        case SIGNED:
          jj_consume_token(SIGNED);
          break;
        case UNSIGNED:
          jj_consume_token(UNSIGNED);
          break;
        case WCHAR_T:
          jj_consume_token(WCHAR_T);
          break;
        case DWORD:
          jj_consume_token(DWORD);
          break;
        case WORD:
          jj_consume_token(WORD);
          break;
        case BYTE:
          jj_consume_token(BYTE);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_14:
      while (true) {
        if (jj_2_44(2147483647)) {
          ;
        } else {
          break label_14;
        }
        jj_consume_token(STAR);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void init_declarator_list(boolean isTypedef) throws ParseException {
 /*@bgen(jjtree) init_declarator_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTINIT_DECLARATOR_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));//System.out.println("init_declarator_list() -- > init_declarator { , init_declarator}");
    try {
      init_declarator(isTypedef);
      label_15:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_15;
        }
        jj_consume_token(COMMA);
        init_declarator(isTypedef);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void init_declarator(boolean isTypedef) throws ParseException {
 /*@bgen(jjtree) init_declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTINIT_DECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String name;
    try {
      name = declarator();
    //System.out.println("init_declarator:" + name);
    if (isTypedef) sym.PutTypeName(name);
      switch (jj_nt.kind) {
      case LPARENTHESIS:
      case ASSIGNEQUAL:
        switch (jj_nt.kind) {
        case ASSIGNEQUAL:
      //System.out.println("init_declarator -- > = initializer()");
          jj_consume_token(ASSIGNEQUAL);
          initializer();
          break;
        case LPARENTHESIS:
      //System.out.println("init_declarator -- >( expression_list() )");
          jj_consume_token(LPARENTHESIS);
          expression_list();
          jj_consume_token(RPARENTHESIS);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void class_head() throws ParseException {
 /*@bgen(jjtree) class_head */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCLASS_HEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case STRUCT:
        jj_consume_token(STRUCT);
        break;
      case UNION:
        jj_consume_token(UNION);
        break;
      case CLASS:
        jj_consume_token(CLASS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch (jj_nt.kind) {
      case ID:
        jj_consume_token(ID);
        switch (jj_nt.kind) {
        case COLON:
          base_clause(null);
          break;
        default:
          ;
        }
        break;
      default:
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void class_specifier() throws ParseException {
 /*@bgen(jjtree) class_specifier */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCLASS_SPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));ClassScope sc = null;
  Token t;
  //System.out.println("class_specifier()");
    try {
      switch (jj_nt.kind) {
      case STRUCT:
        jj_consume_token(STRUCT);
        break;
      case UNION:
        jj_consume_token(UNION);
        break;
      case CLASS:
        jj_consume_token(CLASS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch (jj_nt.kind) {
      case LCURLYBRACE:
        jj_consume_token(LCURLYBRACE);
      //System.out.println("try class_specifier() openScope");
      sym.OpenScope(null, false);
        label_16:
        while (true) {
          if (jj_2_45(1)) {
            ;
          } else {
            break label_16;
          }
        //System.out.println("class_specifier() -- > member_declaration() number 1");
          member_declaration();
        }
        jj_consume_token(RCURLYBRACE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      sym.CloseScope();
        break;
      default:
        if (jj_2_48(2)) {
          t = jj_consume_token(ID);
      //System.out.println("try class_specifier() openScope after a <ID>");
      sc = (ClassScope) sym.OpenScope(t.image, true);
          switch (jj_nt.kind) {
          case COLON:
            base_clause(sc);
            break;
          default:
            ;
          }
          jj_consume_token(LCURLYBRACE);
          label_17:
          while (true) {
            if (jj_2_46(1)) {
              ;
            } else {
              break label_17;
            }
        //System.out.println("number2 member_declaration() in class_specifier()");
            member_declaration();
          }
          jj_consume_token(RCURLYBRACE);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      sym.CloseScope();
        } else {
          switch (jj_nt.kind) {
          case ID:
            t = jj_consume_token(ID);
            if (jj_2_47(2)) {
              jj_consume_token(LESSTHAN);
              template_argument_list();
              jj_consume_token(GREATERTHAN);
            } else {
              ;
            }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      sym.PutTypeName(t.image);
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void base_clause(ClassScope scope) throws ParseException {
 /*@bgen(jjtree) base_clause */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTBASE_CLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(COLON);
      base_specifier(scope);
      label_18:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_18;
        }
        jj_consume_token(COMMA);
        base_specifier(scope);
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void base_specifier(ClassScope scope) throws ParseException {
 /*@bgen(jjtree) base_specifier */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTBASE_SPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      switch (jj_nt.kind) {
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
      case VIRTUAL:
        switch (jj_nt.kind) {
        case VIRTUAL:
          jj_consume_token(VIRTUAL);
          switch (jj_nt.kind) {
          case PRIVATE:
          case PROTECTED:
          case PUBLIC:
            access_specifier();
            break;
          default:
            ;
          }
          break;
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
          access_specifier();
          switch (jj_nt.kind) {
          case VIRTUAL:
            jj_consume_token(VIRTUAL);
            break;
          default:
            ;
          }
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        ;
      }
      if (jj_2_49(2147483647)) {
        scope_override();
      } else {
        ;
      }
      t = jj_consume_token(ID);
      switch (jj_nt.kind) {
      case LESSTHAN:
        jj_consume_token(LESSTHAN);
        template_argument_list();
        jj_consume_token(GREATERTHAN);
        break;
      default:
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    scope.AddSuper(sym.GetScope(t.image));
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void access_specifier() throws ParseException {
 /*@bgen(jjtree) access_specifier */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTACCESS_SPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case PUBLIC:
        jj_consume_token(PUBLIC);
        break;
      case PROTECTED:
        jj_consume_token(PROTECTED);
        break;
      case PRIVATE:
        jj_consume_token(PRIVATE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void member_declaration() throws ParseException {
 /*@bgen(jjtree) member_declaration */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTMEMBER_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));boolean isTypedef = false;
    try {
      if (jj_2_50(2147483647)) {
        declaration();
      } else if (jj_2_51(2147483647)) {
        enum_specifier();
        switch (jj_nt.kind) {
        case LPARENTHESIS:
        case SCOPE:
        case AMPERSAND:
        case STAR:
        case TILDE:
        case OPERATOR:
        case ID:
          member_declarator_list(false);
          break;
        default:
          ;
        }
        jj_consume_token(SEMICOLON);
      } else if (jj_2_52(2147483647)) {
        conversion_function_decl_or_def();
      } else if (jj_2_53(2147483647)) {
        dtor_definition();
      } else if (jj_2_54(2147483647)) {
        dtor_ctor_decl_spec();
        simple_dtor_declarator();
        jj_consume_token(SEMICOLON);
      } else if (jj_2_55(2147483647)) {
        ctor_definition();
      } else if (jj_2_56(2147483647)) {
        dtor_ctor_decl_spec();
        ctor_declarator();
        jj_consume_token(SEMICOLON);
      } else if (jj_2_57(2147483647)) {
  //System.out.println("member_declaration() -- > function_definition()");
        function_definition();
      } else if (jj_2_58(2147483647)) {
  //System.out.println("member_declaration() -- > declaration_specifiers()");
        isTypedef = declaration_specifiers();
        switch (jj_nt.kind) {
        case LPARENTHESIS:
        case SCOPE:
        case AMPERSAND:
        case STAR:
        case TILDE:
        case OPERATOR:
        case ID:
          member_declarator_list(isTypedef);
          break;
        default:
          ;
        }
        jj_consume_token(SEMICOLON);
      } else if (jj_2_59(2147483647)) {
  //System.out.println("member_declaration() -- > function_declarator");
        function_declarator(false);
        jj_consume_token(SEMICOLON);
      } else if (jj_2_60(3)) {
  //System.out.println("member_declaration() -- > qualified_id() ;");
        qualified_id();
        jj_consume_token(SEMICOLON);
      } else {
        switch (jj_nt.kind) {
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
          access_specifier();
          jj_consume_token(COLON);
          break;
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void member_declarator_list(boolean isTypedef) throws ParseException {
 /*@bgen(jjtree) member_declarator_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTMEMBER_DECLARATOR_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      member_declarator(isTypedef);
      switch (jj_nt.kind) {
      case ASSIGNEQUAL:
        jj_consume_token(ASSIGNEQUAL);
        jj_consume_token(OCTALINT);
        break;
      default:
        ;
      }
      label_19:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_19;
        }
        jj_consume_token(COMMA);
        member_declarator(isTypedef);
        switch (jj_nt.kind) {
        case ASSIGNEQUAL:
          jj_consume_token(ASSIGNEQUAL);
          jj_consume_token(OCTALINT);
          break;
        default:
          ;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void member_declarator(boolean isTypedef) throws ParseException {
 /*@bgen(jjtree) member_declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTMEMBER_DECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String name;
    try {
      name = declarator();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    if (isTypedef) sym.PutTypeName(name);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

//changed in 1027
  final public void conversion_function_decl_or_def() throws ParseException {
 /*@bgen(jjtree) conversion_function_decl_or_def */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCONVERSION_FUNCTION_DECL_OR_DEF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Scope sc = null;
  String name = null;
    try {
      if (jj_2_61(2147483647)) {
        name = scope_override();
      } else {
        ;
      }
      jj_consume_token(OPERATOR);
      declaration_specifiers();
      switch (jj_nt.kind) {
      case AMPERSAND:
      case STAR:
        switch (jj_nt.kind) {
        case STAR:
          jj_consume_token(STAR);
          break;
        case AMPERSAND:
          jj_consume_token(AMPERSAND);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        ;
      }
      jj_consume_token(LPARENTHESIS);
      if (jj_2_62(1)) {
        parameter_list();
      } else {
        ;
      }
      extern_parameter_list();
      if (jj_2_63(2)) {
        type_qualifier();
      } else {
        ;
      }
      switch (jj_nt.kind) {
      case THROW:
        exception_spec();
        break;
      default:
        ;
      }
      func_decl_def(null);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void enum_specifier() throws ParseException {
 /*@bgen(jjtree) enum_specifier */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTENUM_SPECIFIER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      jj_consume_token(ENUM);
      switch (jj_nt.kind) {
      case LCURLYBRACE:
        jj_consume_token(LCURLYBRACE);
        enumerator_list();
        jj_consume_token(RCURLYBRACE);
        break;
      case ID:
        t = jj_consume_token(ID);
        if (jj_2_64(2)) {
          jj_consume_token(LCURLYBRACE);
          enumerator_list();
          jj_consume_token(RCURLYBRACE);
        } else {
          ;
        }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      sym.PutTypeName(t.image);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void enumerator_list() throws ParseException {
 /*@bgen(jjtree) enumerator_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTENUMERATOR_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      enumerator();
      label_20:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_20;
        }
        jj_consume_token(COMMA);
        enumerator();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void enumerator() throws ParseException {
 /*@bgen(jjtree) enumerator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTENUMERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ID);
      switch (jj_nt.kind) {
      case ASSIGNEQUAL:
        jj_consume_token(ASSIGNEQUAL);
        constant_expression();
        break;
      default:
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ptr_operator() throws ParseException {
 /*@bgen(jjtree) ptr_operator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTPTR_OPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case AMPERSAND:
        jj_consume_token(AMPERSAND);
        cv_qualifier_seq();
        break;
      case STAR:
        jj_consume_token(STAR);
        cv_qualifier_seq();
        break;
      case SCOPE:
      case ID:
        ptr_to_member();
        cv_qualifier_seq();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void cv_qualifier_seq() throws ParseException {
 /*@bgen(jjtree) cv_qualifier_seq */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCV_QUALIFIER_SEQ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_67(2)) {
        switch (jj_nt.kind) {
        case CONST:
          jj_consume_token(CONST);
          if (jj_2_65(2)) {
            jj_consume_token(VOLATILE);
          } else {
            ;
          }
          break;
        case VOLATILE:
          jj_consume_token(VOLATILE);
          if (jj_2_66(2)) {
            jj_consume_token(CONST);
          } else {
            ;
          }
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

//changed in 1027
  final public String declarator() throws ParseException {
 /*@bgen(jjtree) declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String name;
    try {
      if (jj_2_68(2147483647)) {
        label_21:
        while (true) {
          switch (jj_nt.kind) {
          case ID:
            ;
            break;
          default:
            break label_21;
          }
          jj_consume_token(ID);
        }
        ptr_operator();
        name = declarator();
      } else {
        switch (jj_nt.kind) {
        case LPARENTHESIS:
        case SCOPE:
        case TILDE:
        case OPERATOR:
        case ID:
          name = direct_declarator();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    {if (true) return name;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

//changed in 1027
  final public String direct_declarator() throws ParseException {
 /*@bgen(jjtree) direct_declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDIRECT_DECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String name;
  Token t;
    try {
      if (jj_2_72(2)) {
        jj_consume_token(TILDE);
        t = jj_consume_token(ID);
        if (jj_2_69(2)) {
          declarator_suffixes();
        } else {
          ;
        }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    {if (true) return "~" + t.image;}
      } else {
        switch (jj_nt.kind) {
        case LPARENTHESIS:
  //System.out.println("direct_declarator(): (declarator())");
          jj_consume_token(LPARENTHESIS);
          name = declarator();
          jj_consume_token(RPARENTHESIS);
          if (jj_2_70(2)) {
            declarator_suffixes();
          } else {
            ;
          }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    {if (true) return name;}
          break;
        case SCOPE:
        case OPERATOR:
        case ID:
          name = qualified_id();
          if (jj_2_71(2)) {
            declarator_suffixes();
          } else {
            ;
          }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    {if (true) return name;}
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void declarator_suffixes() throws ParseException {
 /*@bgen(jjtree) declarator_suffixes */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDECLARATOR_SUFFIXES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case LSQUAREBRACKET:
        label_22:
        while (true) {
          jj_consume_token(LSQUAREBRACKET);
          if (jj_2_73(1)) {
            constant_expression();
          } else {
            ;
          }
          jj_consume_token(RSQUAREBRACKET);
          switch (jj_nt.kind) {
          case LSQUAREBRACKET:
            ;
            break;
          default:
            break label_22;
          }
        }
        break;
      case LPARENTHESIS:
        jj_consume_token(LPARENTHESIS);
        if (jj_2_74(1)) {
          parameter_list();
        } else {
          ;
        }
        extern_parameter_list();
        if (jj_2_75(2)) {
          type_qualifier();
        } else {
          ;
        }
        switch (jj_nt.kind) {
        case THROW:
          exception_spec();
          break;
        default:
          ;
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

/**
 * Used only for lookahead.
 */
  final public void function_declarator_lookahead() throws ParseException {
 /*@bgen(jjtree) function_declarator_lookahead */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTFUNCTION_DECLARATOR_LOOKAHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_23:
      while (true) {
        if (jj_2_76(2)) {
          ;
        } else {
          break label_23;
        }
        ptr_operator();
      }
      qualified_id();
      jj_consume_token(LPARENTHESIS);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public Scope function_declarator(boolean isTypedef) throws ParseException {
 /*@bgen(jjtree) function_declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTFUNCTION_DECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Scope sc = null;
    try {
      if (jj_2_77(2147483647)) {
      //System.out.println("ptr_operator() is true.");
        ptr_operator();
        sc = function_declarator(isTypedef);
      } else {
        switch (jj_nt.kind) {
        case SCOPE:
        case OPERATOR:
        case ID:
      //System.out.println("ptr_operator() is false.");
          sc = function_direct_declarator(isTypedef);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    {if (true) return sc;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Scope function_direct_declarator(boolean isTypedef) throws ParseException {
 /*@bgen(jjtree) function_direct_declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTFUNCTION_DIRECT_DECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String name;
  Scope sc = null;
  boolean closeReqd = false;
  //System.out.println("function_direct_declarator() -- > qualified_id()");
  //System.out.println("------------------------function_direct_declarator() "+ getToken(1).image+ "||"+ getToken(2).image+ "||"+ getToken(3).image);
    try {
      name = qualified_id();
    //System.out.println("function_direct_declarator():name = qualified_id()= " + name + "==");
    //System.out.println("****************function_direct_declarator() -- > GetScopeOfFullyScopeName");
    sc = sym.GetScopeOfFullyScopedName(name);
    if (closeReqd = (sc != null && sc != sym.GetCurScope()))
    {
      //System.out.println("function_direct_declarator():closeReqd = (sc != null && sc != sym.GetCurScope())");
      sym.OpenScope(sc);
    }
      jj_consume_token(LPARENTHESIS);
    //System.out.println("function_direct_declarator() in ( ? ):" + getToken(1).image + getToken(2).image + getToken(3).image);
      if (jj_2_78(1)) {
      //System.out.println("function_direct_declarator() -- > parameter_list()");
        parameter_list();
      } else {
        ;
      }
      extern_parameter_list();
      if (jj_2_79(2)) {
        type_qualifier();
      } else {
        ;
      }
      switch (jj_nt.kind) {
      case THROW:
        exception_spec();
        break;
      default:
        ;
      }
      if (jj_2_80(2147483647)) {
        jj_consume_token(ASSIGNEQUAL);
        jj_consume_token(OCTALINT);
      } else {
        ;
      }
      switch (jj_nt.kind) {
      case COLON:
        function_init();
        break;
      default:
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    if (closeReqd) sym.CloseScope();
    if (isTypedef) sym.PutTypeName(name);
    {if (true) return sc;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void function_declarator2(boolean isTypedef) throws ParseException {
 /*@bgen(jjtree) function_declarator2 */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTFUNCTION_DECLARATOR2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_81(2147483647)) {
      //System.out.println("ptr_operator() is true.");
        ptr_operator();
        function_declarator2(isTypedef);
      } else {
        switch (jj_nt.kind) {
        case SCOPE:
        case OPERATOR:
        case ID:
      //System.out.println("ptr_operator() is false.");
          function_direct_declarator2(isTypedef);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void function_direct_declarator2(boolean isTypedef) throws ParseException {
 /*@bgen(jjtree) function_direct_declarator2 */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTFUNCTION_DIRECT_DECLARATOR2);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String name;
  boolean closeReqd = false;
  //System.out.println("function_direct_declarator2() -- > qualified_id()");
  //System.out.println("------------------------function_direct_declarator2() "+ getToken(1).image+ "||"+ getToken(2).image+ "||"+ getToken(3).image);
    try {
      name = qualified_id();
      jj_consume_token(LPARENTHESIS);
    //System.out.println("function_direct_declarator() in ( ? ):" + getToken(1).image + getToken(2).image + getToken(3).image);
      if (jj_2_82(1)) {
      //System.out.println("function_direct_declarator() -- > parameter_list()");
        parameter_list();
      } else {
        ;
      }
      extern_parameter_list();
      if (jj_2_83(2)) {
        type_qualifier();
      } else {
        ;
      }
      switch (jj_nt.kind) {
      case THROW:
        exception_spec();
        break;
      default:
        ;
      }
      if (jj_2_84(2147483647)) {
        jj_consume_token(ASSIGNEQUAL);
        jj_consume_token(OCTALINT);
      } else {
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

//deal with-------------- unknow things )
  final public void extern_parameter_list() throws ParseException {
 /*@bgen(jjtree) extern_parameter_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEXTERN_PARAMETER_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));//System.out.println("extern_parameter_list().................");
  int kindd;
    try {
    while (getToken(1).kind != RPARENTHESIS)
    {
      kindd = getToken(1).kind;
      jj_consume_token(kindd);
    }
      jj_consume_token(RPARENTHESIS);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void function_init() throws ParseException {
 /*@bgen(jjtree) function_init */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTFUNCTION_INIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));boolean isTypedef = false;
  Scope sc = null;
  //System.out.println("void function_init() #function_init:");
    try {
      jj_consume_token(COLON);
      if (jj_2_87(1)) {
        isTypedef = declaration_specifiers();
        if (jj_2_85(2147483647)) {
        //System.out.println("function_init():ptr_operator() is true.");
          ptr_operator();
          function_declarator2(isTypedef);
        } else {
          switch (jj_nt.kind) {
          case SCOPE:
          case OPERATOR:
          case ID:
        //System.out.println("function_init():ptr_operator() is false.");
            function_direct_declarator2(isTypedef);
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } else {
        switch (jj_nt.kind) {
        case SCOPE:
        case AMPERSAND:
        case STAR:
        case OPERATOR:
        case ID:
          if (jj_2_86(2147483647)) {
        //System.out.println("function_init():ptr_operator() is true2.");
            ptr_operator();
            function_declarator2(false);
          } else {
            switch (jj_nt.kind) {
            case SCOPE:
            case OPERATOR:
            case ID:
        //System.out.println("function_init():ptr_operator() is false2.");
              function_direct_declarator2(false);
              break;
            default:
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void anytoken() throws ParseException {
    switch (jj_nt.kind) {
    case LCURLYBRACE:
      jj_consume_token(LCURLYBRACE);
      break;
    case RCURLYBRACE:
      jj_consume_token(RCURLYBRACE);
      break;
    case LSQUAREBRACKET:
      jj_consume_token(LSQUAREBRACKET);
      break;
    case RSQUAREBRACKET:
      jj_consume_token(RSQUAREBRACKET);
      break;
    case LPARENTHESIS:
      jj_consume_token(LPARENTHESIS);
      break;
    case RPARENTHESIS:
      jj_consume_token(RPARENTHESIS);
      break;
    case SCOPE:
      jj_consume_token(SCOPE);
      break;
    case COLON:
      jj_consume_token(COLON);
      break;
    case COMMA:
      jj_consume_token(COMMA);
      break;
    case QUESTIONMARK:
      jj_consume_token(QUESTIONMARK);
      break;
    case ELLIPSIS:
      jj_consume_token(ELLIPSIS);
      break;
    case ASSIGNEQUAL:
      jj_consume_token(ASSIGNEQUAL);
      break;
    case TIMESEQUAL:
      jj_consume_token(TIMESEQUAL);
      break;
    case DIVIDEEQUAL:
      jj_consume_token(DIVIDEEQUAL);
      break;
    case MODEQUAL:
      jj_consume_token(MODEQUAL);
      break;
    case PLUSEQUAL:
      jj_consume_token(PLUSEQUAL);
      break;
    case MINUSEQUAL:
      jj_consume_token(MINUSEQUAL);
      break;
    case SHIFTLEFTEQUAL:
      jj_consume_token(SHIFTLEFTEQUAL);
      break;
    case SHIFTRIGHTEQUAL:
      jj_consume_token(SHIFTRIGHTEQUAL);
      break;
    case BITWISEANDEQUAL:
      jj_consume_token(BITWISEANDEQUAL);
      break;
    case BITWISEXOREQUAL:
      jj_consume_token(BITWISEXOREQUAL);
      break;
    case BITWISEOREQUAL:
      jj_consume_token(BITWISEOREQUAL);
      break;
    case OR_OP:
      jj_consume_token(OR_OP);
      break;
    case AND_OP:
      jj_consume_token(AND_OP);
      break;
    case BITWISEOR:
      jj_consume_token(BITWISEOR);
      break;
    case BITWISEXOR:
      jj_consume_token(BITWISEXOR);
      break;
    case AMPERSAND:
      jj_consume_token(AMPERSAND);
      break;
    case EQUAL:
      jj_consume_token(EQUAL);
      break;
    case NOTEQUAL:
      jj_consume_token(NOTEQUAL);
      break;
    case LESSTHAN:
      jj_consume_token(LESSTHAN);
      break;
    case GREATERTHAN:
      jj_consume_token(GREATERTHAN);
      break;
    case LESSTHANOREQUALTO:
      jj_consume_token(LESSTHANOREQUALTO);
      break;
    case GREATERTHANOREQUALTO:
      jj_consume_token(GREATERTHANOREQUALTO);
      break;
    case SHIFTLEFT:
      jj_consume_token(SHIFTLEFT);
      break;
    case SHIFTRIGHT:
      jj_consume_token(SHIFTRIGHT);
      break;
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case STAR:
      jj_consume_token(STAR);
      break;
    case DIVIDE:
      jj_consume_token(DIVIDE);
      break;
    case MOD:
      jj_consume_token(MOD);
      break;
    case PLUSPLUS:
      jj_consume_token(PLUSPLUS);
      break;
    case MINUSMINUS:
      jj_consume_token(MINUSMINUS);
      break;
    case TILDE:
      jj_consume_token(TILDE);
      break;
    case NOT_OP:
      jj_consume_token(NOT_OP);
      break;
    case DOT:
      jj_consume_token(DOT);
      break;
    case POINTERTO:
      jj_consume_token(POINTERTO);
      break;
    case DOTSTAR:
      jj_consume_token(DOTSTAR);
      break;
    case ARROWSTAR:
      jj_consume_token(ARROWSTAR);
      break;
    case AND:
      jj_consume_token(AND);
      break;
    case AND_EQ:
      jj_consume_token(AND_EQ);
      break;
    case ASM:
      jj_consume_token(ASM);
      break;
    case AUTO:
      jj_consume_token(AUTO);
      break;
    case BITAND:
      jj_consume_token(BITAND);
      break;
    case BITOR:
      jj_consume_token(BITOR);
      break;
    case BOOL:
      jj_consume_token(BOOL);
      break;
    case BREAK:
      jj_consume_token(BREAK);
      break;
    case CASE:
      jj_consume_token(CASE);
      break;
    case CATCH:
      jj_consume_token(CATCH);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    case CLASS:
      jj_consume_token(CLASS);
      break;
    case COMPL:
      jj_consume_token(COMPL);
      break;
    case CONST:
      jj_consume_token(CONST);
      break;
    case CONST_CAST:
      jj_consume_token(CONST_CAST);
      break;
    case CONTINUE:
      jj_consume_token(CONTINUE);
      break;
    case _DEFAULT:
      jj_consume_token(_DEFAULT);
      break;
    case DELETE:
      jj_consume_token(DELETE);
      break;
    case DO:
      jj_consume_token(DO);
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
      break;
    case DYNAMIC_CAST:
      jj_consume_token(DYNAMIC_CAST);
      break;
    case ELSE:
      jj_consume_token(ELSE);
      break;
    case ENUM:
      jj_consume_token(ENUM);
      break;
    case EXPLICIT:
      jj_consume_token(EXPLICIT);
      break;
    case EXPORT:
      jj_consume_token(EXPORT);
      break;
    case EXTERN:
      jj_consume_token(EXTERN);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case FOR:
      jj_consume_token(FOR);
      break;
    case FRIEND:
      jj_consume_token(FRIEND);
      break;
    case GOTO:
      jj_consume_token(GOTO);
      break;
    case IF:
      jj_consume_token(IF);
      break;
    case INLINE:
      jj_consume_token(INLINE);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    case LONG:
      jj_consume_token(LONG);
      break;
    case mutable:
      jj_consume_token(mutable);
      break;
    case NAMESPACE:
      jj_consume_token(NAMESPACE);
      break;
    case NEW:
      jj_consume_token(NEW);
      break;
    case NOT:
      jj_consume_token(NOT);
      break;
    case NOT_EQ:
      jj_consume_token(NOT_EQ);
      break;
    case OPERATOR:
      jj_consume_token(OPERATOR);
      break;
    case OR:
      jj_consume_token(OR);
      break;
    case OR_EQ:
      jj_consume_token(OR_EQ);
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
      break;
    case PROTECTED:
      jj_consume_token(PROTECTED);
      break;
    case PUBLIC:
      jj_consume_token(PUBLIC);
      break;
    case REGISTER:
      jj_consume_token(REGISTER);
      break;
    case REINTERPRET:
      jj_consume_token(REINTERPRET);
      break;
    case RETURN:
      jj_consume_token(RETURN);
      break;
    case SHORT:
      jj_consume_token(SHORT);
      break;
    case SIGNED:
      jj_consume_token(SIGNED);
      break;
    case SIZEOF:
      jj_consume_token(SIZEOF);
      break;
    case _STATIC:
      jj_consume_token(_STATIC);
      break;
    case STATIC_CAST:
      jj_consume_token(STATIC_CAST);
      break;
    case STRUCT:
      jj_consume_token(STRUCT);
      break;
    case SWITCH:
      jj_consume_token(SWITCH);
      break;
    case TEMPLATE:
      jj_consume_token(TEMPLATE);
      break;
    case THIS:
      jj_consume_token(THIS);
      break;
    case THROW:
      jj_consume_token(THROW);
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    case TRY:
      jj_consume_token(TRY);
      break;
    case TYPEDEF:
      jj_consume_token(TYPEDEF);
      break;
    case TYPEID:
      jj_consume_token(TYPEID);
      break;
    case TYPENAME:
      jj_consume_token(TYPENAME);
      break;
    case UNION:
      jj_consume_token(UNION);
      break;
    case UNSIGNED:
      jj_consume_token(UNSIGNED);
      break;
    case USING:
      jj_consume_token(USING);
      break;
    case VIRTUAL:
      jj_consume_token(VIRTUAL);
      break;
    case VOID:
      jj_consume_token(VOID);
      break;
    case VOLATILE:
      jj_consume_token(VOLATILE);
      break;
    case WCHAR_T:
      jj_consume_token(WCHAR_T);
      break;
    case DWORD:
      jj_consume_token(DWORD);
      break;
    case WORD:
      jj_consume_token(WORD);
      break;
    case BYTE:
      jj_consume_token(BYTE);
      break;
    case WHILE:
      jj_consume_token(WHILE);
      break;
    case XOR:
      jj_consume_token(XOR);
      break;
    case XOR_EQ:
      jj_consume_token(XOR_EQ);
      break;
    case OCTALINT:
      jj_consume_token(OCTALINT);
      break;
    case OCTALLONG:
      jj_consume_token(OCTALLONG);
      break;
    case UNSIGNED_OCTALINT:
      jj_consume_token(UNSIGNED_OCTALINT);
      break;
    case UNSIGNED_OCTALLONG:
      jj_consume_token(UNSIGNED_OCTALLONG);
      break;
    case DECIMALINT:
      jj_consume_token(DECIMALINT);
      break;
    case DECIMALLONG:
      jj_consume_token(DECIMALLONG);
      break;
    case UNSIGNED_DECIMALINT:
      jj_consume_token(UNSIGNED_DECIMALINT);
      break;
    case UNSIGNED_DECIMALLONG:
      jj_consume_token(UNSIGNED_DECIMALLONG);
      break;
    case HEXADECIMALINT:
      jj_consume_token(HEXADECIMALINT);
      break;
    case HEXADECIMALLONG:
      jj_consume_token(HEXADECIMALLONG);
      break;
    case UNSIGNED_HEXADECIMALINT:
      jj_consume_token(UNSIGNED_HEXADECIMALINT);
      break;
    case UNSIGNED_HEXADECIMALLONG:
      jj_consume_token(UNSIGNED_HEXADECIMALLONG);
      break;
    case FLOATONE:
      jj_consume_token(FLOATONE);
      break;
    case FLOATTWO:
      jj_consume_token(FLOATTWO);
      break;
    case CHARACTER:
      jj_consume_token(CHARACTER);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case ID:
      jj_consume_token(ID);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void dtor_ctor_decl_spec() throws ParseException {
 /*@bgen(jjtree) dtor_ctor_decl_spec */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDTOR_CTOR_DECL_SPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case INLINE:
      case VIRTUAL:
        switch (jj_nt.kind) {
        case VIRTUAL:
          jj_consume_token(VIRTUAL);
          switch (jj_nt.kind) {
          case INLINE:
            jj_consume_token(INLINE);
            break;
          default:
            ;
          }
          break;
        case INLINE:
          jj_consume_token(INLINE);
          switch (jj_nt.kind) {
          case VIRTUAL:
            jj_consume_token(VIRTUAL);
            break;
          default:
            ;
          }
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        ;
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void dtor_definition() throws ParseException {
 /*@bgen(jjtree) dtor_definition */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDTOR_DEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case TEMPLATE:
        template_head();
        break;
      default:
        ;
      }
      dtor_ctor_decl_spec();
      dtor_declarator();
      compound_statement();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ctor_definition() throws ParseException {
 /*@bgen(jjtree) ctor_definition */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCTOR_DEFINITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Scope sc = null;
  boolean closeReqd = false;
    try {
      dtor_ctor_decl_spec();
      sc = ctor_declarator();
    if (closeReqd = (sc != null && sc != sym.GetCurScope())) sym.OpenScope(sc);
      switch (jj_nt.kind) {
      case THROW:
        exception_spec();
        break;
      default:
        ;
      }
      switch (jj_nt.kind) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      case LCURLYBRACE:
      case COLON:
        switch (jj_nt.kind) {
        case COLON:
          ctor_initializer();
          break;
        default:
          ;
        }
        compound_statement();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    if (closeReqd) sym.CloseScope();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void ctor_declarator_lookahead() throws ParseException {
 /*@bgen(jjtree) ctor_declarator_lookahead */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCTOR_DECLARATOR_LOOKAHEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (IsCtor()) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      qualified_id();
      jj_consume_token(LPARENTHESIS);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public Scope ctor_declarator() throws ParseException {
 /*@bgen(jjtree) ctor_declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCTOR_DECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String name;
  Scope sc = null;
  boolean closeReqd = false;
    try {
      if (IsCtor()) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      name = qualified_id();
    //System.out.println("****************ctor_declarator() -- > GetScopeOfFullyScopeName");
    sc = sym.GetScopeOfFullyScopedName(name);
    if (closeReqd = (sc != null && sc != sym.GetCurScope())) sym.OpenScope(sc);
      jj_consume_token(LPARENTHESIS);
      if (jj_2_88(2)) {
        parameter_list();
      } else {
        ;
      }
      extern_parameter_list();
      if (jj_2_89(2)) {
        exception_spec();
      } else {
        ;
      }
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    if (closeReqd) sym.CloseScope();
    {if (true) return sc;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void ctor_initializer() throws ParseException {
 /*@bgen(jjtree) ctor_initializer */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCTOR_INITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(COLON);
      superclass_init();
      label_24:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_24;
        }
        jj_consume_token(COMMA);
        superclass_init();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void superclass_init() throws ParseException {
 /*@bgen(jjtree) superclass_init */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSUPERCLASS_INIT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      qualified_id();
      jj_consume_token(LPARENTHESIS);
      if (jj_2_90(1)) {
        expression_list();
      } else {
        ;
      }
      jj_consume_token(RPARENTHESIS);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void dtor_declarator() throws ParseException {
 /*@bgen(jjtree) dtor_declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDTOR_DECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_91(2147483647)) {
        scope_override();
      } else {
        ;
      }
      simple_dtor_declarator();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void simple_dtor_declarator() throws ParseException {
 /*@bgen(jjtree) simple_dtor_declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSIMPLE_DTOR_DECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(TILDE);
      if (IsCtor()) {

      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(ID);
      jj_consume_token(LPARENTHESIS);
      if (jj_2_92(1)) {
        parameter_list();
      } else {
        ;
      }
      extern_parameter_list();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void parameter_list() throws ParseException {
 /*@bgen(jjtree) parameter_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTPARAMETER_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_94(1)) {
        parameter_declaration_list();
        if (jj_2_93(2)) {
          switch (jj_nt.kind) {
          case COMMA:
            jj_consume_token(COMMA);
            break;
          default:
            ;
          }
          jj_consume_token(ELLIPSIS);
        } else {
          ;
        }
      } else {
        switch (jj_nt.kind) {
        case ELLIPSIS:
          jj_consume_token(ELLIPSIS);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void parameter_declaration_list() throws ParseException {
 /*@bgen(jjtree) parameter_declaration_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTPARAMETER_DECLARATION_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      parameter_declaration();
      label_25:
      while (true) {
        if (jj_2_95(2)) {
          ;
        } else {
          break label_25;
        }
        jj_consume_token(COMMA);
        parameter_declaration();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void parameter_declaration() throws ParseException {
 /*@bgen(jjtree) parameter_declaration */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTPARAMETER_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));//System.out.println("from parameter_list -- > decalration_specifiers()");
    try {
      declaration_specifiers();
      if (jj_2_96(2147483647)) {
        declarator();
      } else {
        abstract_declarator();
      }
      switch (jj_nt.kind) {
      case ASSIGNEQUAL:
        jj_consume_token(ASSIGNEQUAL);
        assignment_expression();
        break;
      default:
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void initializer() throws ParseException {
 /*@bgen(jjtree) initializer */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTINITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_98(3)) {
    //System.out.println("initializer() -- > { initializer(),initializer(),...}");
        jj_consume_token(LCURLYBRACE);
        initializer();
        label_26:
        while (true) {
          switch (jj_nt.kind) {
          case COMMA:
            ;
            break;
          default:
            break label_26;
          }
      //System.out.println("--------------------------In circle intializer()");
          jj_consume_token(COMMA);
          if (jj_2_97(1)) {
            initializer();
          } else {
            ;
          }
        }
        jj_consume_token(RCURLYBRACE);
      } else if (jj_2_99(1)) {
        assignment_expression();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    //System.out.println("initializer() -- > assignment_expression()");
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void type_name() throws ParseException {
 /*@bgen(jjtree) type_name */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTYPE_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
    //System.out.println("type_name() -- > declaration_specifiers()");
      declaration_specifiers();
      abstract_declarator();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void abstract_declarator() throws ParseException {
 /*@bgen(jjtree) abstract_declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTABSTRACT_DECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_101(2)) {
        switch (jj_nt.kind) {
        case LPARENTHESIS:
          jj_consume_token(LPARENTHESIS);
          abstract_declarator();
          jj_consume_token(RPARENTHESIS);
          label_27:
          while (true) {
            abstract_declarator_suffix();
            switch (jj_nt.kind) {
            case LSQUAREBRACKET:
            case LPARENTHESIS:
              ;
              break;
            default:
              break label_27;
            }
          }
          break;
        case LSQUAREBRACKET:
          label_28:
          while (true) {
            jj_consume_token(LSQUAREBRACKET);
            if (jj_2_100(1)) {
              constant_expression();
            } else {
              ;
            }
            jj_consume_token(RSQUAREBRACKET);
            switch (jj_nt.kind) {
            case LSQUAREBRACKET:
              ;
              break;
            default:
              break label_28;
            }
          }
          break;
        case SCOPE:
        case AMPERSAND:
        case STAR:
        case ID:
          ptr_operator();
          abstract_declarator();
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void abstract_declarator_suffix() throws ParseException {
 /*@bgen(jjtree) abstract_declarator_suffix */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTABSTRACT_DECLARATOR_SUFFIX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case LSQUAREBRACKET:
        jj_consume_token(LSQUAREBRACKET);
        if (jj_2_102(1)) {
          constant_expression();
        } else {
          ;
        }
        jj_consume_token(RSQUAREBRACKET);
        break;
      case LPARENTHESIS:
        jj_consume_token(LPARENTHESIS);
        if (jj_2_103(1)) {
          parameter_list();
        } else {
          ;
        }
        extern_parameter_list();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void template_head() throws ParseException {
 /*@bgen(jjtree) template_head */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTEMPLATE_HEAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(TEMPLATE);
      jj_consume_token(LESSTHAN);
      template_parameter_list();
      jj_consume_token(GREATERTHAN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void template_parameter_list() throws ParseException {
 /*@bgen(jjtree) template_parameter_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTEMPLATE_PARAMETER_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      template_parameter();
      label_29:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_29;
        }
        jj_consume_token(COMMA);
        template_parameter();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void template_parameter() throws ParseException {
 /*@bgen(jjtree) template_parameter */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTEMPLATE_PARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      if (jj_2_104(3)) {
        jj_consume_token(CLASS);
        t = jj_consume_token(ID);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    sym.PutTypeName(t.image);
      } else if (jj_2_105(1)) {
        parameter_declaration();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void template_id() throws ParseException {
 /*@bgen(jjtree) template_id */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTEMPLATE_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(ID);
      jj_consume_token(LESSTHAN);
      template_argument_list();
      jj_consume_token(GREATERTHAN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void template_argument_list() throws ParseException {
 /*@bgen(jjtree) template_argument_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTEMPLATE_ARGUMENT_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      template_argument();
      label_30:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_30;
        }
        jj_consume_token(COMMA);
        template_argument();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void template_argument() throws ParseException {
 /*@bgen(jjtree) template_argument */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTEMPLATE_ARGUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_106(3)) {
        type_name();
      } else if (jj_2_107(1)) {
        shift_expression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void statement_list() throws ParseException {
 /*@bgen(jjtree) statement_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSTATEMENT_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));//System.out.println("in statement_list -- > statement()");
    try {
      label_31:
      while (true) {
        statement();
        if (jj_2_108(2147483647)) {
          ;
        } else {
          break label_31;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

//changed in 1028 for std::
  final public void statement() throws ParseException {
 /*@bgen(jjtree) statement */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));//System.out.println("statement()"+getToken(1).image+getToken(2).image+getToken(3).image);
    try {
      if (jj_2_109(2)) {
        jj_consume_token(ID);
        jj_consume_token(COLON);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    //System.out.println("for goto!! in statement()");
      } else if (getToken(1).kind == __TRY || getToken(1).kind == __ASM || getToken(1).kind == __FINALLY) {
        switch (jj_nt.kind) {
        case __TRY:
          jj_consume_token(__TRY);
          break;
        case __ASM:
          jj_consume_token(__ASM);
          break;
        case __FINALLY:
          jj_consume_token(__FINALLY);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
        compound_statement();
      } else {
        switch (jj_nt.kind) {
        case __EXCEPT:
          jj_consume_token(__EXCEPT);
          switch (jj_nt.kind) {
          case LPARENTHESIS:
            jj_consume_token(LPARENTHESIS);
            expression_list();
            jj_consume_token(RPARENTHESIS);
            break;
          default:
            ;
          }
          compound_statement();
          break;
        case __LEAVE:
          jj_consume_token(__LEAVE);
          jj_consume_token(SEMICOLON);
          break;
        default:
          if (jj_2_110(2147483647)) {
    //System.out.println("from statement() to Scope_declaration()");
            Scope_declaration();
          } else if (jj_2_111(2147483647)) {
    //System.out.println("statement()  -- >  declaration()");
            declaration();
          } else if (jj_2_112(2147483647)) {
    //System.out.println("statement() -- > expression();");
            switch (jj_nt.kind) {
            case SCOPE:
              jj_consume_token(SCOPE);
              break;
            default:
              ;
            }
            expression();
            jj_consume_token(SEMICOLON);
          } else {
            switch (jj_nt.kind) {
            case LCURLYBRACE:
    //System.out.println("statement() -- > { compound_statement() }");
              compound_statement();
              break;
            case IF:
            case SWITCH:
    //System.out.println("statement() -- > if (selection_statement()) {...}");
              selection_statement();
              break;
            case BREAK:
            case CONTINUE:
            case GOTO:
            case RETURN:
    //System.out.println("statement() -- > jump_statement()(like goto or break)");
              jump_statement();
              break;
            case SEMICOLON:
    //System.out.println("statement() -- > ;");
              jj_consume_token(SEMICOLON);
              break;
            case TRY:
              try_block();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    {
      //System.out.println("statement() -- > try_block()");
    }
              break;
            case THROW:
              throw_statement();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    //System.out.println("statement() -- > throw_statement()");
              break;
            default:
              if (jj_2_113(2)) {
                labeled_statement();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    //System.out.println("statement() -- > labeled_statement() like <ID>:");
              } else {
                switch (jj_nt.kind) {
                case DO:
                case FOR:
                case WHILE:
                  iteration_statement();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    //System.out.println("statement() -- > iteration_statement()");
                  break;
                default:
                  jj_consume_token(-1);
                  throw new ParseException();
                }
              }
            }
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void labeled_statement() throws ParseException {
 /*@bgen(jjtree) labeled_statement */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTLABELED_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case ID:
        jj_consume_token(ID);
        jj_consume_token(COLON);
        statement();
        break;
      case CASE:
        jj_consume_token(CASE);
        constant_expression();
        jj_consume_token(COLON);
        statement();
        break;
      case _DEFAULT:
        jj_consume_token(_DEFAULT);
        jj_consume_token(COLON);
        statement();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void compound_statement() throws ParseException {
 /*@bgen(jjtree) compound_statement */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCOMPOUND_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));//System.out.println("=====compound_statement=====");
    try {
      jj_consume_token(LCURLYBRACE);
    //System.out.println("open a scope in compound_statement");
    sym.OpenScope(null, false);
      if (jj_2_114(1)) {
      //System.out.println("compound_statement -- > statement_list");
        statement_list();
      } else {
        ;
      }
    //System.out.println("close a scope in compound_statement");
    sym.CloseScope();
      jj_consume_token(RCURLYBRACE);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void selection_statement() throws ParseException {
 /*@bgen(jjtree) selection_statement */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSELECTION_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case IF:
        jj_consume_token(IF);
        jj_consume_token(LPARENTHESIS);
        if (jj_2_115(4)) {
          expression();
        } else if (jj_2_116(1)) {
          declarationforif();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(RPARENTHESIS);
        statement();
        if (jj_2_117(2)) {
          jj_consume_token(ELSE);
          statement();
        } else {
          ;
        }
        break;
      case SWITCH:
        jj_consume_token(SWITCH);
        jj_consume_token(LPARENTHESIS);
        expression();
        jj_consume_token(RPARENTHESIS);
        statement();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void iteration_statement() throws ParseException {
 /*@bgen(jjtree) iteration_statement */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTITERATION_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case WHILE:
        jj_consume_token(WHILE);
        jj_consume_token(LPARENTHESIS);
        expression();
        jj_consume_token(RPARENTHESIS);
        statement();
        break;
      case DO:
        jj_consume_token(DO);
        statement();
        jj_consume_token(WHILE);
        jj_consume_token(LPARENTHESIS);
        expression();
        jj_consume_token(RPARENTHESIS);
        jj_consume_token(SEMICOLON);
        break;
      case FOR:
        jj_consume_token(FOR);
        jj_consume_token(LPARENTHESIS);
        if (jj_2_118(3)) {
          declaration();
        } else if (jj_2_119(1)) {
          expression();
          jj_consume_token(SEMICOLON);
        } else {
          switch (jj_nt.kind) {
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        if (jj_2_120(1)) {
          expression();
        } else {
          ;
        }
        jj_consume_token(SEMICOLON);
        if (jj_2_121(1)) {
          expression();
        } else {
          ;
        }
        jj_consume_token(RPARENTHESIS);
        statement();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void jump_statement() throws ParseException {
 /*@bgen(jjtree) jump_statement */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTJUMP_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case GOTO:
        jj_consume_token(GOTO);
        jj_consume_token(ID);
        jj_consume_token(SEMICOLON);
        break;
      case CONTINUE:
        jj_consume_token(CONTINUE);
        jj_consume_token(SEMICOLON);
        break;
      case BREAK:
        jj_consume_token(BREAK);
        jj_consume_token(SEMICOLON);
        break;
      case RETURN:
        jj_consume_token(RETURN);
        if (jj_2_122(1)) {
          expression();
        } else {
          ;
        }
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void try_block() throws ParseException {
 /*@bgen(jjtree) try_block */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTRY_BLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(TRY);
      compound_statement();
      label_32:
      while (true) {
        switch (jj_nt.kind) {
        case CATCH:
        case 169:
          ;
          break;
        default:
          break label_32;
        }
        handler();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void handler() throws ParseException {
 /*@bgen(jjtree) handler */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTHANDLER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case CATCH:
        jj_consume_token(CATCH);
        jj_consume_token(LPARENTHESIS);
        exception_declaration();
        jj_consume_token(RPARENTHESIS);
        compound_statement();
        break;
      case 169:
        jj_consume_token(169);
        compound_statement();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void exception_declaration() throws ParseException {
 /*@bgen(jjtree) exception_declaration */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEXCEPTION_DECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_123(1)) {
        parameter_declaration_list();
      } else {
        switch (jj_nt.kind) {
        case ELLIPSIS:
          jj_consume_token(ELLIPSIS);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void throw_statement() throws ParseException {
 /*@bgen(jjtree) throw_statement */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTTHROW_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(THROW);
      if (jj_2_124(1)) {
        assignment_expression();
      } else {
        ;
      }
      jj_consume_token(SEMICOLON);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void expression() throws ParseException {
 /*@bgen(jjtree) expression */
   CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEXPRESSION);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   jjtn000.jjtSetFirstToken(getToken(1));//System.out.println("expression() ----------------------------");
    try {
      assignment_expression();
      label_33:
      while (true) {
        if (jj_2_125(2)) {
          ;
        } else {
          break label_33;
        }
        jj_consume_token(COMMA);
        assignment_expression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void assignment_expression() throws ParseException {
 /*@bgen(jjtree) assignment_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTASSIGNMENT_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));//System.out.println("assignment_expression()-- > conditional_expression()[=assignment_expression()]");
    try {
      conditional_expression();
      switch (jj_nt.kind) {
      case ASSIGNEQUAL:
      case TIMESEQUAL:
      case DIVIDEEQUAL:
      case MODEQUAL:
      case PLUSEQUAL:
      case MINUSEQUAL:
      case SHIFTLEFTEQUAL:
      case SHIFTRIGHTEQUAL:
      case BITWISEANDEQUAL:
      case BITWISEXOREQUAL:
      case BITWISEOREQUAL:
        switch (jj_nt.kind) {
        case ASSIGNEQUAL:
          jj_consume_token(ASSIGNEQUAL);
          break;
        case TIMESEQUAL:
          jj_consume_token(TIMESEQUAL);
          break;
        case DIVIDEEQUAL:
          jj_consume_token(DIVIDEEQUAL);
          break;
        case MODEQUAL:
          jj_consume_token(MODEQUAL);
          break;
        case PLUSEQUAL:
          jj_consume_token(PLUSEQUAL);
          break;
        case MINUSEQUAL:
          jj_consume_token(MINUSEQUAL);
          break;
        case SHIFTLEFTEQUAL:
          jj_consume_token(SHIFTLEFTEQUAL);
          break;
        case SHIFTRIGHTEQUAL:
          jj_consume_token(SHIFTRIGHTEQUAL);
          break;
        case BITWISEANDEQUAL:
          jj_consume_token(BITWISEANDEQUAL);
          break;
        case BITWISEXOREQUAL:
          jj_consume_token(BITWISEXOREQUAL);
          break;
        case BITWISEOREQUAL:
          jj_consume_token(BITWISEOREQUAL);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTASSIGNMENT_EXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
        try {
          assignment_expression();
        } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
        } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtn001.jjtSetLastToken(getToken(0));
      }
        }
        break;
      default:
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void conditional_expression() throws ParseException {
 /*@bgen(jjtree) conditional_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCONDITIONAL_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));//System.out.println("conditional_expression()-- > logical_or_expression()[?xx:xx]");
    try {
      logical_or_expression();
      switch (jj_nt.kind) {
      case QUESTIONMARK:
        jj_consume_token(QUESTIONMARK);
        conditional_expression();
        jj_consume_token(COLON);
                                       CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTCONDITIONAL_EXPRESSION);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                       jjtn001.jjtSetFirstToken(getToken(1));
        try {
          conditional_expression();
        } catch (Throwable jjte001) {
                                       if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         {if (true) throw (RuntimeException)jjte001;}
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         {if (true) throw (ParseException)jjte001;}
                                       }
                                       {if (true) throw (Error)jjte001;}
        } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  3);
                                         jjtn001.jjtSetLastToken(getToken(0));
                                       }
        }
        break;
      default:
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void constant_expression() throws ParseException {
 /*@bgen(jjtree) constant_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCONSTANT_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      conditional_expression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void logical_or_expression() throws ParseException {
 /*@bgen(jjtree) logical_or_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTLOGICAL_OR_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));//System.out.println("logical_or_expression() -- > logical_and_expression() { || logical_and_expression()}");
    try {
      logical_and_expression();
      label_34:
      while (true) {
        switch (jj_nt.kind) {
        case OR_OP:
          ;
          break;
        default:
          break label_34;
        }
        jj_consume_token(OR_OP);
           CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTLOGICAL_OR_EXPRESSION);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
        try {
          logical_and_expression();
        } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
        } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
             jjtn001.jjtSetLastToken(getToken(0));
           }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void logical_and_expression() throws ParseException {
 /*@bgen(jjtree) logical_and_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTLOGICAL_AND_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));//System.out.println("logical_and_expression() -- > inclusive_or_expression(){ && inclusive_or_expression()}");
    try {
      inclusive_or_expression();
      label_35:
      while (true) {
        switch (jj_nt.kind) {
        case AND_OP:
          ;
          break;
        default:
          break label_35;
        }
        jj_consume_token(AND_OP);
           CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTLOGICAL_AND_EXPRESSION);
           boolean jjtc001 = true;
           jjtree.openNodeScope(jjtn001);
           jjtn001.jjtSetFirstToken(getToken(1));
        try {
          inclusive_or_expression();
        } catch (Throwable jjte001) {
           if (jjtc001) {
             jjtree.clearNodeScope(jjtn001);
             jjtc001 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte001 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte001;}
           }
           if (jjte001 instanceof ParseException) {
             {if (true) throw (ParseException)jjte001;}
           }
           {if (true) throw (Error)jjte001;}
        } finally {
           if (jjtc001) {
             jjtree.closeNodeScope(jjtn001,  2);
             jjtn001.jjtSetLastToken(getToken(0));
           }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void inclusive_or_expression() throws ParseException {
 /*@bgen(jjtree) inclusive_or_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTINCLUSIVE_OR_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));//System.out.println("inclusive_or_expression()-- > exclusive_or_expression() { | exclusive_or_expression()}");
    try {
      exclusive_or_expression();
      label_36:
      while (true) {
        switch (jj_nt.kind) {
        case BITWISEOR:
          ;
          break;
        default:
          break label_36;
        }
        jj_consume_token(BITWISEOR);
          CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTINCLUSIVE_OR_EXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        try {
          exclusive_or_expression();
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void exclusive_or_expression() throws ParseException {
 /*@bgen(jjtree) exclusive_or_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEXCLUSIVE_OR_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));//System.out.println("exclusive_or_expression()-- >and_expression() { ^and_expression()}");
    try {
      and_expression();
      label_37:
      while (true) {
        switch (jj_nt.kind) {
        case BITWISEXOR:
          ;
          break;
        default:
          break label_37;
        }
        jj_consume_token(BITWISEXOR);
          CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTEXCLUSIVE_OR_EXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        try {
          and_expression();
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void and_expression() throws ParseException {
 /*@bgen(jjtree) and_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTAND_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));//System.out.println("and_expression() -- > equality_expression(){ & equality_expression()}");
    try {
      equality_expression();
      label_38:
      while (true) {
        if (jj_2_126(2)) {
          ;
        } else {
          break label_38;
        }
        jj_consume_token(AMPERSAND);
          CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTAND_EXPRESSION);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        try {
          equality_expression();
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001,  2);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void equality_expression() throws ParseException {
 /*@bgen(jjtree) equality_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEQUALITY_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));//System.out.println("equality_expression() -- > relational_expression(){ !=/== relational_expression()}");
    try {
      relational_expression();
      label_39:
      while (true) {
        switch (jj_nt.kind) {
        case EQUAL:
        case NOTEQUAL:
          ;
          break;
        default:
          break label_39;
        }
        switch (jj_nt.kind) {
        case NOTEQUAL:
          jj_consume_token(NOTEQUAL);
          break;
        case EQUAL:
          jj_consume_token(EQUAL);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTEQUALITY_EXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
        try {
          relational_expression();
        } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
        } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtn001.jjtSetLastToken(getToken(0));
      }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void relational_expression() throws ParseException {
 /*@bgen(jjtree) relational_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTRELATIONAL_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));//System.out.println("relational_expression() -- > shift_expression(){ >/<.. shift_expression()}");
    try {
      shift_expression();
      label_40:
      while (true) {
        if (jj_2_127(2)) {
          ;
        } else {
          break label_40;
        }
        switch (jj_nt.kind) {
        case LESSTHAN:
          jj_consume_token(LESSTHAN);
          break;
        case GREATERTHAN:
          jj_consume_token(GREATERTHAN);
          break;
        case LESSTHANOREQUALTO:
          jj_consume_token(LESSTHANOREQUALTO);
          break;
        case GREATERTHANOREQUALTO:
          jj_consume_token(GREATERTHANOREQUALTO);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTRELATIONAL_EXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
        try {
          shift_expression();
        } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
        } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtn001.jjtSetLastToken(getToken(0));
      }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void shift_expression() throws ParseException {
 /*@bgen(jjtree) shift_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSHIFT_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));//System.out.println("shift_expression() -- > additive_expression() { >>/<< additive_expression()}");
    try {
      additive_expression();
      label_41:
      while (true) {
        switch (jj_nt.kind) {
        case SHIFTLEFT:
        case SHIFTRIGHT:
          ;
          break;
        default:
          break label_41;
        }
        switch (jj_nt.kind) {
        case SHIFTLEFT:
          jj_consume_token(SHIFTLEFT);
          break;
        case SHIFTRIGHT:
          jj_consume_token(SHIFTRIGHT);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTSHIFT_EXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
        try {
          additive_expression();
        } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
        } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtn001.jjtSetLastToken(getToken(0));
      }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void additive_expression() throws ParseException {
 /*@bgen(jjtree) additive_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTADDITIVE_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));//System.out.println("additive_expression() -- > multiplicative_expression() { +/- multiplicative_expression()}");
    try {
      multiplicative_expression();
      label_42:
      while (true) {
        if (jj_2_128(2)) {
          ;
        } else {
          break label_42;
        }
        switch (jj_nt.kind) {
        case PLUS:
          jj_consume_token(PLUS);
          break;
        case MINUS:
          jj_consume_token(MINUS);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTADDITIVE_EXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
        try {
          multiplicative_expression();
        } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
        } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtn001.jjtSetLastToken(getToken(0));
      }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void multiplicative_expression() throws ParseException {
 /*@bgen(jjtree) multiplicative_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTMULTIPLICATIVE_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));//System.out.println("multiplicative_expression() -- >pm_expression() { /_*_% pm_expression()}");
    try {
      pm_expression();
      label_43:
      while (true) {
        if (jj_2_129(2)) {
          ;
        } else {
          break label_43;
        }
        switch (jj_nt.kind) {
        case STAR:
          jj_consume_token(STAR);
          break;
        case DIVIDE:
          jj_consume_token(DIVIDE);
          break;
        case MOD:
          jj_consume_token(MOD);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTMULTIPLICATIVE_EXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
        try {
          pm_expression();
        } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
        } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001,  2);
        jjtn001.jjtSetLastToken(getToken(0));
      }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void pm_expression() throws ParseException {
 /*@bgen(jjtree) pm_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTPM_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));//System.out.println("pm_expression() -- > cast_expression() { ./-> cast_expression() }");
    try {
      cast_expression();
      label_44:
      while (true) {
        switch (jj_nt.kind) {
        case DOTSTAR:
        case ARROWSTAR:
          ;
          break;
        default:
          break label_44;
        }
        switch (jj_nt.kind) {
        case DOTSTAR:
          jj_consume_token(DOTSTAR);
          break;
        case ARROWSTAR:
          jj_consume_token(ARROWSTAR);
          break;
        default:
          jj_consume_token(-1);
          throw new ParseException();
        }
      CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTPM_EXPRESSION);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
        try {
          cast_expression();
        } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
        } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void cast_expression() throws ParseException {
 /*@bgen(jjtree) cast_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCAST_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_130(2147483647)) {
    //System.out.println("cast_expression() -- > (type_name) cast_expression()");
        jj_consume_token(LPARENTHESIS);
        type_name();
        jj_consume_token(RPARENTHESIS);
                        CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTCAST_EXPRESSION);
                        boolean jjtc001 = true;
                        jjtree.openNodeScope(jjtn001);
                        jjtn001.jjtSetFirstToken(getToken(1));
        try {
          cast_expression();
        } catch (Throwable jjte001) {
                        if (jjtc001) {
                          jjtree.clearNodeScope(jjtn001);
                          jjtc001 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte001 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte001;}
                        }
                        if (jjte001 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte001;}
                        }
                        {if (true) throw (Error)jjte001;}
        } finally {
                        if (jjtc001) {
                          jjtree.closeNodeScope(jjtn001,  2);
                          jjtn001.jjtSetLastToken(getToken(0));
                        }
        }
      } else if (jj_2_131(1)) {
  //System.out.println("cast_expression() -- > unary_expression()");
        unary_expression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void IncOrDecOperator() throws ParseException {
 /*@bgen(jjtree) IncOrDecOperator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTINCORDECOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case PLUSPLUS:
        jj_consume_token(PLUSPLUS);
        break;
      case MINUSMINUS:
        jj_consume_token(MINUSMINUS);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void SizeOfOperator() throws ParseException {
 /*@bgen(jjtree) SizeOfOperator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTSIZEOFOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SIZEOF);
      if (jj_2_132(2147483647)) {
        jj_consume_token(LPARENTHESIS);
        type_name();
        jj_consume_token(RPARENTHESIS);
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
      jjtn000.jjtSetLastToken(getToken(0));
      //System.out.println("SizeOfOperator() -- > ( type_name() )");
      } else if (jj_2_133(1)) {
        unary_expression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void unary_expression() throws ParseException {
 /*@bgen(jjtree) unary_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTUNARY_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case PLUSPLUS:
      case MINUSMINUS:
        IncOrDecOperator();
                       CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTUNARY_EXPRESSION);
                       boolean jjtc001 = true;
                       jjtree.openNodeScope(jjtn001);
                       jjtn001.jjtSetFirstToken(getToken(1));
        try {
          unary_expression();
        } catch (Throwable jjte001) {
                       if (jjtc001) {
                         jjtree.clearNodeScope(jjtn001);
                         jjtc001 = false;
                       } else {
                         jjtree.popNode();
                       }
                       if (jjte001 instanceof RuntimeException) {
                         {if (true) throw (RuntimeException)jjte001;}
                       }
                       if (jjte001 instanceof ParseException) {
                         {if (true) throw (ParseException)jjte001;}
                       }
                       {if (true) throw (Error)jjte001;}
        } finally {
                       if (jjtc001) {
                         jjtree.closeNodeScope(jjtn001,  2);
                         jjtn001.jjtSetLastToken(getToken(0));
                       }
        }
  jjtree.closeNodeScope(jjtn000, true);
  jjtc000 = false;
  jjtn000.jjtSetLastToken(getToken(0));
  //System.out.println("++/-- prefix!");
        break;
      default:
        if (jj_2_134(3)) {
  //System.out.println("unary_expression() -- > unary_operator() cast_expression()");
          unary_operator();
                   CPPSimpleNode jjtn002 = new CPPSimpleNode(JJTUNARY_EXPRESSION);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                   jjtn002.jjtSetFirstToken(getToken(1));
          try {
            cast_expression();
          } catch (Throwable jjte002) {
                   if (jjtc002) {
                     jjtree.clearNodeScope(jjtn002);
                     jjtc002 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte002 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte002;}
                   }
                   if (jjte002 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte002;}
                   }
                   {if (true) throw (Error)jjte002;}
          } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002,  2);
                     jjtn002.jjtSetLastToken(getToken(0));
                   }
          }
        } else {
          switch (jj_nt.kind) {
          case SIZEOF:
  //System.out.println("unary_expression() -- > SizeOfOperator()");
  CPPSimpleNode jjtn003 = new CPPSimpleNode(JJTUNARY_EXPRESSION);
  boolean jjtc003 = true;
  jjtree.openNodeScope(jjtn003);
  jjtn003.jjtSetFirstToken(getToken(1));
            try {
              SizeOfOperator();
            } catch (Throwable jjte003) {
  if (jjtc003) {
    jjtree.clearNodeScope(jjtn003);
    jjtc003 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte003 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte003;}
  }
  if (jjte003 instanceof ParseException) {
    {if (true) throw (ParseException)jjte003;}
  }
  {if (true) throw (Error)jjte003;}
            } finally {
  if (jjtc003) {
    jjtree.closeNodeScope(jjtn003,  1);
    jjtn003.jjtSetLastToken(getToken(0));
  }
            }
            break;
          default:
            if (jj_2_135(1)) {
  //System.out.println("unary_expression() -- > postfix_expression()");
              postfix_expression();
            } else {
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

//changed in 1028 for new ...
  final public void new_expression() throws ParseException {
 /*@bgen(jjtree) new_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTNEW_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_136(2147483647)) {
        jj_consume_token(SCOPE);
      } else {
        ;
      }
      jj_consume_token(NEW);
      if (jj_2_140(2147483647)) {
        jj_consume_token(ID);
      while(getToken(1).kind != SEMICOLON) {
        jj_consume_token(getToken(1).kind);
      }
      } else if (jj_2_141(2147483647)) {
        jj_consume_token(LPARENTHESIS);
        type_name();
        jj_consume_token(RPARENTHESIS);
      } else if (jj_2_142(1)) {
        if (jj_2_137(2147483647)) {
        //System.out.println("new_expression()-- >(expression_list())");
          jj_consume_token(LPARENTHESIS);
          expression_list();
          jj_consume_token(RPARENTHESIS);
        } else {
          ;
        }
        if (jj_2_138(2147483647)) {
          jj_consume_token(LPARENTHESIS);
          type_name();
          jj_consume_token(RPARENTHESIS);
        } else if (jj_2_139(2147483647)) {
          new_type_id();
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_143(2147483647)) {
        new_initializer();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void new_type_id() throws ParseException {
 /*@bgen(jjtree) new_type_id */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTNEW_TYPE_ID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      declaration_specifiers();
      if (jj_2_144(2147483647)) {
        new_declarator();
      } else {
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void new_declarator() throws ParseException {
 /*@bgen(jjtree) new_declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTNEW_DECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case LSQUAREBRACKET:
        direct_new_declarator();
        break;
      case SCOPE:
      case AMPERSAND:
      case STAR:
      case ID:
        ptr_operator();
        cv_qualifier_seq();
        if (jj_2_145(2)) {
          new_declarator();
        } else {
          ;
        }
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void direct_new_declarator() throws ParseException {
 /*@bgen(jjtree) direct_new_declarator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDIRECT_NEW_DECLARATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_45:
      while (true) {
        jj_consume_token(LSQUAREBRACKET);
        expression();
        jj_consume_token(RSQUAREBRACKET);
        if (jj_2_146(2)) {
          ;
        } else {
          break label_45;
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void new_initializer() throws ParseException {
 /*@bgen(jjtree) new_initializer */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTNEW_INITIALIZER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));//System.out.println("new_initializer() -- > ([expression_list()])");
    try {
      jj_consume_token(LPARENTHESIS);
      if (jj_2_147(1)) {
        expression_list();
      } else {
        ;
      }
      jj_consume_token(RPARENTHESIS);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void delete_expression() throws ParseException {
 /*@bgen(jjtree) delete_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTDELETE_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case 170:
        jj_consume_token(170);
        break;
      default:
        ;
      }
      jj_consume_token(DELETE);
      switch (jj_nt.kind) {
      case LSQUAREBRACKET:
        jj_consume_token(LSQUAREBRACKET);
        jj_consume_token(RSQUAREBRACKET);
        break;
      default:
        ;
      }
      cast_expression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void unary_operator() throws ParseException {
 /*@bgen(jjtree) unary_operator */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTUNARY_OPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case AMPERSAND:
        jj_consume_token(AMPERSAND);
        break;
      case STAR:
        jj_consume_token(STAR);
        break;
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      case TILDE:
        jj_consume_token(TILDE);
        break;
      case NOT_OP:
        jj_consume_token(NOT_OP);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

//protea: just don't know why postfix_expression(2) can make such a big difference
//changed in 1020
  final public void postfix_expression() throws ParseException {
 /*@bgen(jjtree) postfix_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTPOSTFIX_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));//System.out.println("postfix_expression() -- > primary_expression()");
    try {
      if (jj_2_151(3)) {
        primary_expression();
        label_46:
        while (true) {
          if (jj_2_148(2)) {
            ;
          } else {
            break label_46;
          }
          switch (jj_nt.kind) {
          case LSQUAREBRACKET:
            jj_consume_token(LSQUAREBRACKET);
            expression();
                         CPPSimpleNode jjtn001 = new CPPSimpleNode(JJTPOSTFIX_EXPRESSION);
                         boolean jjtc001 = true;
                         jjtree.openNodeScope(jjtn001);
                         jjtn001.jjtSetFirstToken(getToken(1));
            try {
              jj_consume_token(RSQUAREBRACKET);
            } finally {
                         if (jjtc001) {
                           jjtree.closeNodeScope(jjtn001,  2);
                           jjtn001.jjtSetLastToken(getToken(0));
                         }
            }
      //System.out.println("postfix_expression() -- > [expression()]");
            break;
          case LPARENTHESIS:
            jj_consume_token(LPARENTHESIS);
      //System.out.println("postfix_expression() -- > (expression_list()?)");
            if (jj_2_149(1)) {
        //System.out.println("postfix_expression() -- > expression_list()");
              expression_list();
            } else {
              ;
            }
      CPPSimpleNode jjtn002 = new CPPSimpleNode(JJTPOSTFIX_EXPRESSION);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtn002.jjtSetFirstToken(getToken(1));
            try {
              jj_consume_token(RPARENTHESIS);
            } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  1);
        jjtn002.jjtSetLastToken(getToken(0));
      }
            }
            break;
          case DOT:
            jj_consume_token(DOT);
        CPPSimpleNode jjtn003 = new CPPSimpleNode(JJTPOSTFIX_EXPRESSION);
        boolean jjtc003 = true;
        jjtree.openNodeScope(jjtn003);
        jjtn003.jjtSetFirstToken(getToken(1));
            try {
              id_expression();
            } catch (Throwable jjte003) {
        if (jjtc003) {
          jjtree.clearNodeScope(jjtn003);
          jjtc003 = false;
        } else {
          jjtree.popNode();
        }
        if (jjte003 instanceof RuntimeException) {
          {if (true) throw (RuntimeException)jjte003;}
        }
        if (jjte003 instanceof ParseException) {
          {if (true) throw (ParseException)jjte003;}
        }
        {if (true) throw (Error)jjte003;}
            } finally {
        if (jjtc003) {
          jjtree.closeNodeScope(jjtn003,  2);
          jjtn003.jjtSetLastToken(getToken(0));
        }
            }
  //System.out.println("postfix_expression() -- > . + id_expression()");
            break;
          case POINTERTO:
            jj_consume_token(POINTERTO);
         CPPSimpleNode jjtn004 = new CPPSimpleNode(JJTPOSTFIX_EXPRESSION);
         boolean jjtc004 = true;
         jjtree.openNodeScope(jjtn004);
         jjtn004.jjtSetFirstToken(getToken(1));
            try {
              id_expression();
            } catch (Throwable jjte004) {
         if (jjtc004) {
           jjtree.clearNodeScope(jjtn004);
           jjtc004 = false;
         } else {
           jjtree.popNode();
         }
         if (jjte004 instanceof RuntimeException) {
           {if (true) throw (RuntimeException)jjte004;}
         }
         if (jjte004 instanceof ParseException) {
           {if (true) throw (ParseException)jjte004;}
         }
         {if (true) throw (Error)jjte004;}
            } finally {
         if (jjtc004) {
           jjtree.closeNodeScope(jjtn004,  2);
           jjtn004.jjtSetLastToken(getToken(0));
         }
            }
  //System.out.println("postfix_expression() -- > -> + id_expression()");
            break;
          case PLUSPLUS:
          case MINUSMINUS:
    CPPSimpleNode jjtn005 = new CPPSimpleNode(JJTPOSTFIX_EXPRESSION);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
    jjtn005.jjtSetFirstToken(getToken(1));
            try {
              IncOrDecOperator();
            } catch (Throwable jjte005) {
    if (jjtc005) {
      jjtree.clearNodeScope(jjtn005);
      jjtc005 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte005 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte005;}
    }
    if (jjte005 instanceof ParseException) {
      {if (true) throw (ParseException)jjte005;}
    }
    {if (true) throw (Error)jjte005;}
            } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005,  2);
      jjtn005.jjtSetLastToken(getToken(0));
    }
            }
  //System.out.println("postfix_expression() -- > -> ++/--");
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } else if (jj_2_152(1)) {
  //System.out.println("postfix_expression() -- > simple_type_specifier()");
        simple_type_specifier();
        jj_consume_token(LPARENTHESIS);
        if (jj_2_150(1)) {
    //System.out.println("postfix_expression() -- > simple_type_specifier() + expression_list()");
          expression_list();
        } else {
          ;
        }
        jj_consume_token(RPARENTHESIS);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void id_expression() throws ParseException {
 /*@bgen(jjtree) id_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTID_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));String name="";
  Token t;
    try {
      if (jj_2_153(2147483647)) {
      //System.out.println("id_expression() -- > scope_override()");
        name = scope_override();
      //System.out.println("id_expression() -- > scope_override() we get the name:"+name);
      } else {
        ;
      }
      switch (jj_nt.kind) {
      case ID:
      //System.out.println("id_expression()" + tokenImage [ getToken(1).kind ] + getToken(1).image);
        jj_consume_token(ID);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    //System.out.println("for goto !!!");
        break;
      case OPERATOR:
        jj_consume_token(OPERATOR);
        optor();
        break;
      case TILDE:
        jj_consume_token(TILDE);
        jj_consume_token(ID);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

/*void ifdef_expression() #ifdef_expression():
{
  //System.out.println("new for ifdef");
}
{
  < _IFDEF >(expression())+
  < _ELSE > (expression())*
  < _ENDIF >
}*/
  final public void primary_expression() throws ParseException {
 /*@bgen(jjtree) primary_expression */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTPRIMARY_EXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case THIS:
        jj_consume_token(THIS);
        break;
      case STRING:
        label_47:
        while (true) {
      //System.out.println("primary_expression() -- > <STRING>:"+getToken(1).image);
          jj_consume_token(STRING);
          if (jj_2_154(2)) {
            ;
          } else {
            break label_47;
          }
        }
        break;
      case REINTERPRET:
        jj_consume_token(REINTERPRET);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
          jjtn000.jjtSetLastToken(getToken(0));
          //System.out.println("primary_expression() -- >reinterpret_cast");
          while(getToken(1).kind != SEMICOLON) {
            jj_consume_token(getToken(1).kind);
          }
        break;
      case LPARENTHESIS:
    //System.out.println("primary_expression() -- > (expression())");
        jj_consume_token(LPARENTHESIS);
        expression();
        jj_consume_token(RPARENTHESIS);
        break;
      default:
        if (jj_2_155(2147483647)) {
    //System.out.println("primary_expression() -- > (new_expression())");
          new_expression();
        } else if (jj_2_156(2147483647)) {
          delete_expression();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    //System.out.println("primary_expression() -- > (delete_expression())");
        } else {
          switch (jj_nt.kind) {
          case SCOPE:
          case TILDE:
          case OPERATOR:
          case ID:
    //System.out.println("primary_expression() -- > (id_expression())"+getToken(1).image+getToken(2).image);
            switch (jj_nt.kind) {
            case SCOPE:
              label_48:
              while (true) {
                jj_consume_token(SCOPE);
                switch (jj_nt.kind) {
                case SCOPE:
                  ;
                  break;
                default:
                  break label_48;
                }
              }
              break;
            default:
              switch (jj_nt.kind) {
              case SCOPE:
                jj_consume_token(SCOPE);
                break;
              default:
                ;
              }
            }
            id_expression();
            break;
          case FALSE:
          case OCTALINT:
          case OCTALLONG:
          case UNSIGNED_OCTALINT:
          case UNSIGNED_OCTALLONG:
          case DECIMALINT:
          case DECIMALLONG:
          case UNSIGNED_DECIMALINT:
          case UNSIGNED_DECIMALLONG:
          case HEXADECIMALINT:
          case HEXADECIMALLONG:
          case UNSIGNED_HEXADECIMALINT:
          case UNSIGNED_HEXADECIMALLONG:
          case FLOATONE:
          case FLOATTWO:
          case CHARACTER:
          case 171:
            constant();
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.jjtSetLastToken(getToken(0));
    //System.out.println("primary_expression() -- > (constant())");
            break;
          default:
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void expression_list() throws ParseException {
 /*@bgen(jjtree) expression_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEXPRESSION_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));//System.out.println("expression_list() -- > assignment_expression() { ,assignment_expression()}");
    try {
      assignment_expression();
      label_49:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_49;
        }
        jj_consume_token(COMMA);
        assignment_expression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void constant() throws ParseException {
 /*@bgen(jjtree) constant */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTCONSTANT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case OCTALINT:
        jj_consume_token(OCTALINT);
        break;
      case OCTALLONG:
        jj_consume_token(OCTALLONG);
        break;
      case DECIMALINT:
        jj_consume_token(DECIMALINT);
        break;
      case DECIMALLONG:
        jj_consume_token(DECIMALLONG);
        break;
      case HEXADECIMALINT:
        jj_consume_token(HEXADECIMALINT);
        break;
      case HEXADECIMALLONG:
        jj_consume_token(HEXADECIMALLONG);
        break;
      case UNSIGNED_OCTALINT:
        jj_consume_token(UNSIGNED_OCTALINT);
        break;
      case UNSIGNED_OCTALLONG:
        jj_consume_token(UNSIGNED_OCTALLONG);
        break;
      case UNSIGNED_DECIMALINT:
        jj_consume_token(UNSIGNED_DECIMALINT);
        break;
      case UNSIGNED_DECIMALLONG:
        jj_consume_token(UNSIGNED_DECIMALLONG);
        break;
      case UNSIGNED_HEXADECIMALINT:
        jj_consume_token(UNSIGNED_HEXADECIMALINT);
        break;
      case UNSIGNED_HEXADECIMALLONG:
        jj_consume_token(UNSIGNED_HEXADECIMALLONG);
        break;
      case CHARACTER:
        jj_consume_token(CHARACTER);
        break;
      case FLOATONE:
        jj_consume_token(FLOATONE);
        break;
      case FLOATTWO:
        jj_consume_token(FLOATTWO);
        break;
      case 171:
        jj_consume_token(171);
        break;
      case FALSE:
        jj_consume_token(FALSE);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void optor() throws ParseException {
 /*@bgen(jjtree) optor */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTOPTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch (jj_nt.kind) {
      case NEW:
        jj_consume_token(NEW);
        if (jj_2_157(2)) {
          jj_consume_token(LSQUAREBRACKET);
          jj_consume_token(RSQUAREBRACKET);
        } else {
          ;
        }
        break;
      case DELETE:
        jj_consume_token(DELETE);
        if (jj_2_158(2)) {
          jj_consume_token(LSQUAREBRACKET);
          jj_consume_token(RSQUAREBRACKET);
        } else {
          ;
        }
        break;
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      case STAR:
        jj_consume_token(STAR);
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        break;
      case MOD:
        jj_consume_token(MOD);
        break;
      case BITWISEXOR:
        jj_consume_token(BITWISEXOR);
        break;
      case AMPERSAND:
        jj_consume_token(AMPERSAND);
        break;
      case BITWISEOR:
        jj_consume_token(BITWISEOR);
        break;
      case TILDE:
        jj_consume_token(TILDE);
        break;
      case NOT_OP:
        jj_consume_token(NOT_OP);
        break;
      case ASSIGNEQUAL:
        jj_consume_token(ASSIGNEQUAL);
        break;
      case LESSTHAN:
        jj_consume_token(LESSTHAN);
        break;
      case GREATERTHAN:
        jj_consume_token(GREATERTHAN);
        break;
      case PLUSEQUAL:
        jj_consume_token(PLUSEQUAL);
        break;
      case MINUSEQUAL:
        jj_consume_token(MINUSEQUAL);
        break;
      case TIMESEQUAL:
        jj_consume_token(TIMESEQUAL);
        break;
      case DIVIDEEQUAL:
        jj_consume_token(DIVIDEEQUAL);
        break;
      case MODEQUAL:
        jj_consume_token(MODEQUAL);
        break;
      case BITWISEXOREQUAL:
        jj_consume_token(BITWISEXOREQUAL);
        break;
      case BITWISEANDEQUAL:
        jj_consume_token(BITWISEANDEQUAL);
        break;
      case BITWISEOREQUAL:
        jj_consume_token(BITWISEOREQUAL);
        break;
      case SHIFTLEFT:
        jj_consume_token(SHIFTLEFT);
        break;
      case SHIFTRIGHT:
        jj_consume_token(SHIFTRIGHT);
        break;
      case SHIFTRIGHTEQUAL:
        jj_consume_token(SHIFTRIGHTEQUAL);
        break;
      case SHIFTLEFTEQUAL:
        jj_consume_token(SHIFTLEFTEQUAL);
        break;
      case EQUAL:
        jj_consume_token(EQUAL);
        break;
      case NOTEQUAL:
        jj_consume_token(NOTEQUAL);
        break;
      case LESSTHANOREQUALTO:
        jj_consume_token(LESSTHANOREQUALTO);
        break;
      case GREATERTHANOREQUALTO:
        jj_consume_token(GREATERTHANOREQUALTO);
        break;
      case AND_OP:
        jj_consume_token(AND_OP);
        break;
      case OR_OP:
        jj_consume_token(OR_OP);
        break;
      case PLUSPLUS:
        jj_consume_token(PLUSPLUS);
        break;
      case MINUSMINUS:
        jj_consume_token(MINUSMINUS);
        break;
      case COMMA:
        jj_consume_token(COMMA);
        break;
      case ARROWSTAR:
        jj_consume_token(ARROWSTAR);
        break;
      case POINTERTO:
        jj_consume_token(POINTERTO);
        break;
      case LPARENTHESIS:
        jj_consume_token(LPARENTHESIS);
        jj_consume_token(RPARENTHESIS);
        break;
      case LSQUAREBRACKET:
        jj_consume_token(LSQUAREBRACKET);
        jj_consume_token(RSQUAREBRACKET);
        break;
      default:
        if (jj_2_160(1)) {
          declaration_specifiers();
          if (jj_2_159(2)) {
            switch (jj_nt.kind) {
            case STAR:
              jj_consume_token(STAR);
              break;
            case AMPERSAND:
              jj_consume_token(AMPERSAND);
              break;
            default:
              jj_consume_token(-1);
              throw new ParseException();
            }
          } else {
            ;
          }
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void exception_spec() throws ParseException {
 /*@bgen(jjtree) exception_spec */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEXCEPTION_SPEC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(THROW);
      jj_consume_token(LPARENTHESIS);
      exception_list();
      jj_consume_token(RPARENTHESIS);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  final public void exception_list() throws ParseException {
 /*@bgen(jjtree) exception_list */
  CPPSimpleNode jjtn000 = new CPPSimpleNode(JJTEXCEPTION_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      type_name();
      label_50:
      while (true) {
        switch (jj_nt.kind) {
        case COMMA:
          ;
          break;
        default:
          break label_50;
        }
        jj_consume_token(COMMA);
        type_name();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_100(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_101(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_102(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_103(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_103(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_104(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_104(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_105(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_105(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_106(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_106(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_107(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_107(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_108(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_108(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_109(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_109(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_110(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_110(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_111(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_111(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_112(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_112(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_113(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_113(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_114(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_114(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_115(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_115(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_116(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_116(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_117(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_117(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_118(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_118(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_119(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_119(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_120(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_120(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_121(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_121(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_122(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_122(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_123(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_123(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_124(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_124(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_125(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_125(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_126(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_126(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_127(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_127(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_128(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_128(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_129(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_129(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_130(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_130(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_131(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_131(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_132(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_132(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_133(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_133(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_134(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_134(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_135(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_135(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_136(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_136(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_137(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_137(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_138(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_138(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_139(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_139(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_140(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_140(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_141(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_141(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_142(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_142(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_143(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_143(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_144(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_144(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_145(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_145(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_146(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_146(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_147(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_147(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_148(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_148(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_149(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_149(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_150(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_150(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_151(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_151(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_152(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_152(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_153(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_153(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_154(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_154(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_155(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_155(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_156(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_156(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_157(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_157(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_158(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_158(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_159(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_159(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_160(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_160(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_3R_164() {
    if (jj_3R_95()) return true;
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) return true;
    }
    return false;
  }

  private boolean jj_3_76() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_76()) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_89()) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3R_358() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3_75() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3_74() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3_73() {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_74()) jj_scanpos = xsp;
    if (jj_3R_249()) return true;
    xsp = jj_scanpos;
    if (jj_3_75()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_358()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_266() {
    if (jj_scan_token(LSQUAREBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_73()) jj_scanpos = xsp;
    if (jj_scan_token(RSQUAREBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) return true;
    }
    return false;
  }

  private boolean jj_3R_194() {
    Token xsp;
    if (jj_3R_266()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_266()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_71() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_305() {
    if (jj_3R_89()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_71()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_70() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_304() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_102()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_70()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_69() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3_72() {
    if (jj_scan_token(TILDE)) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_69()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_268() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_72()) {
    jj_scanpos = xsp;
    if (jj_3R_304()) {
    jj_scanpos = xsp;
    if (jj_3R_305()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_68() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(168)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_3R_268()) return true;
    return false;
  }

  private boolean jj_3R_197() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(168)) { jj_scanpos = xsp; break; }
    }
    if (jj_3R_95()) return true;
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) return true;
    }
    return false;
  }

  private boolean jj_3_66() {
    if (jj_scan_token(CONST)) return true;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(VOLATILE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_66()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_65() {
    if (jj_scan_token(VOLATILE)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(CONST)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_65()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) return true;
    }
    return false;
  }

  private boolean jj_3R_264() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_67()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_193() {
    if (jj_3R_265()) return true;
    if (jj_3R_264()) return true;
    return false;
  }

  private boolean jj_3R_192() {
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_264()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) {
    jj_scanpos = xsp;
    if (jj_3R_192()) {
    jj_scanpos = xsp;
    if (jj_3R_193()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_scan_token(AMPERSAND)) return true;
    if (jj_3R_264()) return true;
    return false;
  }

  private boolean jj_3R_357() {
    if (jj_scan_token(ASSIGNEQUAL)) return true;
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_357()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_347() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_190()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_190()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_347()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_64() {
    if (jj_scan_token(LCURLYBRACE)) return true;
    if (jj_3R_92()) return true;
    if (jj_scan_token(RCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3R_288() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_64()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_287() {
    if (jj_scan_token(LCURLYBRACE)) return true;
    if (jj_3R_92()) return true;
    if (jj_scan_token(RCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_scan_token(ENUM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_287()) {
    jj_scanpos = xsp;
    if (jj_3R_288()) return true;
    }
    return false;
  }

  private boolean jj_3R_370() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3_63() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_386() {
    if (jj_scan_token(ASSIGNEQUAL)) return true;
    if (jj_scan_token(OCTALINT)) return true;
    return false;
  }

  private boolean jj_3_62() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3_61() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_369() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) return true;
    }
    return false;
  }

  private boolean jj_3R_381() {
    if (jj_scan_token(ASSIGNEQUAL)) return true;
    if (jj_scan_token(OCTALINT)) return true;
    return false;
  }

  private boolean jj_3R_290() {
    if (jj_3R_162()) return true;
    return false;
  }

  private boolean jj_3R_241() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_290()) jj_scanpos = xsp;
    if (jj_scan_token(OPERATOR)) return true;
    if (jj_3R_56()) return true;
    xsp = jj_scanpos;
    if (jj_3R_369()) jj_scanpos = xsp;
    if (jj_scan_token(LPARENTHESIS)) return true;
    xsp = jj_scanpos;
    if (jj_3_62()) jj_scanpos = xsp;
    if (jj_3R_249()) return true;
    xsp = jj_scanpos;
    if (jj_3_63()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_370()) jj_scanpos = xsp;
    if (jj_3R_350()) return true;
    return false;
  }

  private boolean jj_3R_380() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_382() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_380()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_386()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_372() {
    if (jj_3R_380()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_381()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_382()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_59() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_184() {
    if (jj_3R_259()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_60() {
    if (jj_3R_89()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_58() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_183() {
    if (jj_3R_64()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_366() {
    if (jj_3R_372()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_88()) jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_56() {
    if (jj_3R_52()) return true;
    if (jj_3R_53()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_3R_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_366()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_55() {
    if (jj_3R_52()) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_383() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_87() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(141)) return true;
    }
    return false;
  }

  private boolean jj_3_54() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_87()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(TILDE)) return true;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3_53() {
    if (jj_3R_52()) return true;
    if (jj_3R_60()) return true;
    if (jj_scan_token(LCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3R_373() {
    if (jj_3R_109()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_383()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_52() {
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_3R_52()) return true;
    if (jj_3R_258()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_3R_240()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(THROW)) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_373()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_51() {
    if (jj_scan_token(ENUM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(168)) jj_scanpos = xsp;
    if (jj_scan_token(LCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_3R_52()) return true;
    if (jj_3R_161()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(135)) jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    if (jj_scan_token(LCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_3R_239()) return true;
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_3R_241()) return true;
    return false;
  }

  private boolean jj_3R_365() {
    if (jj_3R_372()) return true;
    return false;
  }

  private boolean jj_3_159() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) return true;
    }
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_3R_172()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_365()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_160() {
    if (jj_3R_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_159()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) {
    jj_scanpos = xsp;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) {
    jj_scanpos = xsp;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) {
    jj_scanpos = xsp;
    if (jj_3R_183()) {
    jj_scanpos = xsp;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_302() {
    if (jj_scan_token(LSQUAREBRACKET)) return true;
    if (jj_scan_token(RSQUAREBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_301() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3R_259() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_49() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_337() {
    if (jj_scan_token(LESSTHAN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(GREATERTHAN)) return true;
    return false;
  }

  private boolean jj_3R_336() {
    if (jj_3R_162()) return true;
    return false;
  }

  private boolean jj_3R_345() {
    if (jj_3R_259()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(141)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_355() {
    if (jj_3R_259()) return true;
    return false;
  }

  private boolean jj_3R_335() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_344()) {
    jj_scanpos = xsp;
    if (jj_3R_345()) return true;
    }
    return false;
  }

  private boolean jj_3R_344() {
    if (jj_scan_token(VIRTUAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_355()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_323() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_335()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_336()) jj_scanpos = xsp;
    if (jj_scan_token(ID)) return true;
    xsp = jj_scanpos;
    if (jj_3R_337()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_158() {
    if (jj_scan_token(LSQUAREBRACKET)) return true;
    if (jj_scan_token(RSQUAREBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_324() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_323()) return true;
    return false;
  }

  private boolean jj_3R_300() {
    if (jj_scan_token(DELETE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_158()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_157() {
    if (jj_scan_token(LSQUAREBRACKET)) return true;
    if (jj_scan_token(RSQUAREBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_186() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_323()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_324()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_263() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_299()) {
    jj_scanpos = xsp;
    if (jj_3R_300()) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_3R_301()) {
    jj_scanpos = xsp;
    if (jj_3R_302()) {
    jj_scanpos = xsp;
    if (jj_3_160()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_299() {
    if (jj_scan_token(NEW)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_157()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_47() {
    if (jj_scan_token(LESSTHAN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(GREATERTHAN)) return true;
    return false;
  }

  private boolean jj_3R_297() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_47()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_46() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_3R_186()) return true;
    return false;
  }

  private boolean jj_3R_286() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(152)) {
    jj_scanpos = xsp;
    if (jj_scan_token(153)) {
    jj_scanpos = xsp;
    if (jj_scan_token(156)) {
    jj_scanpos = xsp;
    if (jj_scan_token(157)) {
    jj_scanpos = xsp;
    if (jj_scan_token(160)) {
    jj_scanpos = xsp;
    if (jj_scan_token(161)) {
    jj_scanpos = xsp;
    if (jj_scan_token(154)) {
    jj_scanpos = xsp;
    if (jj_scan_token(155)) {
    jj_scanpos = xsp;
    if (jj_scan_token(158)) {
    jj_scanpos = xsp;
    if (jj_scan_token(159)) {
    jj_scanpos = xsp;
    if (jj_scan_token(162)) {
    jj_scanpos = xsp;
    if (jj_scan_token(163)) {
    jj_scanpos = xsp;
    if (jj_scan_token(166)) {
    jj_scanpos = xsp;
    if (jj_scan_token(164)) {
    jj_scanpos = xsp;
    if (jj_scan_token(165)) {
    jj_scanpos = xsp;
    if (jj_scan_token(171)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_224() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3_48() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_86()) jj_scanpos = xsp;
    if (jj_scan_token(LCURLYBRACE)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_46()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_105()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_224()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_45() {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3R_236() {
    if (jj_3R_286()) return true;
    return false;
  }

  private boolean jj_3R_285() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_284() {
    Token xsp;
    if (jj_scan_token(31)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(31)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_296() {
    if (jj_scan_token(LCURLYBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_45()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_156() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_138()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(170)) jj_scanpos = xsp;
    if (jj_scan_token(DELETE)) return true;
    return false;
  }

  private boolean jj_3R_235() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_284()) {
    jj_scanpos = xsp;
    if (jj_3R_285()) return true;
    }
    if (jj_3R_228()) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_155() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_137()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(170)) jj_scanpos = xsp;
    if (jj_scan_token(NEW)) return true;
    return false;
  }

  private boolean jj_3R_171() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(138)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_296()) {
    jj_scanpos = xsp;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3R_297()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_234() {
    if (jj_3R_283()) return true;
    return false;
  }

  private boolean jj_3R_246() {
    if (jj_3R_186()) return true;
    return false;
  }

  private boolean jj_3R_233() {
    if (jj_3R_282()) return true;
    return false;
  }

  private boolean jj_3R_158() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_246()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_232() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_112()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3R_231() {
    if (jj_scan_token(REINTERPRET)) return true;
    return false;
  }

  private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(138)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_158()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_154() {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_326() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_99()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3R_230() {
    Token xsp;
    if (jj_3_154()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_154()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_135() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_3R_230()) {
    jj_scanpos = xsp;
    if (jj_3R_231()) {
    jj_scanpos = xsp;
    if (jj_3R_232()) {
    jj_scanpos = xsp;
    if (jj_3R_233()) {
    jj_scanpos = xsp;
    if (jj_3R_234()) {
    jj_scanpos = xsp;
    if (jj_3R_235()) {
    jj_scanpos = xsp;
    if (jj_3R_236()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_293() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_325()) {
    jj_scanpos = xsp;
    if (jj_3R_326()) return true;
    }
    return false;
  }

  private boolean jj_3R_325() {
    if (jj_scan_token(ASSIGNEQUAL)) return true;
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3R_254() {
    if (jj_3R_102()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_293()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_281() {
    if (jj_scan_token(TILDE)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_280() {
    if (jj_scan_token(OPERATOR)) return true;
    if (jj_3R_263()) return true;
    return false;
  }

  private boolean jj_3R_255() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_254()) return true;
    return false;
  }

  private boolean jj_3_44() {
    if (jj_scan_token(STAR)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_3R_254()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_255()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_153() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_279() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_278() {
    if (jj_3R_162()) return true;
    return false;
  }

  private boolean jj_3R_228() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_278()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_279()) {
    jj_scanpos = xsp;
    if (jj_3R_280()) {
    jj_scanpos = xsp;
    if (jj_3R_281()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_150() {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3_152() {
    if (jj_3R_136()) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_150()) jj_scanpos = xsp;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3R_134() {
    if (jj_3R_229()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(POINTERTO)) return true;
    if (jj_3R_228()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_228()) return true;
    return false;
  }

  private boolean jj_3_149() {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_149()) jj_scanpos = xsp;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_scan_token(LSQUAREBRACKET)) return true;
    if (jj_3R_112()) return true;
    if (jj_scan_token(RSQUAREBRACKET)) return true;
    return false;
  }

  private boolean jj_3_148() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) {
    jj_scanpos = xsp;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) {
    jj_scanpos = xsp;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_122() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_151()) {
    jj_scanpos = xsp;
    if (jj_3_152()) return true;
    }
    return false;
  }

  private boolean jj_3_151() {
    if (jj_3R_135()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_148()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_322() {
    if (jj_scan_token(LSQUAREBRACKET)) return true;
    if (jj_scan_token(RSQUAREBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(0).kind == TYPEDEF && getToken(1).kind == ID;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_scan_token(168)) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == ID && getToken(2).kind == RPARENTHESIS &&
  (
    getToken(3).kind == ID
    || getToken(3).kind == SCOPE
    || getToken(3).kind == THIS
    || getToken(3).kind == NEW
    || getToken(3).kind == OCTALINT
    || getToken(3).kind == OCTALLONG
    || getToken(3).kind == UNSIGNED_OCTALINT
    || getToken(3).kind == UNSIGNED_OCTALLONG
    || getToken(3).kind == DECIMALINT
    || getToken(3).kind == DECIMALLONG
    || getToken(3).kind == UNSIGNED_DECIMALINT
    || getToken(3).kind == UNSIGNED_DECIMALLONG
    || getToken(3).kind == HEXADECIMALINT
    || getToken(3).kind == HEXADECIMALLONG
    || getToken(3).kind == UNSIGNED_HEXADECIMALINT
    || getToken(3).kind == UNSIGNED_HEXADECIMALLONG
    || getToken(3).kind == FLOATONE
    || getToken(3).kind == FLOATTWO
    || getToken(3).kind == CHARACTER
    || getToken(3).kind == STRING);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_scan_token(168)) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == ID &&
    (
      getToken(2).kind == STAR
      || getToken(2).kind == AMPERSAND
      || getToken(2).kind == ID
      || getToken(2).kind == VOID
      || getToken(2).kind == BOOL
      || getToken(2).kind == CHAR
      || getToken(2).kind == SHORT
      || getToken(2).kind == INT
      || getToken(2).kind == LONG
      || getToken(2).kind == FLOAT
      || getToken(2).kind == DOUBLE
      || getToken(2).kind == SIGNED
      || getToken(2).kind == UNSIGNED
      || getToken(2).kind == WCHAR_T
      || getToken(2).kind == DWORD
      || getToken(2).kind == WORD
      || getToken(2).kind == BYTE
      || getToken(2).kind == CONST
      || getToken(2).kind == VOLATILE
      || getToken(2).kind == INLINE
      || getToken(2).kind == VIRTUAL
      || getToken(2).kind == FRIEND
      || getToken(2).kind == AUTO
      || getToken(2).kind == REGISTER
      || getToken(2).kind == _STATIC
      || getToken(2).kind == EXTERN);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_scan_token(168)) {
    jj_scanpos = xsp;
    if (jj_scan_token(142)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) {
    jj_scanpos = xsp;
    if (jj_scan_token(147)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_scan_token(63)) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_120() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_283() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(170)) jj_scanpos = xsp;
    if (jj_scan_token(DELETE)) return true;
    xsp = jj_scanpos;
    if (jj_3R_322()) jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3_147() {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_147()) jj_scanpos = xsp;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_146() {
    if (jj_scan_token(LSQUAREBRACKET)) return true;
    if (jj_3R_112()) return true;
    if (jj_scan_token(RSQUAREBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_277() {
    Token xsp;
    if (jj_3_146()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_146()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_295() {
    if (jj_scan_token(TYPEDEF)) return true;
    return false;
  }

  private boolean jj_3_145() {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3_144() {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_256() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_294()) {
    jj_scanpos = xsp;
    if (jj_3R_295()) return true;
    }
    return false;
  }

  private boolean jj_3R_294() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_227() {
    if (jj_3R_95()) return true;
    if (jj_3R_264()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_145()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_129() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) return true;
    }
    return false;
  }

  private boolean jj_3R_226() {
    if (jj_3R_277()) return true;
    return false;
  }

  private boolean jj_3R_124() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) return true;
    }
    return false;
  }

  private boolean jj_3_143() {
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3R_354() {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3_139() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) return true;
    }
    return false;
  }

  private boolean jj_3R_225() {
    if (jj_3R_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_354()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_138() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3R_321() {
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3R_170() {
    return false;
  }

  private boolean jj_3_137() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_3R_225()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    jj_lookingAhead = true;
    jj_semLA = sym.IsFullyScopedTypeName(GetFullyScopedName());
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_170()) return true;
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_141() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3R_123() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) jj_scanpos = xsp;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_265() {
    if (jj_3R_162()) return true;
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_99()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3R_262() {
    if (jj_scan_token(LESSTHAN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(GREATERTHAN)) return true;
    return false;
  }

  private boolean jj_3_142() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) return true;
    }
    return false;
  }

  private boolean jj_3_140() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_123()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_124()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_320() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_scan_token(OPERATOR)) return true;
    if (jj_3R_263()) return true;
    return false;
  }

  private boolean jj_3_136() {
    if (jj_scan_token(SCOPE)) return true;
    return false;
  }

  private boolean jj_3_43() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_188() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_262()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_319() {
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_3R_162()) return true;
    return false;
  }

  private boolean jj_3R_282() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) jj_scanpos = xsp;
    if (jj_scan_token(NEW)) return true;
    xsp = jj_scanpos;
    if (jj_3R_319()) {
    jj_scanpos = xsp;
    if (jj_3R_320()) {
    jj_scanpos = xsp;
    if (jj_3_142()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_321()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_89() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_187()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_188()) {
    jj_scanpos = xsp;
    if (jj_3R_189()) return true;
    }
    return false;
  }

  private boolean jj_3R_306() {
    if (jj_3R_331()) return true;
    return false;
  }

  private boolean jj_3_135() {
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3R_222() {
    if (jj_3R_276()) return true;
    return false;
  }

  private boolean jj_3R_242() {
    if (jj_scan_token(STD)) return true;
    if (jj_scan_token(SCOPE)) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_306()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_134() {
    if (jj_3R_120()) return true;
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_119() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_221()) {
    jj_scanpos = xsp;
    if (jj_3_134()) {
    jj_scanpos = xsp;
    if (jj_3R_222()) {
    jj_scanpos = xsp;
    if (jj_3_135()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_221() {
    if (jj_3R_229()) return true;
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3_132() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3_133() {
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(LESSTHAN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(GREATERTHAN)) return true;
    return false;
  }

  private boolean jj_3R_343() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3R_276() {
    if (jj_scan_token(SIZEOF)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_343()) {
    jj_scanpos = xsp;
    if (jj_3_133()) return true;
    }
    return false;
  }

  private boolean jj_3_42() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) jj_scanpos = xsp;
    if (jj_scan_token(SCOPE)) return true;
    return false;
  }

  private boolean jj_3R_251() {
    Token xsp;
    if (jj_3_42()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_42()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_229() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) return true;
    }
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_scan_token(LESSTHAN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(GREATERTHAN)) return true;
    return false;
  }

  private boolean jj_3_130() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3_41() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) jj_scanpos = xsp;
    if (jj_scan_token(SCOPE)) return true;
    return false;
  }

  private boolean jj_3_131() {
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_223()) {
    jj_scanpos = xsp;
    if (jj_3_131()) return true;
    }
    return false;
  }

  private boolean jj_3R_223() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_109()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_250() {
    if (jj_scan_token(SCOPE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_41()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_162() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_250()) {
    jj_scanpos = xsp;
    if (jj_3R_251()) return true;
    }
    return false;
  }

  private boolean jj_3R_379() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) return true;
    }
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3R_118() {
    if (jj_3R_121()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_379()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_257() {
    if (jj_scan_token(LESSTHAN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(GREATERTHAN)) return true;
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_scan_token(ID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_257()) jj_scanpos = xsp;
    if (jj_scan_token(SCOPE)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_3R_173()) return true;
    }
    return false;
  }

  private boolean jj_3_40() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3_129() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) return true;
    }
    }
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3_39() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_136() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) return true;
    }
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_3R_118()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_129()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_128() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) return true;
    }
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_201() {
    if (jj_3R_117()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_128()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_36() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_356() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) return true;
    }
    if (jj_3R_201()) return true;
    return false;
  }

  private boolean jj_3_35() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_3R_201()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_356()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_3R_172()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_171()) return true;
    return false;
  }

  private boolean jj_3_34() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3_35()) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3_127() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) return true;
    }
    }
    }
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_220() {
    if (jj_3R_110()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_127()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_37() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_77()) {
    jj_scanpos = xsp;
    if (jj_3R_78()) return true;
    }
    return false;
  }

  private boolean jj_3R_378() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) return true;
    }
    if (jj_3R_220()) return true;
    return false;
  }

  private boolean jj_3R_156() {
    if (jj_3R_68()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_29() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_116() {
    if (jj_3R_220()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_378()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3_126() {
    if (jj_scan_token(AMPERSAND)) return true;
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_3R_172()) return true;
    return false;
  }

  private boolean jj_3_27() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_348() {
    if (jj_3R_116()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_126()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_3R_171()) return true;
    return false;
  }

  private boolean jj_3_26() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3_28()) return true;
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_364() {
    if (jj_scan_token(BITWISEXOR)) return true;
    if (jj_3R_348()) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_338() {
    if (jj_3R_348()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_364()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_30() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_351() {
    if (jj_scan_token(BITWISEOR)) return true;
    if (jj_3R_338()) return true;
    return false;
  }

  private boolean jj_3_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) return true;
    }
    return false;
  }

  private boolean jj_3R_260() {
    if (jj_scan_token(LESSTHAN)) return true;
    if (jj_3R_85()) return true;
    if (jj_scan_token(GREATERTHAN)) return true;
    return false;
  }

  private boolean jj_3R_328() {
    if (jj_3R_338()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_351()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_68()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_24() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_341() {
    if (jj_scan_token(AND_OP)) return true;
    if (jj_3R_328()) return true;
    return false;
  }

  private boolean jj_3_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3_31()) return true;
    }
    return false;
  }

  private boolean jj_3R_303() {
    if (jj_3R_328()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_341()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_245() {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_333() {
    if (jj_scan_token(OR_OP)) return true;
    if (jj_3R_303()) return true;
    return false;
  }

  private boolean jj_3R_155() {
    Token xsp;
    if (jj_3R_245()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_245()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3_32()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_261() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) return true;
    }
    return false;
  }

  private boolean jj_3R_267() {
    if (jj_3R_303()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_333()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_scan_token(STD)) return true;
    if (jj_scan_token(SCOPE)) return true;
    if (jj_scan_token(ID)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_260()) { jj_scanpos = xsp; break; }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_261()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == STD;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3_38()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_318() {
    if (jj_scan_token(QUESTIONMARK)) return true;
    if (jj_3R_196()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_3R_267()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_318()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_3R_256()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(141)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_275() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_3R_196()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_275()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_23() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3_125() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_3R_105()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_125()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_124() {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3_21() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_scan_token(168)) return true;
    }
    return false;
  }

  private boolean jj_3R_273() {
    if (jj_scan_token(THROW)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_124()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_scan_token(EXTERN)) return true;
    if (jj_scan_token(STRING)) return true;
    Token xsp;
    if (jj_3_22()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_22()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_3_23()) return true;
    }
    return false;
  }

  private boolean jj_3_123() {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_349() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_123()) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) return true;
    }
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_3R_252()) return true;
    return false;
  }

  private boolean jj_3R_340() {
    if (jj_scan_token(169)) return true;
    if (jj_3R_237()) return true;
    return false;
  }

  private boolean jj_3R_332() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_339()) {
    jj_scanpos = xsp;
    if (jj_3R_340()) return true;
    }
    return false;
  }

  private boolean jj_3R_339() {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_349()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    if (jj_3R_237()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3R_313() {
    if (jj_3R_332()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_166()) return true;
    return false;
  }

  private boolean jj_3R_272() {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_237()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_313()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_63() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_19() {
    if (jj_3R_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_67()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_122() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_312() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_122()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_311() {
    if (jj_scan_token(BREAK)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_310() {
    if (jj_scan_token(CONTINUE)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_271() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_309()) {
    jj_scanpos = xsp;
    if (jj_3R_310()) {
    jj_scanpos = xsp;
    if (jj_3R_311()) {
    jj_scanpos = xsp;
    if (jj_3R_312()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_309() {
    if (jj_scan_token(GOTO)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_219() {
    if (jj_3R_252()) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3_121() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3_120() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_166()) return true;
    return false;
  }

  private boolean jj_3_119() {
    if (jj_3R_112()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_116() {
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3_118() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_115() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_65()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_316() {
    if (jj_scan_token(FOR)) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_118()) {
    jj_scanpos = xsp;
    if (jj_3_119()) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3_120()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3_121()) jj_scanpos = xsp;
    if (jj_scan_token(RPARENTHESIS)) return true;
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_315() {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_111()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_112()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_274() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_314()) {
    jj_scanpos = xsp;
    if (jj_3R_315()) {
    jj_scanpos = xsp;
    if (jj_3R_316()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_314() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_112()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_308() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_112()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_117() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_317() {
    if (jj_scan_token(LCURLYBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_14()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCURLYBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(33)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_115() {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_252() {
    if (jj_scan_token(EXTERN)) return true;
    if (jj_scan_token(STRING)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_317()) {
    jj_scanpos = xsp;
    if (jj_3_16()) return true;
    }
    return false;
  }

  private boolean jj_3R_270() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_307()) {
    jj_scanpos = xsp;
    if (jj_3R_308()) return true;
    }
    return false;
  }

  private boolean jj_3R_307() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_115()) {
    jj_scanpos = xsp;
    if (jj_3_116()) return true;
    }
    if (jj_scan_token(RPARENTHESIS)) return true;
    if (jj_3R_111()) return true;
    xsp = jj_scanpos;
    if (jj_3_117()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_114() {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_360() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(33)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_237() {
    if (jj_scan_token(LCURLYBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_114()) jj_scanpos = xsp;
    if (jj_scan_token(RCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3R_359() {
    if (jj_3R_237()) return true;
    return false;
  }

  private boolean jj_3R_217() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_216() {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_97()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_215() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_350() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_359()) {
    jj_scanpos = xsp;
    if (jj_3R_360()) return true;
    }
    return false;
  }

  private boolean jj_3R_214() {
    if (jj_3R_274()) return true;
    return false;
  }

  private boolean jj_3_113() {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_3R_64()) return true;
    if (jj_3R_350()) return true;
    return false;
  }

  private boolean jj_3R_213() {
    if (jj_3R_273()) return true;
    return false;
  }

  private boolean jj_3R_212() {
    if (jj_3R_272()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) return true;
    }
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_56()) return true;
    if (jj_3R_64()) return true;
    if (jj_3R_350()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(STD)) return true;
    if (jj_scan_token(SCOPE)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_211() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_210() {
    if (jj_3R_271()) return true;
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_3R_242()) return true;
    return false;
  }

  private boolean jj_3_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) jj_scanpos = xsp;
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_209() {
    if (jj_3R_270()) return true;
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(USING)) return true;
    if (jj_scan_token(NAMESPACE)) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3_111() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_208() {
    if (jj_3R_237()) return true;
    return false;
  }

  private boolean jj_3_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_54()) jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_52()) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_371() {
    if (jj_3R_166()) return true;
    return false;
  }

  private boolean jj_3_110() {
    if (jj_scan_token(STD)) return true;
    if (jj_scan_token(SCOPE)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_207() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(31)) jj_scanpos = xsp;
    if (jj_3R_112()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_371()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_206() {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_162()) return true;
    return false;
  }

  private boolean jj_3R_363() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_62()) jj_scanpos = xsp;
    if (jj_scan_token(OPERATOR)) return true;
    return false;
  }

  private boolean jj_3R_362() {
    if (jj_3R_240()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_3R_242()) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_3R_159()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_362()) {
    jj_scanpos = xsp;
    if (jj_3R_363()) {
    jj_scanpos = xsp;
    if (jj_3_4()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) jj_scanpos = xsp;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_scan_token(__LEAVE)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_269() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_99()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_3R_241()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_52()) return true;
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_scan_token(__EXCEPT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_269()) jj_scanpos = xsp;
    if (jj_3R_237()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3R_146() {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_59()) jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    if (jj_3R_60()) return true;
    if (jj_scan_token(LCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_3R_240()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(ENUM)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(168)) jj_scanpos = xsp;
    if (jj_scan_token(LCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3R_202() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(1)) {
    jj_scanpos = xsp;
    if (jj_scan_token(2)) {
    jj_scanpos = xsp;
    if (jj_scan_token(4)) return true;
    }
    }
    if (jj_3R_237()) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_3R_239()) return true;
    return false;
  }

  private boolean jj_3R_361() {
    if (jj_3R_166()) return true;
    return false;
  }

  private boolean jj_3_108() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_109()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == __TRY || getToken(1).kind == __ASM || getToken(1).kind == __FINALLY;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) {
    jj_scanpos = xsp;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) {
    jj_scanpos = xsp;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) {
    jj_scanpos = xsp;
    if (jj_3R_208()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) {
    jj_scanpos = xsp;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) {
    jj_scanpos = xsp;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3_113()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_109() {
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_3R_172()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_361()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(135)) {
    jj_scanpos = xsp;
    if (jj_3R_157()) return true;
    }
    return false;
  }

  private boolean jj_3_5() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    if (jj_3R_58()) return true;
    if (jj_scan_token(LCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3R_238() {
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3R_218() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    Token xsp;
    if (jj_3R_218()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_218()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3R_142() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_238()) jj_scanpos = xsp;
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_141() {
    if (jj_scan_token(__LEAVE)) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_107() {
    if (jj_3R_110()) return true;
    return false;
  }

  private boolean jj_3_106() {
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_185() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_106()) {
    jj_scanpos = xsp;
    if (jj_3_107()) return true;
    }
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(__EXCEPT)) return true;
    if (jj_3R_237()) return true;
    return false;
  }

  private boolean jj_3R_327() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_3R_185()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_327()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_139() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(1)) {
    jj_scanpos = xsp;
    if (jj_scan_token(2)) {
    jj_scanpos = xsp;
    if (jj_scan_token(4)) return true;
    }
    }
    if (jj_3R_237()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = getToken(1).kind == __TRY || getToken(1).kind == __ASM || getToken(1).kind == __FINALLY;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) {
    jj_scanpos = xsp;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) {
    jj_scanpos = xsp;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_105() {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3_104() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_scan_token(ID)) return true;
    return false;
  }

  private boolean jj_3R_291() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_104()) {
    jj_scanpos = xsp;
    if (jj_3_105()) return true;
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3R_292() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_291()) return true;
    return false;
  }

  private boolean jj_3R_247() {
    if (jj_3R_291()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_292()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_159() {
    if (jj_scan_token(TEMPLATE)) return true;
    if (jj_scan_token(LESSTHAN)) return true;
    if (jj_3R_247()) return true;
    if (jj_scan_token(GREATERTHAN)) return true;
    return false;
  }

  private boolean jj_3_103() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_353() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_103()) jj_scanpos = xsp;
    if (jj_3R_249()) return true;
    return false;
  }

  private boolean jj_3_102() {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_342() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_352()) {
    jj_scanpos = xsp;
    if (jj_3R_353()) return true;
    }
    return false;
  }

  private boolean jj_3R_352() {
    if (jj_scan_token(LSQUAREBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_102()) jj_scanpos = xsp;
    if (jj_scan_token(RSQUAREBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_95()) return true;
    if (jj_3R_199()) return true;
    return false;
  }

  private boolean jj_3_100() {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_scan_token(LSQUAREBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_100()) jj_scanpos = xsp;
    if (jj_scan_token(RSQUAREBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_107() {
    Token xsp;
    if (jj_3R_200()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_200()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_334() {
    if (jj_3R_342()) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(LPARENTHESIS)) return true;
    if (jj_3R_199()) return true;
    if (jj_scan_token(RPARENTHESIS)) return true;
    Token xsp;
    if (jj_3R_334()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_334()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_101() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_199() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_101()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_56()) return true;
    if (jj_3R_199()) return true;
    return false;
  }

  private boolean jj_3_97() {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3_99() {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_97()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_103() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_98()) {
    jj_scanpos = xsp;
    if (jj_3_99()) return true;
    }
    return false;
  }

  private boolean jj_3_98() {
    if (jj_scan_token(LCURLYBRACE)) return true;
    if (jj_3R_103()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_104()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RCURLYBRACE)) return true;
    return false;
  }

  private boolean jj_3_96() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_346() {
    if (jj_scan_token(ASSIGNEQUAL)) return true;
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_330() {
    if (jj_3R_199()) return true;
    return false;
  }

  private boolean jj_3R_329() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_3R_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_329()) {
    jj_scanpos = xsp;
    if (jj_3R_330()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_346()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_95() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_3R_101()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_95()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_93() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(34)) jj_scanpos = xsp;
    if (jj_scan_token(ELLIPSIS)) return true;
    return false;
  }

  private boolean jj_3R_90() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_94()) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) return true;
    }
    return false;
  }

  private boolean jj_3_94() {
    if (jj_3R_100()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_93()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_92() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_248() {
    return false;
  }

  private boolean jj_3_91() {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_scan_token(TILDE)) return true;
    jj_lookingAhead = true;
    jj_semLA = IsCtor();
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_248()) return true;
    if (jj_scan_token(ID)) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_92()) jj_scanpos = xsp;
    if (jj_3R_249()) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_3R_162()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_160()) jj_scanpos = xsp;
    if (jj_3R_161()) return true;
    return false;
  }

  private boolean jj_3_90() {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_388() {
    if (jj_3R_89()) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_90()) jj_scanpos = xsp;
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3R_389() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_388()) return true;
    return false;
  }

  private boolean jj_3R_385() {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_388()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_389()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_89() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3_88() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_298() {
    return false;
  }

  private boolean jj_3R_258() {
    jj_lookingAhead = true;
    jj_semLA = IsCtor();
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_298()) return true;
    if (jj_3R_89()) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_88()) jj_scanpos = xsp;
    if (jj_3R_249()) return true;
    xsp = jj_scanpos;
    if (jj_3_89()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_153() {
    return false;
  }

  private boolean jj_3R_53() {
    jj_lookingAhead = true;
    jj_semLA = IsCtor();
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_153()) return true;
    if (jj_3R_89()) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3R_377() {
    if (jj_3R_385()) return true;
    return false;
  }

  private boolean jj_3R_368() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_377()) jj_scanpos = xsp;
    if (jj_3R_237()) return true;
    return false;
  }

  private boolean jj_3R_367() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_240() {
    if (jj_3R_52()) return true;
    if (jj_3R_258()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_367()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_3R_368()) return true;
    }
    return false;
  }

  private boolean jj_3R_289() {
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3R_239() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_289()) jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    if (jj_3R_60()) return true;
    if (jj_3R_237()) return true;
    return false;
  }

  private boolean jj_3R_244() {
    if (jj_scan_token(INLINE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(141)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_152() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) return true;
    }
    return false;
  }

  private boolean jj_3R_243() {
    if (jj_scan_token(VIRTUAL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(106)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_152()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_331() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) {
    jj_scanpos = xsp;
    if (jj_scan_token(58)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(66)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(70)) {
    jj_scanpos = xsp;
    if (jj_scan_token(71)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(74)) {
    jj_scanpos = xsp;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(76)) {
    jj_scanpos = xsp;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) {
    jj_scanpos = xsp;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(90)) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) {
    jj_scanpos = xsp;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(112)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(115)) {
    jj_scanpos = xsp;
    if (jj_scan_token(116)) {
    jj_scanpos = xsp;
    if (jj_scan_token(117)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(125)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(132)) {
    jj_scanpos = xsp;
    if (jj_scan_token(133)) {
    jj_scanpos = xsp;
    if (jj_scan_token(134)) {
    jj_scanpos = xsp;
    if (jj_scan_token(135)) {
    jj_scanpos = xsp;
    if (jj_scan_token(136)) {
    jj_scanpos = xsp;
    if (jj_scan_token(137)) {
    jj_scanpos = xsp;
    if (jj_scan_token(138)) {
    jj_scanpos = xsp;
    if (jj_scan_token(139)) {
    jj_scanpos = xsp;
    if (jj_scan_token(140)) {
    jj_scanpos = xsp;
    if (jj_scan_token(141)) {
    jj_scanpos = xsp;
    if (jj_scan_token(142)) {
    jj_scanpos = xsp;
    if (jj_scan_token(143)) {
    jj_scanpos = xsp;
    if (jj_scan_token(144)) {
    jj_scanpos = xsp;
    if (jj_scan_token(145)) {
    jj_scanpos = xsp;
    if (jj_scan_token(146)) {
    jj_scanpos = xsp;
    if (jj_scan_token(147)) {
    jj_scanpos = xsp;
    if (jj_scan_token(148)) {
    jj_scanpos = xsp;
    if (jj_scan_token(149)) {
    jj_scanpos = xsp;
    if (jj_scan_token(150)) {
    jj_scanpos = xsp;
    if (jj_scan_token(152)) {
    jj_scanpos = xsp;
    if (jj_scan_token(153)) {
    jj_scanpos = xsp;
    if (jj_scan_token(154)) {
    jj_scanpos = xsp;
    if (jj_scan_token(155)) {
    jj_scanpos = xsp;
    if (jj_scan_token(156)) {
    jj_scanpos = xsp;
    if (jj_scan_token(157)) {
    jj_scanpos = xsp;
    if (jj_scan_token(158)) {
    jj_scanpos = xsp;
    if (jj_scan_token(159)) {
    jj_scanpos = xsp;
    if (jj_scan_token(160)) {
    jj_scanpos = xsp;
    if (jj_scan_token(161)) {
    jj_scanpos = xsp;
    if (jj_scan_token(162)) {
    jj_scanpos = xsp;
    if (jj_scan_token(163)) {
    jj_scanpos = xsp;
    if (jj_scan_token(164)) {
    jj_scanpos = xsp;
    if (jj_scan_token(165)) {
    jj_scanpos = xsp;
    if (jj_scan_token(166)) {
    jj_scanpos = xsp;
    if (jj_scan_token(167)) {
    jj_scanpos = xsp;
    if (jj_scan_token(168)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_86() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_393() {
    if (jj_3R_395()) return true;
    return false;
  }

  private boolean jj_3R_392() {
    if (jj_3R_95()) return true;
    if (jj_3R_394()) return true;
    return false;
  }

  private boolean jj_3_85() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_387() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_392()) {
    jj_scanpos = xsp;
    if (jj_3R_393()) return true;
    }
    return false;
  }

  private boolean jj_3R_391() {
    if (jj_3R_395()) return true;
    return false;
  }

  private boolean jj_3R_390() {
    if (jj_3R_95()) return true;
    if (jj_3R_394()) return true;
    return false;
  }

  private boolean jj_3_87() {
    if (jj_3R_56()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_390()) {
    jj_scanpos = xsp;
    if (jj_3R_391()) return true;
    }
    return false;
  }

  private boolean jj_3R_384() {
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_87()) {
    jj_scanpos = xsp;
    if (jj_3R_387()) return true;
    }
    return false;
  }

  private boolean jj_3_84() {
    if (jj_scan_token(ASSIGNEQUAL)) return true;
    return false;
  }

  private boolean jj_3R_249() {
    if (jj_scan_token(RPARENTHESIS)) return true;
    return false;
  }

  private boolean jj_3R_399() {
    if (jj_scan_token(ASSIGNEQUAL)) return true;
    if (jj_scan_token(OCTALINT)) return true;
    return false;
  }

  private boolean jj_3R_398() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3_83() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3_82() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_395() {
    if (jj_3R_89()) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_82()) jj_scanpos = xsp;
    if (jj_3R_249()) return true;
    xsp = jj_scanpos;
    if (jj_3_83()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_398()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_399()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_81() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_397() {
    if (jj_3R_395()) return true;
    return false;
  }

  private boolean jj_3R_396() {
    if (jj_3R_95()) return true;
    if (jj_3R_394()) return true;
    return false;
  }

  private boolean jj_3R_394() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_396()) {
    jj_scanpos = xsp;
    if (jj_3R_397()) return true;
    }
    return false;
  }

  private boolean jj_3_80() {
    if (jj_scan_token(ASSIGNEQUAL)) return true;
    return false;
  }

  private boolean jj_3R_376() {
    if (jj_3R_384()) return true;
    return false;
  }

  private boolean jj_3R_375() {
    if (jj_scan_token(ASSIGNEQUAL)) return true;
    if (jj_scan_token(OCTALINT)) return true;
    return false;
  }

  private boolean jj_3R_374() {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3_79() {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3_78() {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3R_253() {
    if (jj_3R_89()) return true;
    if (jj_scan_token(LPARENTHESIS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_78()) jj_scanpos = xsp;
    if (jj_3R_249()) return true;
    xsp = jj_scanpos;
    if (jj_3_79()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_374()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_375()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_376()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_77() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_3R_253()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public CPPTreeParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;

  /** Constructor with InputStream. */
  public CPPTreeParser(InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CPPTreeParser(InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CPPTreeParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  /** Reinitialise. */
  public void ReInit(InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
  }

  /** Constructor. */
  public CPPTreeParser(Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new CPPTreeParserTokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  /** Reinitialise. */
  public void ReInit(Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
  }

  /** Constructor with generated Token Manager. */
  public CPPTreeParser(CPPTreeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  /** Reinitialise. */
  public void ReInit(CPPTreeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jjtree.reset();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      return token;
    }
    jj_nt = token;
    token = oldToken;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

 /** Generate ParseException. */
  
  public ParseException generateParseException() {
	String filename = "/home/tools/cncert/erroroutput.txt";
	Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    boolean append =false;  
    try {
    	//打开文件读写器，构建参数true以追加形式写文件

    	FileWriter writer = new FileWriter(filename, true);

    	writer.write(linshitest + ":Parse error at line " + line + ", column " + column + ".  Encountered: " + mess + "\r\n");

    	writer.close();

    	} catch (IOException e) {

    	e.printStackTrace();

    	}

    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }
  

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
