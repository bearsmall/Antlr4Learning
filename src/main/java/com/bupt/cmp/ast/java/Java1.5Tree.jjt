/*
 * Java 解析(树生成)器
 * 作者： 徐犇
 * JavaCC版本:	5.0
 * 创建日期:  2011/03/25
 * 最后修改: 	2013/05/08
 * 修改主要有：十六进制小数部分的表达式，允许一个文件中没有TypeDeclaration
 */
options
{
  //此选项将代码中的u转义符转换成对应的unicode字符，为了避免出错，先加上此选项，日后可以去掉，并改用预处理的方式实现
  JAVA_UNICODE_ESCAPE = true;
  
  //此选项允许代码中有中文，如果JAVA_UNICODE_ESCAPE设为false，则应该加上该选项
  //UNICODE_INPUT = true;

  //此选项使可以new出任意多个Parser对象
  STATIC = false;

  //不报告错误，可以提高效率
  ERROR_REPORTING = false;

  //自定义工厂类
  TOKEN_FACTORY = "TokenFactory";

  //记录节点首尾TOKEN
  TRACK_TOKENS = true;

  //缓存token，可以提高效率，但因此不适合交互式使用
  CACHE_TOKENS = true;

  JDK_VERSION = "1.5";

  NODE_CLASS = "JavaSimpleNode";
  NODE_PREFIX = "JavaAST";
}

PARSER_BEGIN(JavaTreeParser)
package examiner.ast.java;
import java.io.*;
import java.util.*;
import examiner.ast.*;

public class JavaTreeParser
{
  /**
    * Class to hold modifiers.
    */
  static public final class ModifierSet
  {
    /* Definitions of the bits in the modifiers field.  */
    public static final int PUBLIC = 0x0001;

    public static final int PROTECTED = 0x0002;

    public static final int PRIVATE = 0x0004;

    public static final int ABSTRACT = 0x0008;

    public static final int STATIC = 0x0010;

    public static final int FINAL = 0x0020;

    public static final int SYNCHRONIZED = 0x0040;

    public static final int NATIVE = 0x0080;

    public static final int TRANSIENT = 0x0100;

    public static final int VOLATILE = 0x0200;

    public static final int STRICTFP = 0x1000;

    /** A set of accessors that indicate whether the specified modifier
         is in the set. */
    public boolean isPublic(int modifiers)
    {
      return (modifiers & PUBLIC) != 0;
    }

    public boolean isProtected(int modifiers)
    {
      return (modifiers & PROTECTED) != 0;
    }

    public boolean isPrivate(int modifiers)
    {
      return (modifiers & PRIVATE) != 0;
    }

    public boolean isStatic(int modifiers)
    {
      return (modifiers & STATIC) != 0;
    }

    public boolean isAbstract(int modifiers)
    {
      return (modifiers & ABSTRACT) != 0;
    }

    public boolean isFinal(int modifiers)
    {
      return (modifiers & FINAL) != 0;
    }

    public boolean isNative(int modifiers)
    {
      return (modifiers & NATIVE) != 0;
    }

    public boolean isStrictfp(int modifiers)
    {
      return (modifiers & STRICTFP) != 0;
    }

    public boolean isSynchronized(int modifiers)
    {
      return (modifiers & SYNCHRONIZED) != 0;
    }

    public boolean isTransient(int modifiers)
    {
      return (modifiers & TRANSIENT) != 0;
    }

    public boolean isVolatile(int modifiers)
    {
      return (modifiers & VOLATILE) != 0;
    }

    /**
      * Removes the given modifier.
      */
    static int removeModifier(int modifiers, int mod)
    {
      return modifiers & ~mod;
    }
  }

  /**
	 * 运行解析器
	 * 
	 * @param fileText
	 * @return
	 */
  public static SimpleNode GetJavaGrammarTree(String fileText) throws ParseException
  {
    if (fileText == null)
    {
      return null;
    }
    // 解析器
    JavaTreeParser parser;
    parser = new JavaTreeParser(new StringReader(fileText));
    SimpleNode root = parser.CompilationUnit();
    return root;
  }
}

PARSER_END(JavaTreeParser)

/* WHITE SPACE */
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */
MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
| < "/**" ~[ "/" ] >
  {
    input_stream.backup(1);
  }
  : IN_FORMAL_COMMENT
| "/*" : IN_MULTI_LINE_COMMENT
}

< IN_SINGLE_LINE_COMMENT >
SPECIAL_TOKEN :
{
  < SINGLE_LINE_COMMENT :
    "\n"
  | "\r"
  | "\r\n" > : DEFAULT
}

< IN_FORMAL_COMMENT >
SPECIAL_TOKEN :
{
  < FORMAL_COMMENT : "*/" > : DEFAULT
}

< IN_MULTI_LINE_COMMENT >
SPECIAL_TOKEN :
{
  < MULTI_LINE_COMMENT : "*/" > : DEFAULT
}

< IN_SINGLE_LINE_COMMENT, IN_FORMAL_COMMENT, IN_MULTI_LINE_COMMENT >
MORE :
{
  < ~[ ] >
}

/* RESERVED WORDS AND LITERALS */
TOKEN :
{
  < ABSTRACT : "abstract" >
| < ASSERT : "assert" >
| < BOOLEAN : "boolean" >
| < BREAK : "break" >
| < BYTE : "byte" >
| < CASE : "case" >
| < CATCH : "catch" >
| < CHAR : "char" >
| < CLASS : "class" >
| < CONST : "const" >
| < CONTINUE : "continue" >
| < _DEFAULT : "default" >
| < DO : "do" >
| < DOUBLE : "double" >
| < ELSE : "else" >
| < ENUM : "enum" >
| < EXTENDS : "extends" >
| < FALSE : "false" >
| < FINAL : "final" >
| < FINALLY : "finally" >
| < FLOAT : "float" >
| < FOR : "for" >
| < GOTO : "goto" >
| < IF : "if" >
| < IMPLEMENTS : "implements" >
| < IMPORT : "import" >
| < INSTANCEOF : "instanceof" >
| < INT : "int" >
| < INTERFACE : "interface" >
| < LONG : "long" >
| < NATIVE : "native" >
| < NEW : "new" >
| < NULL : "null" >
| < PACKAGE : "package" >
| < PRIVATE : "private" >
| < PROTECTED : "protected" >
| < PUBLIC : "public" >
| < RETURN : "return" >
| < SHORT : "short" >
| < STATIC : "static" >
| < STRICTFP : "strictfp" >
| < SUPER : "super" >
| < SWITCH : "switch" >
| < SYNCHRONIZED : "synchronized" >
| < THIS : "this" >
| < THROW : "throw" >
| < THROWS : "throws" >
| < TRANSIENT : "transient" >
| < TRUE : "true" >
| < TRY : "try" >
| < VOID : "void" >
| < VOLATILE : "volatile" >
| < WHILE : "while" >
}

/* LITERALS */
TOKEN :
{
  < INTEGER_LITERAL :
    < DECIMAL_LITERAL > ([ "l", "L" ])?
  | < HEX_LITERAL > ([ "l", "L" ])?
  | < OCTAL_LITERAL > ([ "l", "L" ])? >
| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >
| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >
| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >
| < FLOATING_POINT_LITERAL :
    ([ "0"-"9" ])+ "." ([ "0"-"9" ])* (< EXPONENT >)? ([ "f", "F", "d", "D" ])?
  | "." ([ "0"-"9" ])+ (< EXPONENT >)? ([ "f", "F", "d", "D" ])?
  | ([ "0"-"9" ])+ < EXPONENT > ([ "f", "F", "d", "D" ])?
  | ([ "0"-"9" ])+ (< EXPONENT >)? [ "f", "F", "d", "D" ] >
| < #EXPONENT : [ "e", "E" ] ([ "+", "-" ])? ([ "0"-"9" ])+ >
| < CHARACTER_LITERAL :
    "'"
    (
      (~[ "'", "\\", "\n", "\r" ])
    |
      (
        "\\"
        (
          [ "n", "t", "b", "r", "f", "\\", "'", "\"" ]
        | [ "0"-"7" ] ([ "0"-"7" ])?
        | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]
        )
      )
    )
    "'" >
| < STRING_LITERAL :
    "\""
    (
      (~[ "\"", "\\", "\n", "\r" ])
    |
      (
        "\\"
        (
          [ "n", "t", "b", "r", "f", "\\", "'", "\"" ]
        | [ "0"-"7" ] ([ "0"-"7" ])?
        | [ "0"-"3" ] [ "0"-"7" ] [ "0"-"7" ]
        )
      )
    )*
    "\"" >
}

/* IDENTIFIERS */
TOKEN :
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "\u0024", "\u0041"-"\u005a", "\u005f", "\u0061"-"\u007a", "\u00c0"-"\u00d6", "\u00d8"-"\u00f6", "\u00f8"-"\u00ff", "\u0100"-"\u1fff", "\u3040"-"\u318f", "\u3300"-"\u337f", "\u3400"-"\u3d2d", "\u4e00"-"\u9fff", "\uf900"-"\ufaff" ] >
| < #DIGIT : [ "\u0030"-"\u0039", "\u0660"-"\u0669", "\u06f0"-"\u06f9", "\u0966"-"\u096f", "\u09e6"-"\u09ef", "\u0a66"-"\u0a6f", "\u0ae6"-"\u0aef", "\u0b66"-"\u0b6f", "\u0be7"-"\u0bef", "\u0c66"-"\u0c6f", "\u0ce6"-"\u0cef", "\u0d66"-"\u0d6f", "\u0e50"-"\u0e59", "\u0ed0"-"\u0ed9", "\u1040"-"\u1049" ] >
}

/* SEPARATORS */
TOKEN :
{
  < LPAREN : "(" >
| < RPAREN : ")" >
| < LBRACE : "{" >
| < RBRACE : "}" >
| < LBRACKET : "[" >
| < RBRACKET : "]" >
| < SEMICOLON : ";" >
| < COMMA : "," >
| < DOT : "." >
| < AT : "@" >
}

/* OPERATORS */
TOKEN :
{
  < ASSIGN : "=" >
| < LT : "<" >
| < BANG : "!" >
| < TILDE : "~" >
| < HOOK : "?" >
| < COLON : ":" >
| < EQ : "==" >
| < LE : "<=" >
| < GE : ">=" >
| < NE : "!=" >
| < SC_OR : "||" >
| < SC_AND : "&&" >
| < INCR : "++" >
| < DECR : "--" >
| < PLUS : "+" >
| < MINUS : "-" >
| < STAR : "*" >
| < SLASH : "/" >
| < BIT_AND : "&" >
| < BIT_OR : "|" >
| < XOR : "^" >
| < REM : "%" >
| < LSHIFT : "<<" >
| < PLUSASSIGN : "+=" >
| < MINUSASSIGN : "-=" >
| < STARASSIGN : "*=" >
| < SLASHASSIGN : "/=" >
| < ANDASSIGN : "&=" >
| < ORASSIGN : "|=" >
| < XORASSIGN : "^=" >
| < REMASSIGN : "%=" >
| < LSHIFTASSIGN : "<<=" >
| < RSIGNEDSHIFTASSIGN : ">>=" >
| < RUNSIGNEDSHIFTASSIGN : ">>>=" >
| < ELLIPSIS : "..." >
}

/* >'s need special attention due to generics syntax. */
TOKEN :
{
  < RUNSIGNEDSHIFT : ">>>" >
  {
    matchedToken.kind = JavaTreeParserConstants.GT;
    matchedToken.realKind = RUNSIGNEDSHIFT;
    input_stream.backup(2);
  }
| < RSIGNEDSHIFT : ">>" >
  {
    matchedToken.kind = JavaTreeParserConstants.GT;
    matchedToken.realKind = RSIGNEDSHIFT;
    input_stream.backup(1);
  }
| < GT : ">" >
}

/*****************************************
 * THE JAVA LANGUAGE GRAMMAR STARTS HERE *
 *****************************************/
/*
 * Program structuring syntax follows.
 */
SimpleNode CompilationUnit() #Root :
{}
{
  [ PackageDeclaration() ]
  (
    ImportDeclaration()
  )*
  (
    TypeDeclaration()
  )*
  < EOF >
  {
    return jjtThis;
  }
}

void PackageDeclaration() #PackageDeclaration :
{}
{
  "package" Name() ";"
}

void ImportDeclaration() #ImportDeclaration :
{}
{
  "import" [ "static" ] Name() [ "." "*" ] ";"
}

/*
 * Modifiers. We match all modifiers in a single rule to reduce the chances of
 * syntax errors for simple modifier mistakes. It will also enable us to give
 * better error messages.
 */
int Modifiers() #Modifiers :
{
  int modifiers = 0;
}
{
  (
    LOOKAHEAD(2)
    (
      "public"
      {
        modifiers |= ModifierSet.PUBLIC;
      }
    | "static"
      {
        modifiers |= ModifierSet.STATIC;
      }
    | "protected"
      {
        modifiers |= ModifierSet.PROTECTED;
      }
    | "private"
      {
        modifiers |= ModifierSet.PRIVATE;
      }
    | "final"
      {
        modifiers |= ModifierSet.FINAL;
      }
    | "abstract"
      {
        modifiers |= ModifierSet.ABSTRACT;
      }
    | "synchronized"
      {
        modifiers |= ModifierSet.SYNCHRONIZED;
      }
    | "native"
      {
        modifiers |= ModifierSet.NATIVE;
      }
    | "transient"
      {
        modifiers |= ModifierSet.TRANSIENT;
      }
    | "volatile"
      {
        modifiers |= ModifierSet.VOLATILE;
      }
    | "strictfp"
      {
        modifiers |= ModifierSet.STRICTFP;
      }
    | Annotation()
    )
  )*
  {
    return modifiers;
  }
}

/*
 * Declaration syntax follows.
 */
void TypeDeclaration() #TypeDeclaration :
{
  int modifiers;
}
{
  ";"
| modifiers = Modifiers()
  (
    ClassOrInterfaceDeclaration(modifiers)
  | EnumDeclaration(modifiers)
  | AnnotationTypeDeclaration(modifiers)
  )
}

void ClassOrInterfaceDeclaration(int modifiers) #ClassOrInterfaceDeclaration :
{
  boolean isInterface = false;
}
{
  (
    "class"
  | "interface"
    {
      isInterface = true;
    }
  )
  < IDENTIFIER > [ TypeParameters() ] [ ExtendsList(isInterface) ] [ ImplementsList(isInterface) ] ClassOrInterfaceBody(isInterface)
}

void ExtendsList(boolean isInterface) #ExtendsList :
{
  boolean extendsMoreThanOne = false;
}
{
  "extends" ClassOrInterfaceType()
  (
    "," ClassOrInterfaceType()
    {
      extendsMoreThanOne = true;
    }
  )*
  {
    if (extendsMoreThanOne && !isInterface) throw new ParseException("A class cannot extend more than one other class");
  }
}

void ImplementsList(boolean isInterface) #ImplementsList :
{}
{
  "implements" ClassOrInterfaceType()
  (
    "," ClassOrInterfaceType()
  )*
  {
    if (isInterface) throw new ParseException("An interface cannot implement other interfaces");
  }
}

void EnumDeclaration(int modifiers) #EnumDeclaration :
{}
{
  "enum" < IDENTIFIER > [ ImplementsList(false) ] EnumBody()
}

void EnumBody() #EnumBody :
{}
{
  "{" EnumConstant()
  (
    "," EnumConstant()
  )*
  [
    ";"
    (
      ClassOrInterfaceBodyDeclaration(false)
    )*
  ]
  "}"
}

void EnumConstant() #EnumConstant :
{}
{
  < IDENTIFIER > [ Arguments() ] [ ClassOrInterfaceBody(false) ]
}

void TypeParameters() #TypeParameters :
{}
{
  "<" TypeParameter()
  (
    "," TypeParameter()
  )*
  ">"
}

void TypeParameter() #TypeParameter :
{}
{
  < IDENTIFIER > [ TypeBound() ]
}

void TypeBound() #TypeBound :
{}
{
  "extends" ClassOrInterfaceType()
  (
    "&" ClassOrInterfaceType()
  )*
}

void ClassOrInterfaceBody(boolean isInterface) #ClassOrInterfaceBody :
{}
{
  "{"
  (
    ClassOrInterfaceBodyDeclaration(isInterface)
  )*
  "}"
}

void ClassOrInterfaceBodyDeclaration(boolean isInterface) #ClassOrInterfaceBodyDeclaration :
{
  boolean isNestedInterface = false;
  int modifiers;
}
{
  LOOKAHEAD(2)
  Initializer()
  {
    if (isInterface) throw new ParseException("An interface cannot have initializers");
  }
| modifiers = Modifiers() // Just get all the modifiers out of the way. If you want to do
  // more checks, pass the modifiers down to the member
  (
    ClassOrInterfaceDeclaration(modifiers)
  | EnumDeclaration(modifiers)
  | LOOKAHEAD([ TypeParameters() ] < IDENTIFIER > "(")
    ConstructorDeclaration()
  | LOOKAHEAD(Type() < IDENTIFIER > ("[" "]")* (","
  | "="
  | ";"))
    FieldDeclaration(modifiers)
  | MethodDeclaration(modifiers)
  )
| ";"
}

void FieldDeclaration(int modifiers) #FieldDeclaration :
{}
{
  // Modifiers are already matched in the caller
  Type() VariableDeclarator()
  (
    "," VariableDeclarator()
  )*
  ";"
}

void VariableDeclarator() #VariableDeclarator :
{}
{
  VariableDeclaratorId() [ "=" VariableInitializer() ]
}

void VariableDeclaratorId() #VariableDeclaratorId :
{}
{
  < IDENTIFIER > ("[" "]")*
}

void VariableInitializer() #VariableInitializer :
{}
{
  ArrayInitializer()
| Expression()
}

void ArrayInitializer() #ArrayInitializer :
{}
{
  "{"
  [
    VariableInitializer()
    (
      LOOKAHEAD(2)
      "," VariableInitializer()
    )*
  ]
  [ "," ] "}"
}

void MethodDeclaration(int modifiers) #MethodDeclaration :
{}
{
  // Modifiers already matched in the caller!
  [ TypeParameters() ] ResultType() MethodDeclarator() [ "throws" NameList() ]
  (
    Block()
  | ";"
  )
}

void MethodDeclarator() #MethodDeclarator :
{}
{
  < IDENTIFIER >
  (LOOKAHEAD("("")")
     NoParameters()
   | FormalParameters()
  )
  ("[" "]")*
}

void NoParameters()#NoParameters:
{}
{
  "("")"
}

void FormalParameters() #FormalParameters :
{}
{
  "(" FormalParameter()
  (
    "," FormalParameter()
  )*
  ")"
}

void FormalParameter() #FormalParameter :
{}
{
  [ "final" ] Type() [ "..." ] VariableDeclaratorId()
}

void ConstructorDeclaration() #ConstructorDeclaration :
{}
{
  [ TypeParameters() ] // Modifiers matched in the caller
  < IDENTIFIER >
  (LOOKAHEAD("("")")
     NoParameters()
   | FormalParameters()
  ) [ "throws" NameList() ] "{"
  [
    LOOKAHEAD(ExplicitConstructorInvocation())
    ExplicitConstructorInvocation()
  ]
  (
    BlockStatement()
  )*
  "}"
}

void ExplicitConstructorInvocation() #ExplicitConstructorInvocation :
{}
{
  LOOKAHEAD("this" Arguments() ";")
  "this" Arguments() ";"
|
  [
    LOOKAHEAD(2)
    PrimaryExpression() "."
  ]
  "super" Arguments() ";"
}

void Initializer() #Initializer :
{}
{
  [ "static" ] Block()
}

/*
 * Type, name and expression syntax follows.
 */
void Type() #Type :
{}
{
  LOOKAHEAD(2)
  ReferenceType()
| PrimitiveType()
}

void ReferenceType() #ReferenceType :
{}
{
  PrimitiveType()
  (
    LOOKAHEAD(2)
    "[" "]"
  )+
|
  (
    ClassOrInterfaceType()
  )
  (
    LOOKAHEAD(2)
    "[" "]"
  )*
}

void ClassOrInterfaceType() #ClassOrInterfaceType :
{}
{
  < IDENTIFIER >
  [
    LOOKAHEAD(2)
    TypeArguments()
  ]
  (
    LOOKAHEAD(2)
    "." < IDENTIFIER >
    [
      LOOKAHEAD(2)
      TypeArguments()
    ]
  )*
}

void TypeArguments() #TypeArguments :
{}
{
  "<" TypeArgument()
  (
    "," TypeArgument()
  )*
  ">"
}

void TypeArgument() #TypeArgument :
{}
{
  ReferenceType()
| "?" [ WildcardBounds() ]
}

void WildcardBounds() #WildcardBounds :
{}
{
  "extends" ReferenceType()
| "super" ReferenceType()
}

void PrimitiveType() #PrimitiveType :
{}
{
  "boolean"
| "char"
| "byte"
| "short"
| "int"
| "long"
| "float"
| "double"
}

void ResultType() #ResultType :
{}
{
  "void"
| Type()
}

void Name() #Name :
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{}
{
  < IDENTIFIER >
  (
    LOOKAHEAD(2)
    "." < IDENTIFIER >
  )*
}

void NameList() #NameList :
{}
{
  Name()
  (
    "," Name()
  )*
}

/*
 * Expression syntax follows.
 */
void Expression()#Expression:
/*
 * This expansion has been written this way instead of:
 *   Assignment() | ConditionalExpression()
 * for performance reasons.
 * However, it is a weakening of the grammar for it allows the LHS of
 * assignments to be any conditional expression whereas it can only be
 * a primary expression.  Consider adding a semantic predicate to work
 * around this.
 */
{}
{
  ConditionalExpression()
  [
    LOOKAHEAD(2)
    AssignmentOperator() Expression() 
  ] 
}

void AssignmentOperator() #AssignmentOperator :
{}
{
  "="
| "*="
| "/="
| "%="
| "+="
| "-="
| "<<="
| ">>="
| ">>>="
| "&="
| "^="
| "|="
}

void ConditionalExpression():
{}
{
  ConditionalOrExpression() [ "?" Expression() ":" Expression() #ConditionalExpression(3)]
}

void ConditionalOrExpression() :
{}
{
  ConditionalAndExpression()
  (
    "||" ConditionalAndExpression() #ConditionalOrExpression(2)
)*
}

void ConditionalAndExpression() :
{}
{
  InclusiveOrExpression()
  (
    "&&" InclusiveOrExpression() #ConditionalAndExpression(2)
)*
}

void InclusiveOrExpression() :
{}
{
  ExclusiveOrExpression()
  (
    "|" ExclusiveOrExpression() #InclusiveOrExpression(2)
)*
}

void ExclusiveOrExpression() :
{}
{
  AndExpression()
  (
    "^" AndExpression() #ExclusiveOrExpression(2)
)*
}

void AndExpression() :
{}
{
  EqualityExpression()
  (
    "&" EqualityExpression() #AndExpression(2)
)*
}

void EqualityExpression() :
{}
{
  InstanceOfExpression()
  (
    (
      "=="
    | "!="
    )
    InstanceOfExpression() #EqualityExpression(2)
)*
}

void InstanceOfExpression() :
{}
{
  RelationalExpression() [ "instanceof" Type() #InstanceOfExpression(2)
]
}

void RelationalExpression() :
{}
{
  ShiftExpression()
  (
    (
      "<"
    | ">"
    | "<="
    | ">="
    )
    ShiftExpression() #RelationalExpression(2)
)*
}



/*
  该处存在bug
*/

void ShiftExpression() :
{}
{
  AdditiveExpression()
  (
    (
      "<<"
    | RSIGNEDSHIFT()
    | RUNSIGNEDSHIFT()
    )
    AdditiveExpression() #ShiftExpression(2)
)*
}

void AdditiveExpression() :
{}
{
  MultiplicativeExpression()
  (
    (
      "+"
    | "-"
    )
    MultiplicativeExpression() #AdditiveExpression(2)
)*
}

void MultiplicativeExpression() :
{}
{
  UnaryExpression()
  (
    (
      "*"
    | "/"
    | "%"
    )
    UnaryExpression() #MultiplicativeExpression(2)
)*
}

void IncOrDecOperator() #IncOrDecOperator : //++或--运算符(前)
{}
{
  (
    "++"
  | "--"
  )
}

void UnaryOperator() #UnaryOperator : //正负号
{}
{
  (
    "+"
  | "-"
  )
}

void UnaryOperatorNotPlusMinus() #UnaryOperatorNotPlusMinus :
{}
{
  (
    "~"
  | "!"
  )
}

void UnaryExpression() :
{}
{
  UnaryOperator() UnaryExpression() #UnaryExpression(1)
| PreIncOrDecExpression()
| UnaryExpressionNotPlusMinus()
}

void PreIncOrDecExpression() #PreIncOrDecExpression :
{}
{
  IncOrDecOperator() PrimaryExpression()
}

//void PreDecrementExpression() #PreDecrementExpression :
//{}
//{
//  IncOrDecOperator() PrimaryExpression()
//}
void UnaryExpressionNotPlusMinus()  :
{}
{
  UnaryOperatorNotPlusMinus() UnaryExpression() #UnaryExpressionNotPlusMinus(1)
| LOOKAHEAD(CastLookahead())
  CastExpression()
| PostfixExpression()
}

// This production is to determine lookahead only.  The LOOKAHEAD specifications
// below are not used, but they are there just to indicate that we know about
// this.
void CastLookahead()#CastLookahead:
{}
{
  LOOKAHEAD(2)
  "(" PrimitiveType()
| LOOKAHEAD("(" Type() "[")
  "(" Type() "[" "]"
| "(" Type() ")"
  (
    "~"
  | "!"
  | "("
  | < IDENTIFIER >
  | "this"
  | "super"
  | "new"
  | Literal()
  )
}

void PostfixExpression() :
{}
{
  PrimaryExpression() [ IncOrDecOperator() #PostfixExpression(2)
]
}

void CastExpression() :
{}
{
  LOOKAHEAD("(" PrimitiveType())
  "(" Type() ")" UnaryExpression() #CastExpression(2)
| "(" Type() ")" UnaryExpressionNotPlusMinus() #CastExpression(2)
}

void PrimaryExpression() #PrimaryExpression:
{}
{
  PrimaryPrefix()
  (
    LOOKAHEAD(2)
    PrimarySuffix()
  )*
}

void MemberSelector() #MemberSelector :
{}
{
  "." TypeArguments() < IDENTIFIER >
}

void PrimaryPrefix()  :
{}
{
  Literal() 
| "this"      #PrimaryPrefix
| "super" "." < IDENTIFIER > #PrimaryPrefix
| "(" Expression() ")" #PrimaryPrefix
| AllocationExpression() #PrimaryPrefix
| LOOKAHEAD(ResultType() "." "class")  
  ResultType() "." "class" #PrimaryPrefix
| Name() #PrimaryPrefix
}

void PrimarySuffix() #PrimarySuffix :
{}
{
  LOOKAHEAD(2)
  "." "this"
| LOOKAHEAD(2)
  "." AllocationExpression()
| LOOKAHEAD(3)
  MemberSelector()
| "[" Expression() "]"
| "." < IDENTIFIER >
| Arguments()
}

void Literal() #Literal :
{}
{
  < INTEGER_LITERAL >
| < FLOATING_POINT_LITERAL >
| < CHARACTER_LITERAL >
| < STRING_LITERAL >
| BooleanLiteral()
| NullLiteral()
}

void BooleanLiteral() #BooleanLiteral :
{}
{
  "true"
| "false"
}

void NullLiteral() #NullLiteral :
{}
{
  "null"
}

void Arguments() #Arguments :
{}
{
  LOOKAHEAD("("")")
  NoParameters()
| 
  "(" [ ArgumentList() ] ")"
}

void ArgumentList() #ArgumentList :
{}
{
  Expression()
  (
    "," Expression()
  )*
}

void AllocationExpression() #AllocationExpression :
{}
{
  LOOKAHEAD(2)
  "new" PrimitiveType() ArrayDimsAndInits()
| "new" ClassOrInterfaceType() [ TypeArguments() ]
  (
    ArrayDimsAndInits()
  | Arguments() [ ClassOrInterfaceBody(false) ]
  )
}

/*
 * The third LOOKAHEAD specification below is to parse to PrimarySuffix
 * if there is an expression between the "[...]".
 */
void ArrayDimsAndInits() #ArrayDimsAndInits :
{}
{
  LOOKAHEAD(2)
  (
    LOOKAHEAD(2)
    "[" Expression() "]"
  )+
  (
    LOOKAHEAD(2)
    "[" "]"
  )*
| ("[" "]")+ ArrayInitializer()
}

/*
 * Statement syntax follows.
 */
void Statement() #Statement :
{}
{
  LOOKAHEAD(2)
  LabeledStatement()
| AssertStatement()
| Block()
| EmptyStatement()
| StatementExpression() ";"
| SwitchStatement()
| IfStatement()
| WhileStatement()
| DoStatement()
| ForStatement()
| BreakStatement()
| ContinueStatement()
| ReturnStatement()
| ThrowStatement()
| SynchronizedStatement()
| TryStatement()
}

void AssertStatement() #AssertStatement :
{}
{
  "assert" Expression() [ ":" Expression() ] ";"
}

void LabeledStatement() #LabeledStatement :
{}
{
  < IDENTIFIER > ":" Statement()
}

void Block() #Block :
{}
{
  "{"
  (
    BlockStatement()
  )*
  "}"
}

void BlockStatement() #BlockStatement :
{}
{
  LOOKAHEAD([ "final" ] Type() < IDENTIFIER >)
  LocalVariableDeclaration() ";"
| Statement()
| ClassOrInterfaceDeclaration(0)
}

void LocalVariableDeclaration() #LocalVariableDeclaration :
{}
{
  [ "final" ] Type() VariableDeclarator()
  (
    "," VariableDeclarator()
  )*
}

void EmptyStatement() #EmptyStatement :
{}
{
  ";"
}

void StatementExpression() #StatementExpression :
/*
 * The last expansion of this production accepts more than the legal
 * Java expansions for StatementExpression.  This expansion does not
 * use PostfixExpression for performance reasons.
 */
{}
{
  PreIncOrDecExpression()
| PrimaryExpression()
  [
    "++"
  | "--"
  | AssignmentOperator() Expression()
  ]
}

void SwitchStatement() #SwitchStatement :
{}
{
  "switch" "(" Expression() ")" "{"
  (
    SwitchLabel()
    (
      BlockStatement()
    )*
  )*
  "}"
}

void SwitchLabel() #SwitchLabel :
{}
{
  "case" Expression() ":"
| "default" ":"
}

void IfStatement() #IfStatement :
/*
 * The disambiguating algorithm of JavaCC automatically binds dangling
 * else's to the innermost if statement.  The LOOKAHEAD specification
 * is to tell JavaCC that we know what we are doing.
 */
{}
{
  "if" "(" Expression() ")" Statement()
  [
    LOOKAHEAD(1)
    "else" Statement()
  ]
}

void WhileStatement() #WhileStatement :
{}
{
  "while" "(" Expression() ")" Statement()
}

void DoStatement() #DoStatement :
{}
{
  "do" Statement() "while" "(" Expression() ")" ";"
}

void ForStatement() #ForStatement :
{}
{
  "for" "("
  (
    LOOKAHEAD(Type() < IDENTIFIER > ":")
    Type() < IDENTIFIER > ":" Expression()
  | [ ForInit() ] ";" [ Expression() ] ";" [ ForUpdate() ]
  )
  ")" Statement()
}

void ForInit() #ForInit :
{}
{
  LOOKAHEAD([ "final" ] Type() < IDENTIFIER >)
  LocalVariableDeclaration()
| StatementExpressionList()
}

void StatementExpressionList() #StatementExpressionList :
{}
{
  StatementExpression()
  (
    "," StatementExpression()
  )*
}

void ForUpdate() #ForUpdate :
{}
{
  StatementExpressionList()
}

void BreakStatement() #BreakStatement :
{}
{
  "break" [ < IDENTIFIER > ] ";"
}

void ContinueStatement() #ContinueStatement :
{}
{
  "continue" [ < IDENTIFIER > ] ";"
}

void ReturnStatement() #ReturnStatement :
{}
{
  "return" [ Expression() ] ";"
}

void ThrowStatement() #ThrowStatement :
{}
{
  "throw" Expression() ";"
}

void SynchronizedStatement() #SynchronizedStatement :
{}
{
  "synchronized" "(" Expression() ")" Block()
}

void TryStatement() #TryStatement :
/*
 * Semantic check required here to make sure that at least one
 * finally/catch is present.
 */
{}
{
  "try" Block()
  (
    "catch" "(" FormalParameter() ")" Block()
  )*
  [ "finally" Block() ]
}

/* We use productions to match >>>, >> and > so that we can keep the
 * type declaration syntax with generics clean
 */
void RUNSIGNEDSHIFT()#RUNSIGNEDSHIFT:
{}
{
  (
    LOOKAHEAD({ getToken(1).kind == JavaTreeParserConstants.GT && getToken(1).realKind == RUNSIGNEDSHIFT })
    ">" ">" ">"
  )
}

void RSIGNEDSHIFT()#RSIGNEDSHIFT:
{}
{
  (
    LOOKAHEAD({ getToken(1).kind == JavaTreeParserConstants.GT && getToken(1).realKind == RSIGNEDSHIFT })
    ">" ">"
  )
}

/* Annotation syntax follows. */
void Annotation() #Annotation :
{}
{
  LOOKAHEAD("@" Name() "(" (< IDENTIFIER > "="
| ")"))
  NormalAnnotation()
| LOOKAHEAD("@" Name() "(")
  SingleMemberAnnotation()
| MarkerAnnotation()
}

void NormalAnnotation() #NormalAnnotation :
{}
{
  "@" Name() "(" [ MemberValuePairs() ] ")"
}

void MarkerAnnotation() #MarkerAnnotation :
{}
{
  "@" Name()
}

void SingleMemberAnnotation() #SingleMemberAnnotation :
{}
{
  "@" Name() "(" MemberValue() ")"
}

void MemberValuePairs() #MemberValuePairs :
{}
{
  MemberValuePair()
  (
    "," MemberValuePair()
  )*
}

void MemberValuePair() #MemberValuePair :
{}
{
  < IDENTIFIER > "=" MemberValue()
}

void MemberValue() #MemberValue :
{}
{
  Annotation()
| MemberValueArrayInitializer()
| ConditionalExpression()
}

void MemberValueArrayInitializer() #MemberValueArrayInitializer :
{}
{
  "{" MemberValue()
  (
    LOOKAHEAD(2)
    "," MemberValue()
  )*
  [ "," ] "}"
}

/* Annotation Types. */
void AnnotationTypeDeclaration(int modifiers) #AnnotationTypeDeclaration :
{}
{
  "@" "interface" < IDENTIFIER > AnnotationTypeBody()
}

void AnnotationTypeBody() #AnnotationTypeBody :
{}
{
  "{"
  (
    AnnotationTypeMemberDeclaration()
  )*
  "}"
}

void AnnotationTypeMemberDeclaration() #AnnotationTypeMemberDeclaration :
{
  int modifiers;
}
{
  modifiers = Modifiers()
  (
    LOOKAHEAD(Type() < IDENTIFIER > "(")
    Type() < IDENTIFIER > "(" ")" [ DefaultValue() ] ";"
  | ClassOrInterfaceDeclaration(modifiers)
  | EnumDeclaration(modifiers)
  | AnnotationTypeDeclaration(modifiers)
  | FieldDeclaration(modifiers)
  )
| (";")
}

void DefaultValue() #DefaultValue :
{}
{
  "default" MemberValue()
}
