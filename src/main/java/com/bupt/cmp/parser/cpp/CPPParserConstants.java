/* Generated By:JavaCC: Do not edit this line. CPPParserConstants.java */
package com.bupt.cmp.parser.cpp;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CPPParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int LCURLYBRACE = 19;
  /** RegularExpression Id. */
  int RCURLYBRACE = 20;
  /** RegularExpression Id. */
  int LSQUAREBRACKET = 21;
  /** RegularExpression Id. */
  int RSQUAREBRACKET = 22;
  /** RegularExpression Id. */
  int LPARENTHESIS = 23;
  /** RegularExpression Id. */
  int RPARENTHESIS = 24;
  /** RegularExpression Id. */
  int SCOPE = 25;
  /** RegularExpression Id. */
  int COLON = 26;
  /** RegularExpression Id. */
  int SEMICOLON = 27;
  /** RegularExpression Id. */
  int COMMA = 28;
  /** RegularExpression Id. */
  int QUESTIONMARK = 29;
  /** RegularExpression Id. */
  int ELLIPSIS = 30;
  /** RegularExpression Id. */
  int ASSIGNEQUAL = 31;
  /** RegularExpression Id. */
  int TIMESEQUAL = 32;
  /** RegularExpression Id. */
  int DIVIDEEQUAL = 33;
  /** RegularExpression Id. */
  int MODEQUAL = 34;
  /** RegularExpression Id. */
  int PLUSEQUAL = 35;
  /** RegularExpression Id. */
  int MINUSEQUAL = 36;
  /** RegularExpression Id. */
  int SHIFTLEFTEQUAL = 37;
  /** RegularExpression Id. */
  int SHIFTRIGHTEQUAL = 38;
  /** RegularExpression Id. */
  int BITWISEANDEQUAL = 39;
  /** RegularExpression Id. */
  int BITWISEXOREQUAL = 40;
  /** RegularExpression Id. */
  int BITWISEOREQUAL = 41;
  /** RegularExpression Id. */
  int OR = 42;
  /** RegularExpression Id. */
  int AND = 43;
  /** RegularExpression Id. */
  int BITWISEOR = 44;
  /** RegularExpression Id. */
  int BITWISEXOR = 45;
  /** RegularExpression Id. */
  int AMPERSAND = 46;
  /** RegularExpression Id. */
  int EQUAL = 47;
  /** RegularExpression Id. */
  int NOTEQUAL = 48;
  /** RegularExpression Id. */
  int LESSTHAN = 49;
  /** RegularExpression Id. */
  int GREATERTHAN = 50;
  /** RegularExpression Id. */
  int LESSTHANOREQUALTO = 51;
  /** RegularExpression Id. */
  int GREATERTHANOREQUALTO = 52;
  /** RegularExpression Id. */
  int SHIFTLEFT = 53;
  /** RegularExpression Id. */
  int SHIFTRIGHT = 54;
  /** RegularExpression Id. */
  int PLUS = 55;
  /** RegularExpression Id. */
  int MINUS = 56;
  /** RegularExpression Id. */
  int STAR = 57;
  /** RegularExpression Id. */
  int DIVIDE = 58;
  /** RegularExpression Id. */
  int MOD = 59;
  /** RegularExpression Id. */
  int PLUSPLUS = 60;
  /** RegularExpression Id. */
  int MINUSMINUS = 61;
  /** RegularExpression Id. */
  int TILDE = 62;
  /** RegularExpression Id. */
  int NOT = 63;
  /** RegularExpression Id. */
  int DOT = 64;
  /** RegularExpression Id. */
  int POINTERTO = 65;
  /** RegularExpression Id. */
  int DOTSTAR = 66;
  /** RegularExpression Id. */
  int ARROWSTAR = 67;
  /** RegularExpression Id. */
  int AUTO = 68;
  /** RegularExpression Id. */
  int BREAK = 69;
  /** RegularExpression Id. */
  int CASE = 70;
  /** RegularExpression Id. */
  int CATCH = 71;
  /** RegularExpression Id. */
  int CHAR = 72;
  /** RegularExpression Id. */
  int CONST = 73;
  /** RegularExpression Id. */
  int CONTINUE = 74;
  /** RegularExpression Id. */
  int _DEFAULT = 75;
  /** RegularExpression Id. */
  int DELETE = 76;
  /** RegularExpression Id. */
  int DO = 77;
  /** RegularExpression Id. */
  int DOUBLE = 78;
  /** RegularExpression Id. */
  int ELSE = 79;
  /** RegularExpression Id. */
  int ENUM = 80;
  /** RegularExpression Id. */
  int EXTERN = 81;
  /** RegularExpression Id. */
  int FLOAT = 82;
  /** RegularExpression Id. */
  int FOR = 83;
  /** RegularExpression Id. */
  int FRIEND = 84;
  /** RegularExpression Id. */
  int GOTO = 85;
  /** RegularExpression Id. */
  int IF = 86;
  /** RegularExpression Id. */
  int INLINE = 87;
  /** RegularExpression Id. */
  int MUTABLE = 88;
  /** RegularExpression Id. */
  int EXPLICIT = 89;
  /** RegularExpression Id. */
  int DYNAMIC_CAST = 90;
  /** RegularExpression Id. */
  int STATIC_CAST = 91;
  /** RegularExpression Id. */
  int REINTERPRET_CAST = 92;
  /** RegularExpression Id. */
  int CONST_CAST = 93;
  /** RegularExpression Id. */
  int TYPEID = 94;
  /** RegularExpression Id. */
  int WCHAR_T = 95;
  /** RegularExpression Id. */
  int BOOL = 96;
  /** RegularExpression Id. */
  int INT = 97;
  /** RegularExpression Id. */
  int LONG = 98;
  /** RegularExpression Id. */
  int NEW = 99;
  /** RegularExpression Id. */
  int PRIVATE = 100;
  /** RegularExpression Id. */
  int PROTECTED = 101;
  /** RegularExpression Id. */
  int PUBLIC = 102;
  /** RegularExpression Id. */
  int REDECLARED = 103;
  /** RegularExpression Id. */
  int REGISTER = 104;
  /** RegularExpression Id. */
  int RETURN = 105;
  /** RegularExpression Id. */
  int SHORT = 106;
  /** RegularExpression Id. */
  int SIGNED = 107;
  /** RegularExpression Id. */
  int SIZEOF = 108;
  /** RegularExpression Id. */
  int STATIC = 109;
  /** RegularExpression Id. */
  int STRUCT = 110;
  /** RegularExpression Id. */
  int CLASS = 111;
  /** RegularExpression Id. */
  int TYPENAME = 112;
  /** RegularExpression Id. */
  int SWITCH = 113;
  /** RegularExpression Id. */
  int TEMPLATE = 114;
  /** RegularExpression Id. */
  int EXPORT = 115;
  /** RegularExpression Id. */
  int THIS = 116;
  /** RegularExpression Id. */
  int TRY = 117;
  /** RegularExpression Id. */
  int TYPEDEF = 118;
  /** RegularExpression Id. */
  int UNION = 119;
  /** RegularExpression Id. */
  int UNSIGNED = 120;
  /** RegularExpression Id. */
  int VIRTUAL = 121;
  /** RegularExpression Id. */
  int VOID = 122;
  /** RegularExpression Id. */
  int VOLATILE = 123;
  /** RegularExpression Id. */
  int WHILE = 124;
  /** RegularExpression Id. */
  int OPERATOR = 125;
  /** RegularExpression Id. */
  int TRUETOK = 126;
  /** RegularExpression Id. */
  int FALSETOK = 127;
  /** RegularExpression Id. */
  int THROW = 128;
  /** RegularExpression Id. */
  int BOOLEAN = 129;
  /** RegularExpression Id. */
  int OCTALINT = 130;
  /** RegularExpression Id. */
  int OCTALLONG = 131;
  /** RegularExpression Id. */
  int UNSIGNED_OCTALINT = 132;
  /** RegularExpression Id. */
  int UNSIGNED_OCTALLONG = 133;
  /** RegularExpression Id. */
  int DECIMALINT = 134;
  /** RegularExpression Id. */
  int DECIMALLONG = 135;
  /** RegularExpression Id. */
  int UNSIGNED_DECIMALINT = 136;
  /** RegularExpression Id. */
  int UNSIGNED_DECIMALLONG = 137;
  /** RegularExpression Id. */
  int HEXADECIMALINT = 138;
  /** RegularExpression Id. */
  int HEXADECIMALLONG = 139;
  /** RegularExpression Id. */
  int UNSIGNED_HEXADECIMALINT = 140;
  /** RegularExpression Id. */
  int UNSIGNED_HEXADECIMALLONG = 141;
  /** RegularExpression Id. */
  int FLOATONE = 142;
  /** RegularExpression Id. */
  int FLOATTWO = 143;
  /** RegularExpression Id. */
  int CHARACTER = 144;
  /** RegularExpression Id. */
  int STRING = 145;
  /** RegularExpression Id. */
  int ID = 149;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int LINE_NUMBER = 1;
  /** Lexical state. */
  int LINE_DIRECTIVE = 2;
  /** Lexical state. */
  int AFTER_LINE_DIRECTIVE = 3;
  /** Lexical state. */
  int IN_LINE_COMMENT = 4;
  /** Lexical state. */
  int IN_COMMENT = 5;
  /** Lexical state. */
  int PREPROCESSOR_OUTPUT = 6;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"//\"",
    "\"/*\"",
    "<token of kind 6>",
    "<token of kind 7>",
    "\"#\"",
    "<token of kind 9>",
    "\"\\n\"",
    "<token of kind 11>",
    "<token of kind 12>",
    "\"\\n\"",
    "<token of kind 14>",
    "\"*/\"",
    "<token of kind 16>",
    "\"\\n\"",
    "<token of kind 18>",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"::\"",
    "\":\"",
    "\";\"",
    "\",\"",
    "\"?\"",
    "\"...\"",
    "\"=\"",
    "\"*=\"",
    "\"/=\"",
    "\"%=\"",
    "\"+=\"",
    "\"-=\"",
    "\"<<=\"",
    "\">>=\"",
    "\"&=\"",
    "\"^=\"",
    "\"|=\"",
    "\"||\"",
    "\"&&\"",
    "\"|\"",
    "\"^\"",
    "\"&\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"<<\"",
    "\">>\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"++\"",
    "\"--\"",
    "\"~\"",
    "\"!\"",
    "\".\"",
    "\"->\"",
    "\".*\"",
    "\"->*\"",
    "\"auto\"",
    "\"break\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"const\"",
    "\"continue\"",
    "\"default\"",
    "\"delete\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"enum\"",
    "\"extern\"",
    "\"float\"",
    "\"for\"",
    "\"friend\"",
    "\"goto\"",
    "\"if\"",
    "\"inline\"",
    "\"mutable\"",
    "\"explicit\"",
    "\"dynamic_cast\"",
    "\"static_cast\"",
    "\"reinterpret_cast\"",
    "\"const_cast\"",
    "\"typeid\"",
    "\"wchar_t\"",
    "\"bool\"",
    "\"int\"",
    "\"long\"",
    "\"new\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"redeclared\"",
    "\"register\"",
    "\"return\"",
    "\"short\"",
    "\"signed\"",
    "\"sizeof\"",
    "\"static\"",
    "\"struct\"",
    "\"class\"",
    "\"typename\"",
    "\"switch\"",
    "\"template\"",
    "\"export\"",
    "\"this\"",
    "\"try\"",
    "\"typedef\"",
    "\"union\"",
    "\"unsigned\"",
    "\"virtual\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "\"operator\"",
    "\"true\"",
    "\"false\"",
    "\"throw\"",
    "<BOOLEAN>",
    "<OCTALINT>",
    "<OCTALLONG>",
    "<UNSIGNED_OCTALINT>",
    "<UNSIGNED_OCTALLONG>",
    "<DECIMALINT>",
    "<DECIMALLONG>",
    "<UNSIGNED_DECIMALINT>",
    "<UNSIGNED_DECIMALLONG>",
    "<HEXADECIMALINT>",
    "<HEXADECIMALLONG>",
    "<UNSIGNED_HEXADECIMALINT>",
    "<UNSIGNED_HEXADECIMALLONG>",
    "<FLOATONE>",
    "<FLOATTWO>",
    "<CHARACTER>",
    "<STRING>",
    "\"namespace\"",
    "\"using\"",
    "\"finally\"",
    "<ID>",
  };

}
