/* Generated By:JavaCC: Do not edit this line. EG1.java */
package com.bupt.cmp.parser.c;


import com.bupt.cmp.lang.file.DefaultCodeFile;
import com.bupt.cmp.pretreat.format.LineStruct;
import lombok.extern.slf4j.Slf4j;

import java.io.*;
import java.util.ArrayList;
import java.util.List;

@Slf4j
public class EG1 extends Exception implements EG1Constants {
  private static String symtab[][]=new String [100][8];
  private static String temp[]=new String [8];
  private static int n_arg=0;
  private static String switch_expr;
  private static int label=0;
  private static int label_stack[]=new int[100];
  private static int label_pos=0;

  private static int symtab_pos=0;
  private static int pointer_level=0;
  private static int var_size=1;
  private static String arr[]=new String[500];
  private static int top=0;
  private static int i=0;
  private static PrintWriter pr,pr_sym;
  private static void assign()
  {

    pr.write("t"+i+"="+arr[top-3]+arr[top-2]+arr[top-1]+"\u005cn");
    top-=3;
    arr[top++]="t"+i;
    i++;
  }

  private static boolean check_redeclaration(String a)
   {

     for(int i=0;i<symtab_pos;i++)
     {

       if(a.equals(symtab[i][0]))
         return true;
     }
   return false;
   }

   private static boolean check_declaration(String a)
   {

    for(int i=0;i<symtab_pos;i++)
     {

       if(a.equals(symtab[i][0]))
         return true;
     }
   return false;

   }


  private static void u_assign()
  {
    pr.write("t"+i+"="+arr[top-2]+arr[top-1]+"\u005cn");
    top-=2;
    arr[top++]="t"+i;
    i++;
  }

  private static void assign_var(String tem)
  {

    pr.write(tem+"="+arr[top-1]+"\u005cn");
    top-=1;
   arr[top++]=tem;

  }

  private static void var_assign()
  {
    String t=arr[top-3];
   pr.write(arr[top-3]+arr[top-2]+arr[top-1]+"\u005cn");
   top-=3;
   arr[top++]=t;
  }

  private static void display_symtab() throws Exception
  {


    for(int i=0;i<symtab_pos;i++)
    {
     pr_sym.print(symtab[i][0]+" "+symtab[i][1]+" "+symtab[i][2]+" "+symtab[i][3]+" "+symtab[i][4]+" "+
      symtab[i][5]+" "+symtab[i][6]+" \u005cn");

    }

}
	/**
	 * 存放token值序列的结构
	 */
	private ArrayList<Integer> tokenlist = null;
	/**
	 * 存放token值序列的结构,带行号
	 */
	private List<LineStruct> linetokenlist = null;

	/**
	 * @return token值序列
	 */
	final public ArrayList<Integer> getTokenList() {
		return tokenlist;
	}

	final public List<LineStruct> getLineTokenList() {
		return linetokenlist;
	}

	/**
	 * 存储代码文件的Token序列,以"\n"分隔
	 */
	public static String tokenSequence;

	/**
	 * 存储代码文件(应该为一个类)的函数序列
	 */
	public static ArrayList<String> funSequence;

	/**
	 * 存储代码文件的类序列
	 */
	public static ArrayList<String> classSequence;
	
	final public void runLineLexical(DefaultCodeFile cf) throws ParseException {
		linetokenlist = cf.getTokenLine();
		linetokenlist.clear();
		Token mt = getToken(1);
		int hashValue = 0;
		int tempHashValue = 0;
		int tempLineNum = 0;
		String LineString = new String();
		while (mt.kind != EOF) {
			tempLineNum = mt.beginLine;
			while (mt.beginLine == tempLineNum && mt.kind != EOF) {
				LineString = LineString + " " + mt.getValue();
				mt = token_source.getNextToken();
			}

			hashValue = LineString.hashCode();
			log.debug(LineString + "--" + hashValue);
			if (hashValue != tempHashValue) {// 只对与上一行hash值不同的行进行记录
				LineStruct temp = new LineStruct();
				temp.setLineNum(tempLineNum);
				temp.setHashValue(hashValue);
				linetokenlist.add(temp);
				tempHashValue = hashValue;

			}
			LineString = "";

		}
		// cf.setTokenLine(linetokenlist);
	}

	/**
	 * 运行解析器
	 * 
	 * @param fileText
	 * @return 解析结果对象
	 * @throws Exception
	 */
	public static EG1Result runParser(String fileText) throws Exception {
		if (fileText == null) {
			return null;
		}
		// 解析器
		EG1 parser;
		tokenSequence = new String("");
		classSequence = new ArrayList<String>();
		funSequence = new ArrayList<String>();

		parser = new EG1(new StringReader(fileText));
		parser.TU();
		EG1Result result = new EG1Result(tokenSequence, classSequence, funSequence);
		return result;
	}


  public static void main(String args []) throws ParseException, IOException, Exception
  {

        EG1 parser =new EG1(new FileInputStream("input.txt"));

     pr=new PrintWriter("output.txt");
     pr_sym=new PrintWriter("symtab.txt");
    //while (true)
    {
    log.debug("PCD_PACK_1 Reading from file ...");

      try
      {
        switch (0)
        {
          case 0 :
          log.debug("OK.");
          pr.close();
          pr_sym.close();
          break;
          case 1 :
          log.debug("Goodbye.");
          break;
          default :
          break;
        }
      }
      catch (Exception e)
      {
        log.debug("NOK.");
        log.debug(e.getMessage());
        EG1.ReInit(System.in);
      }
      catch (Error e)
      {
        log.debug("Oops.");
        log.debug(e.getMessage());
        //break;
      }
    }
  }

  final public int TU() throws ParseException, Exception {
    label_1:
    while (true) {
      ED();
      switch (jj_nt.kind) {
      case VOID:
      case CHAR:
      case INT:
      case FLOAT:
      case DOUBLE:
        ;
        break;
      default:
        break label_1;
      }
    }
    jj_consume_token(0);
    System.out.print("\u005ct\u005ct\u005ctAccepted \u005cn");
    //throw new ParseException("Redeclaration");
    display_symtab();
      symtab_pos=0;
        {if (true) return 0;}
    throw new Error("Missing return statement in function");
  }

  final public void ED() throws ParseException, Exception {
    FD();
          System.out.print("\u005ct\u005ct\u005ctEx Declaration \u005cn");
  }

  final public void FD() throws ParseException, Exception {
  Token t=null;
      System.out.print("\u005ct\u005ct\u005ctPrevious sym tab: \u005cn");
      display_symtab();
      symtab_pos=0;
    TS();
    t = jj_consume_token(IDENTIFIER);
                    symtab[symtab_pos][0]=t.image; symtab[symtab_pos][2]="fun";
                  symtab_pos++; //System.out.print("\t\t\tIDENT\n");

    jj_consume_token(46);
    switch (jj_nt.kind) {
    case VOID:
    case CHAR:
    case INT:
    case FLOAT:
    case DOUBLE:
      PTL();
      break;
    default:
      ;
    }
    jj_consume_token(47);
                 symtab[symtab_pos-n_arg-1][3]=n_arg+"";
                 n_arg=0;
    CS();
   System.out.print("\u005ct\u005ct\u005ctFunction definition\u005cn");
  }

  final public void PTL() throws ParseException {
    PL();
      System.out.print("\u005ct\u005ct\u005ctParameter type List\u005cn");
  }

  final public void PL() throws ParseException {
    PD();
    label_2:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(48);
      PD();
    }
      System.out.print("\u005ct\u005ct\u005ctParameter List\u005cn");
  }

  final public void PD() throws ParseException {
    TS();
    Dtor();
      System.out.print("\u005ct\u005ct\u005ctParameter declaration\u005cn");
       symtab_pos++;
       n_arg++;
  }

  final public void CS() throws ParseException {
    jj_consume_token(49);
    if (jj_2_2(2147483647)) {
      DL();
    } else {
      ;
    }
    switch (jj_nt.kind) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case CASE:
    case DFLT:
    case IF:
    case SWITCH:
    case WHILE:
    case FOR:
    case DO:
    case GOTO:
    case CONTINUE:
    case BREAK:
    case RETURN:
    case IDENTIFIER:
    case 46:
    case 49:
    case 52:
    case 56:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
      SL();
      break;
    default:
      ;
    }
    jj_consume_token(50);
      System.out.print("\u005ct\u005ct\u005ctCompound statement\u005cn");
  }

  final public void SL() throws ParseException {
    label_3:
    while (true) {
      S();
      switch (jj_nt.kind) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case CASE:
      case DFLT:
      case IF:
      case SWITCH:
      case WHILE:
      case FOR:
      case DO:
      case GOTO:
      case CONTINUE:
      case BREAK:
      case RETURN:
      case IDENTIFIER:
      case 46:
      case 49:
      case 52:
      case 56:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
        ;
        break;
      default:
        break label_3;
      }
    }
      System.out.print("\u005ct\u005ct\u005ctstatement list\u005cn");
  }

  final public void S() throws ParseException {
    if (jj_2_3(2)) {
      LS();
    } else {
      switch (jj_nt.kind) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case 46:
      case 52:
      case 56:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
        ES();
        break;
      case 49:
        CS();
        break;
      case IF:
      case SWITCH:
        SS();
        break;
      case WHILE:
      case FOR:
      case DO:
        IS();
        break;
      case GOTO:
      case CONTINUE:
      case BREAK:
      case RETURN:
        JS();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      System.out.print("\u005ct\u005ct\u005ctStatement\u005cn");
  }

  final public void SS() throws ParseException {
    switch (jj_nt.kind) {
    case IF:
      jj_consume_token(IF);
      jj_consume_token(46);
      E();
      jj_consume_token(47);
                label_stack[label_pos++]=label++;
                 pr.write("\u005cnif (not "+arr[top-1]+") \u005cngoto false_"+label_stack[label_pos-1]+"\u005cn");

                //label_count++;

      S();
                  pr.write("goto end_"+label_stack[label_pos-1]+"\u005cn");
                   pr.write("false_"+label_stack[label_pos-1]+":\u005cn");
      if (jj_2_4(2)) {
        jj_consume_token(ELSE);
        S();
      } else {
        ;
      }
                  pr.write("end_"+label_stack[label_pos-1]+":\u005cn");
                  label_pos--;
      break;
    case SWITCH:
      jj_consume_token(SWITCH);
      jj_consume_token(46);
      E();
        switch_expr=arr[top-1];
        label_stack[label_pos++]=label++;
      jj_consume_token(47);
      S();
         pr.print("end_"+label_stack[label_pos-1]+"\u005cn");
        label_pos--;
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
      log.debug("\u005ct\u005ct\u005ctSelection statement ");
  }

  final public void LS() throws ParseException {
             Token t=null;
    switch (jj_nt.kind) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(51);
       pr.write(t.image+":\u005cn");
      S();
      break;
    case CASE:
      jj_consume_token(CASE);
      switch (jj_nt.kind) {
      case INTEGER_LITERAL:
        t = jj_consume_token(INTEGER_LITERAL);
        break;
      case CHARACTER_LITERAL:
        t = jj_consume_token(CHARACTER_LITERAL);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(51);
        label_stack[label_pos++]=label++;
        pr.write("t="+t.image+"\u005cn");
        pr.write("t="+switch_expr+"=="+t.image+"\u005cn");
        pr.write("if(not t)\u005cn");
        pr.write("goto end_"+label_stack[label_pos-1]+"\u005cn");
      S();
        pr.write("end_"+label_stack[label_pos-1]+"\u005cn");
        label_pos--;
      break;
    case DFLT:
      jj_consume_token(DFLT);
      jj_consume_token(51);
          pr.write("default: \u005cn");
      S();
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
      log.debug("\u005ct\u005ct\u005ctLabeled statement ");
  }

  final public void IS() throws ParseException {
    switch (jj_nt.kind) {
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(46);
      E();
      jj_consume_token(47);
      label_stack[label_pos++]=label++;
       pr.write("begin_"+label_stack[label_pos-1]+":\u005cn");
       pr.write("if (not "+arr[top-1]+")\u005cn");
       pr.write("goto end_"+label_stack[label_pos-1]+"\u005cn");
      S();
      pr.write("goto begin_"+label_stack[label_pos-1]+"\u005cn");
      pr.write("end_"+label_stack[label_pos-1]+"\u005cn");
      label_pos--;
      break;
    case DO:
      jj_consume_token(DO);
      label_stack[label_pos++]=label++;
       pr.write("begin_"+label_stack[label_pos-1]+":\u005cn");
      S();
      jj_consume_token(WHILE);
      jj_consume_token(46);
      E();
      jj_consume_token(47);
      jj_consume_token(52);
        pr.write("if ("+arr[top-1]+")\u005cn");
        pr.write("goto begin_"+label_stack[label_pos-1]+"\u005cn");
        pr.write("end_"+label_stack[label_pos-1]+":\u005cn");
        label_pos--;
      break;
    case FOR:
      jj_consume_token(FOR);
      jj_consume_token(46);
      switch (jj_nt.kind) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case 46:
      case 56:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
        E();
        break;
      default:
        ;
      }
      jj_consume_token(52);
      label_stack[label_pos++]=label++;
      pr.write("begin_"+label_stack[label_pos-1]+"\u005cn");
      switch (jj_nt.kind) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case 46:
      case 56:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
        E();
        break;
      default:
        ;
      }
        pr.write("if(not "+arr[top-1]+")\u005cn");
        pr.write("goto end_"+label_stack[label_pos-1]+"\u005cn");
      jj_consume_token(52);
        pr.write("goto body_"+label_stack[label_pos-1]+"\u005cn");

        pr.write("inc_"+label_stack[label_pos-1]+":\u005cn");
      switch (jj_nt.kind) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case 46:
      case 56:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
        E();
        break;
      default:
        ;
      }
      jj_consume_token(47);
        pr.write("goto begin_"+label_stack[label_pos-1]+"\u005cn");
        pr.write("body_"+label_stack[label_pos-1]+":\u005cn");
      S();
        pr.write("goto inc_"+label_stack[label_pos-1]+"\u005cn");
        pr.write("end_"+label_stack[label_pos-1]+"\u005cn");
        label_pos--;
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
      log.debug("\u005ct\u005ct\u005ctIteration statement ");
  }

  final public void JS() throws ParseException {
  Token t=null;
    switch (jj_nt.kind) {
    case GOTO:
      jj_consume_token(GOTO);
      t = jj_consume_token(IDENTIFIER);
      jj_consume_token(52);
    pr.write("goto "+t.image+"\u005cn");
      break;
    case CONTINUE:
      jj_consume_token(CONTINUE);
      jj_consume_token(52);
        pr.write("goto begin_"+label_stack[label_pos-1]+"\u005cn");
      break;
    case BREAK:
      jj_consume_token(BREAK);
      jj_consume_token(52);
        pr.write("goto end_"+label_stack[label_pos-1]+"\u005cn");
      break;
    case RETURN:
      jj_consume_token(RETURN);
      switch (jj_nt.kind) {
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case 46:
      case 56:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
        E();
        break;
      default:
        ;
      }
      jj_consume_token(52);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
      log.debug("\u005ct\u005ct\u005ctJump statement ");
  }

  final public void CtE() throws ParseException {
    CE();
      System.out.print("\u005ct\u005ct\u005ctConstant expression\u005cn");
  }

  final public void ES() throws ParseException {
    switch (jj_nt.kind) {
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case 46:
    case 56:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
      E();
      break;
    default:
      ;
    }
    jj_consume_token(52);
      System.out.print("\u005ct\u005ct\u005ctExpression statement\u005cn");
  }

  final public void E() throws ParseException {
    AE();
    label_4:
    while (true) {
      switch (jj_nt.kind) {
      case 48:
        ;
        break;
      default:
        break label_4;
      }
      jj_consume_token(48);
      AE();
    }
      System.out.print("\u005ct\u005ct\u005ctExpression\u005cn");
  }

  final public void DL() throws ParseException {
    label_5:
    while (true) {
      D();
      if (jj_2_5(2147483647)) {
        ;
      } else {
        break label_5;
      }
    }
      System.out.print("\u005ct\u005ct\u005ctDeclaration list\u005cn");
  }

  final public void D() throws ParseException {
    DS();
    IDtorL();
    jj_consume_token(52);
      System.out.print("\u005ct\u005ct\u005ctDeclaration specifiers\u005cn");
  }

  final public void DS() throws ParseException {
    switch (jj_nt.kind) {
    case AUTO:
    case REGISTER:
    case STATIC:
    case EXTERN:
      SCS();
      if (jj_2_6(2147483647)) {
        DS();
      } else {
        ;
      }
      break;
    case SHORT:
    case LONG:
    case SIGNED:
    case UNSIGNED:
      TM();
      if (jj_2_7(2147483647)) {
        DS();
      } else {
        ;
      }
      break;
    case VOID:
    case CHAR:
    case INT:
    case FLOAT:
    case DOUBLE:
      TS();
      if (jj_2_8(2147483647)) {
        DS();
      } else {
        ;
      }
      break;
    case CONST:
    case VOLATILE:
      TQ();
      if (jj_2_9(2147483647)) {
        DS();
      } else {
        ;
      }
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
    System.out.print("\u005ct\u005ct\u005ctDeclaration specifier\u005cn");
  }

  final public void SCS() throws ParseException {
              Token t=null;
    switch (jj_nt.kind) {
    case AUTO:
      t = jj_consume_token(AUTO);
      break;
    case REGISTER:
      t = jj_consume_token(REGISTER);
      break;
    case STATIC:
      t = jj_consume_token(STATIC);
      break;
    case EXTERN:
      t = jj_consume_token(EXTERN);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
      symtab[symtab_pos][4]=t.image;
      temp[4]=t.image;
      System.out.print("\u005ct\u005ct\u005ctStorage class specifiers \u005cn");
  }

  final public void TM() throws ParseException {
 Token t=null;
    switch (jj_nt.kind) {
    case SHORT:
      t = jj_consume_token(SHORT);
      break;
    case LONG:
      t = jj_consume_token(LONG);
      break;
    case SIGNED:
      t = jj_consume_token(SIGNED);
      break;
    case UNSIGNED:
      t = jj_consume_token(UNSIGNED);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
      symtab[symtab_pos][2]=t.image;
      temp[2]=t.image;

        System.out.print("\u005ct\u005ct\u005ctType modifiers. \u005cn");
  }

  final public void TS() throws ParseException {
 Token t=null;
    switch (jj_nt.kind) {
    case VOID:
      t = jj_consume_token(VOID);
      break;
    case CHAR:
      t = jj_consume_token(CHAR);
      break;
    case INT:
      t = jj_consume_token(INT);
      break;
    case FLOAT:
      t = jj_consume_token(FLOAT);
      break;
    case DOUBLE:
      t = jj_consume_token(DOUBLE);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
      symtab[symtab_pos][1]=t.image;
      temp[1]=t.image;

        System.out.print("\u005ct\u005ct\u005ctType specifiers. \u005cn");
  }

  final public void TQ() throws ParseException {
             Token t=null;
    switch (jj_nt.kind) {
    case CONST:
      t = jj_consume_token(CONST);
      break;
    case VOLATILE:
      t = jj_consume_token(VOLATILE);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
      symtab[symtab_pos][3]=t.image;
      temp[3]=t.image;

      log.debug("\u005ct\u005ct\u005ctType qualifiers ");
  }

  final public void IDtorL() throws ParseException {
    IDtor();
    label_6:
    while (true) {
      switch (jj_nt.kind) {
      case 48:
        ;
        break;
      default:
        break label_6;
      }
      jj_consume_token(48);
      IDtor();
       symtab[symtab_pos][1]=symtab[symtab_pos-1][1];
    }
      System.out.print("\u005ct\u005ct\u005ctInit declarator list\u005cn");
         for(int i=0;i<7;i++)
       {

          temp[i]=null;
       }
  }

  final public void IDtor() throws ParseException {
 Token t=null;
    Dtor();
    switch (jj_nt.kind) {
    case 53:
      jj_consume_token(53);
      I();
         System.out.print("\u005ct\u005ct\u005ctInit declarator\u005cn");
          assign_var(symtab[symtab_pos][0]);
      break;
    default:
      ;
    }
         if(symtab[symtab_pos][4]==null) symtab[symtab_pos][4]="auto";
         if(symtab[symtab_pos][3]==null) symtab[symtab_pos][3]="volatile";
         symtab_pos++;
  }

  final public void Dtor() throws ParseException {
    switch (jj_nt.kind) {
    case 56:
      P();
      break;
    default:
      ;
    }
    DDtor();
      System.out.print("\u005ct\u005ct\u005ctDeclarator\u005cn");
      pointer_level=0;
  }

  final public void DDtor() throws ParseException {
              Token t=null,t1=null;
    switch (jj_nt.kind) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
       if(check_redeclaration(t.image))
       {if (true) throw new ParseException("error: redeclaration of '"+symtab[symtab_pos][1]+" "+t.image+"'");}
      break;
    case 46:
      jj_consume_token(46);
      Dtor();
      jj_consume_token(47);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
       for(int i=1;i<5;i++)
       {
         if(temp[i]!=null)
          symtab[symtab_pos][i]=temp[i];
        }
        symtab[symtab_pos][0]=t.image;
    label_7:
    while (true) {
      switch (jj_nt.kind) {
      case 54:
        ;
        break;
      default:
        break label_7;
      }
      jj_consume_token(54);
      t1 = jj_consume_token(INTEGER_LITERAL);
                                 var_size*=Integer.parseInt(t1.image);
      jj_consume_token(55);
    }
          symtab[symtab_pos][5]=var_size+"";
          if(symtab[symtab_pos][1]!=null)
          {
            switch(symtab[symtab_pos][1])
            {
              case "int":
                  symtab[symtab_pos][5]=(var_size*4)+"";
                  break;
              case "float":
                  symtab[symtab_pos][5]=(var_size*4)+"";
                  break;
              case "double":
                  symtab[symtab_pos][5]=(var_size*8)+"";
                  break;
              case "char":
                  symtab[symtab_pos][5]=(var_size*1)+"";
                  break;
            }
            var_size=1;

          }

          System.out.print("\u005ct\u005ct\u005ctDirect Declarator\u005cn");
  }

  final public void P() throws ParseException {
    pointer_level++;
    jj_consume_token(56);
    switch (jj_nt.kind) {
    case 56:
      P();
      break;
    default:
      ;
    }
     symtab[symtab_pos][6]=pointer_level+"";

     System.out.print("\u005ct\u005ct\u005ctPointer. \u005cn");
  }

  final public void I() throws ParseException {
    AE();
    System.out.print("\u005ct\u005ct\u005ctInitializer\u005cn");
  }

  final public void IL() throws ParseException {
    I();
    label_8:
    while (true) {
      if (jj_2_10(2)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(48);
      I();
    }
    System.out.print("\u005ct\u005ct\u005ctInitializer list\u005cn");
  }

  final public void AE() throws ParseException {
    if (jj_2_11(2147483647)) {
      UE();
      AO();
      if(arr[top-1]=="=")
       {
         if(arr[top-2].charAt(0)<65)
         {
           {if (true) throw new ParseException("error: lvalue required as left operand of assignment");}
         }
       }
      AE();
             var_assign();
    } else if (jj_2_12(3)) {
      CE();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    System.out.print("\u005ct\u005ct\u005ctAssignment expression\u005cn");
  }

  final public void AO() throws ParseException {
 Token t=null;
    switch (jj_nt.kind) {
    case 53:
      t = jj_consume_token(53);
      arr[top++]=t.image;
      break;
    case 57:
      t = jj_consume_token(57);
      arr[top++]="="+arr[top-2]+"*";
      break;
    case 58:
      t = jj_consume_token(58);
      arr[top++]="="+arr[top-2]+"/";
      break;
    case 59:
      t = jj_consume_token(59);
      arr[top++]="="+arr[top-2]+"%";
      break;
    case 60:
      t = jj_consume_token(60);
      arr[top++]="="+arr[top-2]+"+";
      break;
    case 61:
      t = jj_consume_token(61);
      arr[top++]="="+arr[top-2]+"-";
      break;
    case 62:
      t = jj_consume_token(62);
      arr[top++]="="+arr[top-2]+"<< ";
      break;
    case 63:
      t = jj_consume_token(63);
      arr[top++]="="+arr[top-2]+">>";
      break;
    case 64:
      t = jj_consume_token(64);
      arr[top++]="="+arr[top-2]+"&";
      break;
    case 65:
      t = jj_consume_token(65);
      arr[top++]="="+arr[top-2]+"^";
      break;
    case 66:
      t = jj_consume_token(66);
      arr[top++]="="+arr[top-2]+"|";
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
      System.out.print("\u005ct\u005ct\u005ctAssignment operator\u005cn");
  }

  final public void UE() throws ParseException {
             Token t=null;
    if (jj_2_13(3)) {
      PE();
    } else {
      switch (jj_nt.kind) {
      case 67:
        t = jj_consume_token(67);
               arr[top++]="1+";
        UE();
                                       String t1=arr[top-1]; u_assign(); assign_var(t1);
        break;
      case 68:
        t = jj_consume_token(68);
               arr[top++]="1-";
        UE();
                                        t1=arr[top-1]; u_assign(); assign_var(t1);
        break;
      case 69:
        t = jj_consume_token(69);
              arr[top++]="-";
        UE();
                                      t1=arr[top-1]; u_assign();
        break;
      case 70:
        t = jj_consume_token(70);
              arr[top++]="&";
        UE();
                                      t1=arr[top-1]; u_assign();
        break;
      case 56:
        t = jj_consume_token(56);
              arr[top++]="*";
        UE();
                                      t1=arr[top-1]; u_assign();
        break;
      case 71:
        t = jj_consume_token(71);
              arr[top++]="~";
        UE();
                                      t1=arr[top-1]; u_assign();
        break;
      case 72:
        t = jj_consume_token(72);
              arr[top++]="!";
        UE();
                                      t1=arr[top-1]; u_assign();
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      log.debug("\u005ct\u005ct\u005ctUnary expression ");
  }

  final public void PE() throws ParseException {
             Token t=null;
    PrE();
    label_9:
    while (true) {
      switch (jj_nt.kind) {
      case 54:
      case 67:
      case 68:
        ;
        break;
      default:
        break label_9;
      }
      switch (jj_nt.kind) {
      case 54:
        jj_consume_token(54);
        E();
        jj_consume_token(55);
                                              //System.out.print("\t "+arr[top-2]+arr[top-1]+"\n");
                                             arr[top-1]=arr[top-2]+"+"+arr[top-1];
        break;
      case 67:
        t = jj_consume_token(67);
                                   arr[top++]="+1"; String t1=arr[top-2]; u_assign(); assign_var(t1);
        break;
      case 68:
        t = jj_consume_token(68);
                                   arr[top++]="-1";  t1=arr[top-2]; u_assign(); assign_var(t1);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      System.out.print("\u005ct\u005ct\u005ctPostfix expression\u005cn");
  }

  final public void PrE() throws ParseException {
              Token t;
    switch (jj_nt.kind) {
    case IDENTIFIER:
      t = jj_consume_token(IDENTIFIER);
                      if(!check_declaration(t.image))
                      {if (true) throw new ParseException("error: '"+t.image+"' was not declared in this scope");}

                         arr[top++]=t.image;
      break;
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      CT();
      break;
    case 46:
      jj_consume_token(46);
      E();
      jj_consume_token(47);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
      System.out.print("\u005ct\u005ct\u005ctPrimary expression\u005cn");
  }

  final public void CE() throws ParseException {
    LORE();
      System.out.print("\u005ct\u005ct\u005ctConditional expression\u005cn");
  }

  final public void LORE() throws ParseException {
               Token t=null;
    LANDE();
    switch (jj_nt.kind) {
    case 73:
      t = jj_consume_token(73);
                       arr[top++]=t.image;
      LORE();
      System.out.print("\u005ct\u005ct\u005ctLogical OR expression\u005cn");
      assign();
      break;
    default:
      ;
    }
  }

  final public void LANDE() throws ParseException {
  Token t=null;
    IORE();
    switch (jj_nt.kind) {
    case 74:
      t = jj_consume_token(74);
                     arr[top++]=t.image;
      LANDE();
      System.out.print("\u005ct\u005ct\u005ctLogical And expression\u005cn");
      assign();
      break;
    default:
      ;
    }
  }

  final public void IORE() throws ParseException {
  Token t=null;
    EORE();
    switch (jj_nt.kind) {
    case 75:
      t = jj_consume_token(75);
                    arr[top++]=t.image;
      IORE();
      System.out.print("\u005ct\u005ct\u005ctInclusive OR expression\u005cn");
      assign();
      break;
    default:
      ;
    }
  }

  final public void EORE() throws ParseException {
  Token t=null;
    ANDE();
    switch (jj_nt.kind) {
    case 76:
      t = jj_consume_token(76);
                   arr[top++]=t.image;
      EORE();
      System.out.print("\u005ct\u005ct\u005ctExclusive OR expression\u005cn");
          assign();
      break;
    default:
      ;
    }
  }

  final public void ANDE() throws ParseException {
  Token t=null;
    EE();
    switch (jj_nt.kind) {
    case 70:
      t = jj_consume_token(70);
                   arr[top++]=t.image;
      ANDE();
      System.out.print("\u005ct\u005ct\u005ctAnd expression\u005cn");
              assign();
      break;
    default:
      ;
    }
  }

  final public void EE() throws ParseException {
  Token t=null;
    RE();
    switch (jj_nt.kind) {
    case 77:
    case 78:
      switch (jj_nt.kind) {
      case 77:
        t = jj_consume_token(77);
        break;
      case 78:
        t = jj_consume_token(78);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                               arr[top++]=t.image;
      EE();
      System.out.print("\u005ct\u005ct\u005ctEquality expression\u005cn");
             assign();
      break;
    default:
      ;
    }
  }

  final public void RE() throws ParseException {
  Token t=null;
    SE();
    switch (jj_nt.kind) {
    case 79:
    case 80:
    case 81:
    case 82:
      switch (jj_nt.kind) {
      case 79:
        t = jj_consume_token(79);
        break;
      case 80:
        t = jj_consume_token(80);
        break;
      case 81:
        t = jj_consume_token(81);
        break;
      case 82:
        t = jj_consume_token(82);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                                               arr[top++]=t.image;
      RE();
      System.out.print("\u005ct\u005ct\u005ctRelational expression\u005cn");
             assign();
      break;
    default:
      ;
    }
  }

  final public void SE() throws ParseException {
  Token t=null;
    AddE();
    switch (jj_nt.kind) {
    case 83:
    case 84:
      switch (jj_nt.kind) {
      case 83:
        t = jj_consume_token(83);
        break;
      case 84:
        t = jj_consume_token(84);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                                arr[top++]=t.image;
      SE();
      System.out.print("\u005ct\u005ct\u005ctShift expression\u005cn");
              assign();
      break;
    default:
      ;
    }
  }

  final public void AddE() throws ParseException {
 Token t=null;
    MulE();
    switch (jj_nt.kind) {
    case 69:
    case 85:
      switch (jj_nt.kind) {
      case 85:
        t = jj_consume_token(85);
        break;
      case 69:
        t = jj_consume_token(69);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                                 arr[top++]=t.image;
      AddE();
        System.out.print("\u005ct\u005ct\u005ctAdditive expression\u005cn");
        assign();
      break;
    default:
      ;
    }
  }

  final public void MulE() throws ParseException {
 Token t=null;
    UE();
    switch (jj_nt.kind) {
    case 56:
    case 86:
    case 87:
      switch (jj_nt.kind) {
      case 56:
        t = jj_consume_token(56);
        break;
      case 86:
        t = jj_consume_token(86);
        break;
      case 87:
        t = jj_consume_token(87);
        break;
      default:
        jj_consume_token(-1);
        throw new ParseException();
      }
                                    arr[top++]=t.image;
      MulE();
                  System.out.print("\u005ct\u005ct\u005ctMultiplicative expression \u005cn");
                 assign();
      break;
    default:
      ;
    }
  }

  final public void CT() throws ParseException {
 Token t=null;
    switch (jj_nt.kind) {
    case INTEGER_LITERAL:
      t = jj_consume_token(INTEGER_LITERAL);
      break;
    case FLOATING_POINT_LITERAL:
      t = jj_consume_token(FLOATING_POINT_LITERAL);
      break;
    case CHARACTER_LITERAL:
      t = jj_consume_token(CHARACTER_LITERAL);
      break;
    case STRING_LITERAL:
      t = jj_consume_token(STRING_LITERAL);
      break;
    default:
      jj_consume_token(-1);
      throw new ParseException();
    }
       arr[top++]=t.image;
       System.out.print("\u005ct\u005ct\u005ctConstant "+t.image+"\u005cn");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
  }

  private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3_12()) return true;
    }
    return false;
  }

  private boolean jj_3R_82() {
    if (jj_scan_token(IF)) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(48)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) return true;
    }
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(56)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_108()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_59() {
    if (jj_scan_token(49)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(48)) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_105() {
    if (jj_scan_token(54)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    if (jj_scan_token(55)) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_scan_token(46)) return true;
    if (jj_3R_91()) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_98() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) {
    jj_scanpos = xsp;
    if (jj_3R_104()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_105()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3R_91() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) jj_scanpos = xsp;
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_scan_token(53)) return true;
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_91()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(48)) return true;
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3R_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_63()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_64()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_119() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) return true;
    }
    }
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) return true;
    }
    return false;
  }

  private boolean jj_3R_117() {
    if (jj_3R_17()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_119()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_118() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) return true;
    }
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_115() {
    if (jj_3R_117()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_116() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(84)) return true;
    }
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_3R_115()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_114() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(80)) {
    jj_scanpos = xsp;
    if (jj_scan_token(81)) {
    jj_scanpos = xsp;
    if (jj_scan_token(82)) return true;
    }
    }
    }
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_113()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_114()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_70()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_21()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(77)) {
    jj_scanpos = xsp;
    if (jj_scan_token(78)) return true;
    }
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_67()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_65()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_15() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_111()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(70)) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_15()) return true;
    if (jj_3R_31()) return true;
    if (jj_scan_token(52)) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_3R_109()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    Token xsp;
    if (jj_3R_22()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_22()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_107() {
    if (jj_scan_token(76)) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_scan_token(48)) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_36()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_101()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_106()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_107()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(75)) return true;
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_81()) jj_scanpos = xsp;
    if (jj_scan_token(52)) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_3R_99()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(74)) return true;
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(RETURN)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_3R_93()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(73)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_scan_token(BREAK)) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(CONTINUE)) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_3R_73()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(GOTO)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(54)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(55)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(68)) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(67)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(46)) return true;
    if (jj_3R_96()) return true;
    if (jj_scan_token(47)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(FOR)) return true;
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_56()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_57()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_85() {
    if (jj_scan_token(DO)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(72)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(71)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(56)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(70)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(69)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(68)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(67)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(WHILE)) return true;
    return false;
  }

  private boolean jj_3R_17() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(66)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(65)) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(64)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(DFLT)) return true;
    if (jj_scan_token(51)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(63)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(62)) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(61)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_scan_token(60)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    if (jj_scan_token(59)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(58)) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(CASE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) return true;
    }
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(57)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(51)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(53)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) {
    jj_scanpos = xsp;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) {
    jj_scanpos = xsp;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_4() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_17()) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_83() {
    if (jj_scan_token(SWITCH)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_3R_17()) return true;
    if (jj_3R_18()) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public static EG1TokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  public static Token token;
  /** Next token. */
  public static Token jj_nt;
  private static Token jj_scanpos, jj_lastpos;
  private int jj_la;

  /** Constructor with InputStream. */
  public EG1(InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public EG1(InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new EG1TokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  /** Reinitialise. */
  public static void ReInit(InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public static void ReInit(InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  /** Constructor. */
  public EG1(Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new EG1TokenManager(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  /** Reinitialise. */
  public void ReInit(Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  /** Constructor with generated Token Manager. */
  public EG1(EG1TokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  /** Reinitialise. */
  public void ReInit(EG1TokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      return token;
    }
    jj_nt = token;
    token = oldToken;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    Token errortok = token.next;
    int line = errortok.beginLine, column = errortok.beginColumn;
    String mess = (errortok.kind == 0) ? tokenImage[0] : errortok.image;
    return new ParseException("Parse error at line " + line + ", column " + column + ".  Encountered: " + mess);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
